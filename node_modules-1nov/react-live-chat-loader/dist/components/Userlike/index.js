"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _useChat = _interopRequireDefault(require("../../hooks/useChat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const styles = {
  container: {
    zIndex: 1,
    position: 'fixed',
    border: '0',
    width: '64px',
    height: '64px',
    boxShadow: 'rgba(0, 0, 0, 0.24) 0px 8px 16px 0px',
    left: 'auto'
  },
  button: {
    position: 'relative',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    width: '64px',
    minWidth: '64px',
    height: '64px',
    minHeight: '64px',
    padding: '0',
    cursor: 'pointer',
    border: '0'
  },
  icon: {
    fontSize: '36px'
  }
};

const Userlike = ({
  color = 'white',
  backgroundColor = '#0d8cff',
  position = 'right',
  vOffset = '24px',
  hOffset = '24px',
  style = 'round'
}) => {
  const [state, loadChat] = (0, _useChat.default)({
    loadWhenIdle: true
  });
  const positionStyles = {
    bottom: vOffset,
    right: position === 'left' ? 'auto' : hOffset,
    left: position === 'right' ? 'auto' : hOffset
  };
  const shapeStyle = {
    borderRadius: style === 'round' ? '50%' : '0'
  };

  if (state === 'complete') {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    style: _objectSpread(_objectSpread(_objectSpread({}, styles.container), positionStyles), shapeStyle)
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => loadChat({
      open: true
    }),
    onMouseEnter: () => loadChat({
      open: false
    }),
    style: _objectSpread(_objectSpread(_objectSpread({}, styles.button), shapeStyle), {}, {
      backgroundColor
    })
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 36 36",
    fill: "none",
    style: _objectSpread(_objectSpread({}, styles.icon), {}, {
      color
    })
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M18 36c2.893 0 5.626-.682 8.047-1.895h5.11a2 2 0 002-2v-4.393A17.916 17.916 0 0036 18c0-9.941-8.059-18-18-18S0 8.059 0 18s8.059 18 18 18zM9.5 22a1.5 1.5 0 000 3h17a1.5 1.5 0 000-3h-17zm1.5-4a1.5 1.5 0 011.5-1.5h14a1.5 1.5 0 010 3h-14A1.5 1.5 0 0111 18zm-1.5-7a1.5 1.5 0 000 3h17a1.5 1.5 0 000-3h-17z",
    fill: "currentColor"
  }))));
};

var _default = Userlike;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VzZXJsaWtlL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJzdHlsZXMiLCJjb250YWluZXIiLCJ6SW5kZXgiLCJwb3NpdGlvbiIsImJvcmRlciIsIndpZHRoIiwiaGVpZ2h0IiwiYm94U2hhZG93IiwibGVmdCIsImJ1dHRvbiIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsInBhZGRpbmciLCJjdXJzb3IiLCJpY29uIiwiZm9udFNpemUiLCJVc2VybGlrZSIsImNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwidk9mZnNldCIsImhPZmZzZXQiLCJzdHlsZSIsInN0YXRlIiwibG9hZENoYXQiLCJsb2FkV2hlbklkbGUiLCJwb3NpdGlvblN0eWxlcyIsImJvdHRvbSIsInJpZ2h0Iiwic2hhcGVTdHlsZSIsImJvcmRlclJhZGl1cyIsIm9wZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7OztBQUVBLE1BQU1BLE1BSUwsR0FBRztBQUNGQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsTUFBTSxFQUFFLENBREM7QUFFVEMsSUFBQUEsUUFBUSxFQUFFLE9BRkQ7QUFHVEMsSUFBQUEsTUFBTSxFQUFFLEdBSEM7QUFJVEMsSUFBQUEsS0FBSyxFQUFFLE1BSkU7QUFLVEMsSUFBQUEsTUFBTSxFQUFFLE1BTEM7QUFNVEMsSUFBQUEsU0FBUyxFQUFFLHNDQU5GO0FBT1RDLElBQUFBLElBQUksRUFBRTtBQVBHLEdBRFQ7QUFVRkMsRUFBQUEsTUFBTSxFQUFFO0FBQ05OLElBQUFBLFFBQVEsRUFBRSxVQURKO0FBRU5PLElBQUFBLE9BQU8sRUFBRSxNQUZIO0FBR05DLElBQUFBLGNBQWMsRUFBRSxRQUhWO0FBSU5DLElBQUFBLFVBQVUsRUFBRSxRQUpOO0FBS05QLElBQUFBLEtBQUssRUFBRSxNQUxEO0FBTU5RLElBQUFBLFFBQVEsRUFBRSxNQU5KO0FBT05QLElBQUFBLE1BQU0sRUFBRSxNQVBGO0FBUU5RLElBQUFBLFNBQVMsRUFBRSxNQVJMO0FBU05DLElBQUFBLE9BQU8sRUFBRSxHQVRIO0FBVU5DLElBQUFBLE1BQU0sRUFBRSxTQVZGO0FBV05aLElBQUFBLE1BQU0sRUFBRTtBQVhGLEdBVk47QUF1QkZhLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxRQUFRLEVBQUU7QUFETjtBQXZCSixDQUpKOztBQXlDQSxNQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNoQkMsRUFBQUEsS0FBSyxHQUFHLE9BRFE7QUFFaEJDLEVBQUFBLGVBQWUsR0FBRyxTQUZGO0FBR2hCbEIsRUFBQUEsUUFBUSxHQUFHLE9BSEs7QUFJaEJtQixFQUFBQSxPQUFPLEdBQUcsTUFKTTtBQUtoQkMsRUFBQUEsT0FBTyxHQUFHLE1BTE07QUFNaEJDLEVBQUFBLEtBQUssR0FBRztBQU5RLENBQUQsS0FPZ0I7QUFDL0IsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0Isc0JBQVE7QUFBRUMsSUFBQUEsWUFBWSxFQUFFO0FBQWhCLEdBQVIsQ0FBMUI7QUFDQSxRQUFNQyxjQUFjLEdBQUc7QUFDckJDLElBQUFBLE1BQU0sRUFBRVAsT0FEYTtBQUVyQlEsSUFBQUEsS0FBSyxFQUFFM0IsUUFBUSxLQUFLLE1BQWIsR0FBc0IsTUFBdEIsR0FBK0JvQixPQUZqQjtBQUdyQmYsSUFBQUEsSUFBSSxFQUFFTCxRQUFRLEtBQUssT0FBYixHQUF1QixNQUF2QixHQUFnQ29CO0FBSGpCLEdBQXZCO0FBS0EsUUFBTVEsVUFBVSxHQUFHO0FBQ2pCQyxJQUFBQSxZQUFZLEVBQUVSLEtBQUssS0FBSyxPQUFWLEdBQW9CLEtBQXBCLEdBQTRCO0FBRHpCLEdBQW5COztBQUlBLE1BQUlDLEtBQUssS0FBSyxVQUFkLEVBQTBCO0FBQ3hCLFdBQU8sSUFBUDtBQUNEOztBQUVELHNCQUNFO0FBQUssSUFBQSxLQUFLLGdEQUFPekIsTUFBTSxDQUFDQyxTQUFkLEdBQTRCMkIsY0FBNUIsR0FBK0NHLFVBQS9DO0FBQVYsa0JBQ0U7QUFDRSxJQUFBLE9BQU8sRUFBRSxNQUFNTCxRQUFRLENBQUM7QUFBRU8sTUFBQUEsSUFBSSxFQUFFO0FBQVIsS0FBRCxDQUR6QjtBQUVFLElBQUEsWUFBWSxFQUFFLE1BQU1QLFFBQVEsQ0FBQztBQUFFTyxNQUFBQSxJQUFJLEVBQUU7QUFBUixLQUFELENBRjlCO0FBR0UsSUFBQSxLQUFLLGdEQUNBakMsTUFBTSxDQUFDUyxNQURQLEdBRUFzQixVQUZBO0FBR0hWLE1BQUFBO0FBSEc7QUFIUCxrQkFTRTtBQUNFLElBQUEsS0FBSyxFQUFDLEtBRFI7QUFFRSxJQUFBLE1BQU0sRUFBQyxLQUZUO0FBR0UsSUFBQSxPQUFPLEVBQUMsV0FIVjtBQUlFLElBQUEsSUFBSSxFQUFDLE1BSlA7QUFLRSxJQUFBLEtBQUssa0NBQU9yQixNQUFNLENBQUNpQixJQUFkO0FBQW9CRyxNQUFBQTtBQUFwQjtBQUxQLGtCQU9FO0FBQ0UsSUFBQSxRQUFRLEVBQUMsU0FEWDtBQUVFLElBQUEsUUFBUSxFQUFDLFNBRlg7QUFHRSxJQUFBLENBQUMsRUFBQyw2U0FISjtBQUlFLElBQUEsSUFBSSxFQUFDO0FBSlAsSUFQRixDQVRGLENBREYsQ0FERjtBQTRCRCxDQWxERDs7ZUFvRGVELFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHVzZUNoYXQgZnJvbSAnaG9va3MvdXNlQ2hhdCdcblxuY29uc3Qgc3R5bGVzOiB7XG4gIGNvbnRhaW5lcjogQ1NTUHJvcGVydGllc1xuICBidXR0b246IENTU1Byb3BlcnRpZXNcbiAgaWNvbjogQ1NTUHJvcGVydGllc1xufSA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgekluZGV4OiAxLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGJvcmRlcjogJzAnLFxuICAgIHdpZHRoOiAnNjRweCcsXG4gICAgaGVpZ2h0OiAnNjRweCcsXG4gICAgYm94U2hhZG93OiAncmdiYSgwLCAwLCAwLCAwLjI0KSAwcHggOHB4IDE2cHggMHB4JyxcbiAgICBsZWZ0OiAnYXV0bydcbiAgfSxcbiAgYnV0dG9uOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICB3aWR0aDogJzY0cHgnLFxuICAgIG1pbldpZHRoOiAnNjRweCcsXG4gICAgaGVpZ2h0OiAnNjRweCcsXG4gICAgbWluSGVpZ2h0OiAnNjRweCcsXG4gICAgcGFkZGluZzogJzAnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGJvcmRlcjogJzAnXG4gIH0sXG4gIGljb246IHtcbiAgICBmb250U2l6ZTogJzM2cHgnXG4gIH1cbn1cblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY29sb3I/OiBzdHJpbmdcbiAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nXG4gIHBvc2l0aW9uPzogc3RyaW5nXG4gIHZPZmZzZXQ/OiBzdHJpbmdcbiAgaE9mZnNldD86IHN0cmluZ1xuICBzdHlsZT86IHN0cmluZ1xufVxuXG5jb25zdCBVc2VybGlrZSA9ICh7XG4gIGNvbG9yID0gJ3doaXRlJyxcbiAgYmFja2dyb3VuZENvbG9yID0gJyMwZDhjZmYnLFxuICBwb3NpdGlvbiA9ICdyaWdodCcsXG4gIHZPZmZzZXQgPSAnMjRweCcsXG4gIGhPZmZzZXQgPSAnMjRweCcsXG4gIHN0eWxlID0gJ3JvdW5kJ1xufTogUHJvcHMpOiBKU1guRWxlbWVudCB8IG51bGwgPT4ge1xuICBjb25zdCBbc3RhdGUsIGxvYWRDaGF0XSA9IHVzZUNoYXQoeyBsb2FkV2hlbklkbGU6IHRydWUgfSlcbiAgY29uc3QgcG9zaXRpb25TdHlsZXMgPSB7XG4gICAgYm90dG9tOiB2T2Zmc2V0LFxuICAgIHJpZ2h0OiBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gJ2F1dG8nIDogaE9mZnNldCxcbiAgICBsZWZ0OiBwb3NpdGlvbiA9PT0gJ3JpZ2h0JyA/ICdhdXRvJyA6IGhPZmZzZXRcbiAgfVxuICBjb25zdCBzaGFwZVN0eWxlID0ge1xuICAgIGJvcmRlclJhZGl1czogc3R5bGUgPT09ICdyb3VuZCcgPyAnNTAlJyA6ICcwJ1xuICB9XG5cbiAgaWYgKHN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyAuLi5zdHlsZXMuY29udGFpbmVyLCAuLi5wb3NpdGlvblN0eWxlcywgLi4uc2hhcGVTdHlsZSB9fT5cbiAgICAgIDxidXR0b25cbiAgICAgICAgb25DbGljaz17KCkgPT4gbG9hZENoYXQoeyBvcGVuOiB0cnVlIH0pfVxuICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IGxvYWRDaGF0KHsgb3BlbjogZmFsc2UgfSl9XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcbiAgICAgICAgICAuLi5zaGFwZVN0eWxlLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvclxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8c3ZnXG4gICAgICAgICAgd2lkdGg9XCIxZW1cIlxuICAgICAgICAgIGhlaWdodD1cIjFlbVwiXG4gICAgICAgICAgdmlld0JveD1cIjAgMCAzNiAzNlwiXG4gICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgIHN0eWxlPXt7IC4uLnN0eWxlcy5pY29uLCBjb2xvciB9fVxuICAgICAgICA+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgZD1cIk0xOCAzNmMyLjg5MyAwIDUuNjI2LS42ODIgOC4wNDctMS44OTVoNS4xMWEyIDIgMCAwMDItMnYtNC4zOTNBMTcuOTE2IDE3LjkxNiAwIDAwMzYgMThjMC05Ljk0MS04LjA1OS0xOC0xOC0xOFMwIDguMDU5IDAgMThzOC4wNTkgMTggMTggMTh6TTkuNSAyMmExLjUgMS41IDAgMDAwIDNoMTdhMS41IDEuNSAwIDAwMC0zaC0xN3ptMS41LTRhMS41IDEuNSAwIDAxMS41LTEuNWgxNGExLjUgMS41IDAgMDEwIDNoLTE0QTEuNSAxLjUgMCAwMTExIDE4em0tMS41LTdhMS41IDEuNSAwIDAwMCAzaDE3YTEuNSAxLjUgMCAwMDAtM2gtMTd6XCJcbiAgICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlcmxpa2VcbiJdfQ==