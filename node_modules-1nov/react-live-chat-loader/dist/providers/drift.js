"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const domain = 'https://js.driftt.com';

const loadScript = () => {
  if (window.drift) return;
  !function () {
    const t = window.driftt = window.drift = window.driftt || [];

    if (!t.init) {
      if (t.invoked) {
        return void (window.console && //eslint-disable-next-line no-console
        console.error && //eslint-disable-next-line no-console
        console.error('Drift snippet included twice.'));
      } //eslint-disable-next-line  @typescript-eslint/no-extra-semi


      ;
      t.invoked = !0, t.methods = ['identify', 'config', 'track', 'reset', 'debug', 'show', 'ping', 'page', 'hide', 'off', 'on'], //eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.factory = function (e) {
        return function () {
          //eslint-disable-next-line prefer-rest-params
          const n = Array.prototype.slice.call(arguments);
          return n.unshift(e), t.push(n), t;
        };
      }, //eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.methods.forEach(function (e) {
        t[e] = t.factory(e);
      }), //eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.load = function (t) {
        var _i$parentNode;

        const e = 3e5,
              //eslint-disable-next-line @typescript-eslint/no-explicit-any
        n = Math.ceil(new Date() / e) * e,
              o = document.createElement('script');
        o.type = 'text/javascript', o.async = !0, o.crossOrigin = 'anonymous', o.src = 'https://js.driftt.com/include/' + n + '/' + t + '.js';
        const i = document.getElementsByTagName('script')[0];
        (_i$parentNode = i.parentNode) === null || _i$parentNode === void 0 ? void 0 : _i$parentNode.insertBefore(o, i);
      };
    }
  }();
};
/* eslint:enable */


const load = ({
  providerKey,
  setState
}) => {
  loadScript();
  window.drift.load(providerKey);
  window.drift.SNIPPET_VERSION = '0.3.1';
  window.drift.on('ready', () => {
    setState('open');
    setTimeout(() => setState('complete'), 2000);
  });
};

const open = () => window.drift.on('ready', api => api.showWelcomeMessage());

const close = () => window.drift.on('ready', api => api.hideWelcomeMessage());

var _default = {
  domain,
  load,
  open,
  close
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm92aWRlcnMvZHJpZnQudHMiXSwibmFtZXMiOlsiZG9tYWluIiwibG9hZFNjcmlwdCIsIndpbmRvdyIsImRyaWZ0IiwidCIsImRyaWZ0dCIsImluaXQiLCJpbnZva2VkIiwiY29uc29sZSIsImVycm9yIiwibWV0aG9kcyIsImZhY3RvcnkiLCJlIiwibiIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsInB1c2giLCJmb3JFYWNoIiwibG9hZCIsIk1hdGgiLCJjZWlsIiwiRGF0ZSIsIm8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiYXN5bmMiLCJjcm9zc09yaWdpbiIsInNyYyIsImkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJwcm92aWRlcktleSIsInNldFN0YXRlIiwiU05JUFBFVF9WRVJTSU9OIiwib24iLCJzZXRUaW1lb3V0Iiwib3BlbiIsImFwaSIsInNob3dXZWxjb21lTWVzc2FnZSIsImNsb3NlIiwiaGlkZVdlbGNvbWVNZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUcsdUJBQWY7O0FBV0EsTUFBTUMsVUFBVSxHQUFHLE1BQU07QUFDdkIsTUFBSUMsTUFBTSxDQUFDQyxLQUFYLEVBQWtCO0FBRWxCLEdBQUUsWUFBVztBQUNYLFVBQU1DLENBQUMsR0FBSUYsTUFBTSxDQUFDRyxNQUFQLEdBQWdCSCxNQUFNLENBQUNDLEtBQVAsR0FBZUQsTUFBTSxDQUFDRyxNQUFQLElBQWlCLEVBQTNEOztBQUNBLFFBQUksQ0FBQ0QsQ0FBQyxDQUFDRSxJQUFQLEVBQWE7QUFDWCxVQUFJRixDQUFDLENBQUNHLE9BQU4sRUFBZTtBQUNiLGVBQU8sTUFDTEwsTUFBTSxDQUFDTSxPQUFQLElBQ0E7QUFDQUEsUUFBQUEsT0FBTyxDQUFDQyxLQUZSLElBR0E7QUFDQUQsUUFBQUEsT0FB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RyxNQUNaM0MsTUFBTSxDQUFDQyxLQUFQLENBQWFxQyxFQUFiLENBQWdCLE9BQWhCLEVBQTBCRyxHQUFELElBQ3ZCQSxHQUFHLENBQUNHLGtCQUFKLEVBREYsQ0FERjs7ZUFLZTtBQUNiOUMsRUFBQUEsTUFEYTtBQUVic0IsRUFBQUEsSUFGYTtBQUdib0IsRUFBQUEsSUFIYTtBQUliRyxFQUFBQTtBQUphLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gJ3R5cGVzJ1xuXG5jb25zdCBkb21haW4gPSAnaHR0cHM6Ly9qcy5kcmlmdHQuY29tJ1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBkcmlmdDogYW55XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGRyaWZ0dDogYW55XG4gIH1cbn1cblxuY29uc3QgbG9hZFNjcmlwdCA9ICgpID0+IHtcbiAgaWYgKHdpbmRvdy5kcmlmdCkgcmV0dXJuXG5cbiAgIShmdW5jdGlvbigpIHtcbiAgICBjb25zdCB0ID0gKHdpbmRvdy5kcmlmdHQgPSB3aW5kb3cuZHJpZnQgPSB3aW5kb3cuZHJpZnR0IHx8IFtdKVxuICAgIGlmICghdC5pbml0KSB7XG4gICAgICBpZiAodC5pbnZva2VkKSB7XG4gICAgICAgIHJldHVybiB2b2lkIChcbiAgICAgICAgICB3aW5kb3cuY29uc29sZSAmJlxuICAgICAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLmVycm9yICYmXG4gICAgICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RyaWZ0IHNuaXBwZXQgaW5jbHVkZWQgdHdpY2UuJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHRyYS1zZW1pXG4gICAgICA7KHQuaW52b2tlZCA9ICEwKSxcbiAgICAgICAgKHQubWV0aG9kcyA9IFtcbiAgICAgICAgICAnaWRlbnRpZnknLFxuICAgICAgICAgICdjb25maWcnLFxuICAgICAgICAgICd0cmFjaycsXG4gICAgICAgICAgJ3Jlc2V0JyxcbiAgICAgICAgICAnZGVidWcnLFxuICAgICAgICAgICdzaG93JyxcbiAgICAgICAgICAncGluZycsXG4gICAgICAgICAgJ3BhZ2UnLFxuICAgICAgICAgICdoaWRlJyxcbiAgICAgICAgICAnb2ZmJyxcbiAgICAgICAgICAnb24nXG4gICAgICAgIF0pLFxuICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICh0LmZhY3RvcnkgPSBmdW5jdGlvbihlOiBhbnkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgICAgICByZXR1cm4gbi51bnNoaWZ0KGUpLCB0LnB1c2gobiksIHRcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHQubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKGU6IGFueSkge1xuICAgICAgICAgIHRbZV0gPSB0LmZhY3RvcnkoZSlcbiAgICAgICAgfSksXG4gICAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgKHQubG9hZCA9IGZ1bmN0aW9uKHQ6IGFueSkge1xuICAgICAgICAgIGNvbnN0IGUgPSAzZTUsXG4gICAgICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBuID0gTWF0aC5jZWlsKChuZXcgRGF0ZSgpIGFzIGFueSkgLyBlKSAqIGUsXG4gICAgICAgICAgICBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICAgICAgICA7KG8udHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnKSxcbiAgICAgICAgICAgIChvLmFzeW5jID0gITApLFxuICAgICAgICAgICAgKG8uY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJyksXG4gICAgICAgICAgICAoby5zcmMgPSAnaHR0cHM6Ly9qcy5kcmlmdHQuY29tL2luY2x1ZGUvJyArIG4gKyAnLycgKyB0ICsgJy5qcycpXG4gICAgICAgICAgY29uc3QgaSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXVxuICAgICAgICAgIGkucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKG8sIGkpXG4gICAgICAgIH0pXG4gICAgfVxuICB9KSgpXG59XG4vKiBlc2xpbnQ6ZW5hYmxlICovXG5cbmNvbnN0IGxvYWQgPSAoe1xuICBwcm92aWRlcktleSxcbiAgc2V0U3RhdGVcbn06IHtcbiAgcHJvdmlkZXJLZXk6IHN0cmluZ1xuICBzZXRTdGF0ZTogKHN0YXRlOiBTdGF0ZSkgPT4gdm9pZFxufSk6IHZvaWQgPT4ge1xuICBsb2FkU2NyaXB0KClcbiAgd2luZG93LmRyaWZ0LmxvYWQocHJvdmlkZXJLZXkpXG4gIHdpbmRvdy5kcmlmdC5TTklQUEVUX1ZFUlNJT04gPSAnMC4zLjEnXG4gIHdpbmRvdy5kcmlmdC5vbigncmVhZHknLCAoKSA9PiB7XG4gICAgc2V0U3RhdGUoJ29wZW4nKVxuICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0U3RhdGUoJ2NvbXBsZXRlJyksIDIwMDApXG4gIH0pXG59XG5cbmNvbnN0IG9wZW4gPSAoKTogdm9pZCA9PlxuICB3aW5kb3cuZHJpZnQub24oJ3JlYWR5JywgKGFwaTogeyBzaG93V2VsY29tZU1lc3NhZ2U6ICgpID0+IHZvaWQgfSkgPT5cbiAgICBhcGkuc2hvd1dlbGNvbWVNZXNzYWdlKClcbiAgKVxuXG5jb25zdCBjbG9zZSA9ICgpOiB2b2lkID0+XG4gIHdpbmRvdy5kcmlmdC5vbigncmVhZHknLCAoYXBpOiB7IGhpZGVXZWxjb21lTWVzc2FnZTogKCkgPT4gdm9pZCB9KSA9PlxuICAgIGFwaS5oaWRlV2VsY29tZU1lc3NhZ2UoKVxuICApXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZG9tYWluLFxuICBsb2FkLFxuICBvcGVuLFxuICBjbG9zZVxufVxuIl19