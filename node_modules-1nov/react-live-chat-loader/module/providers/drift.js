const domain = 'https://js.driftt.com';

const loadScript = () => {
  if (window.drift) return;
  !function () {
    const t = window.driftt = window.drift = window.driftt || [];

    if (!t.init) {
      if (t.invoked) {
        return void (window.console && //eslint-disable-next-line no-console
        console.error && //eslint-disable-next-line no-console
        console.error('Drift snippet included twice.'));
      } //eslint-disable-next-line  @typescript-eslint/no-extra-semi


      ;
      t.invoked = !0, t.methods = ['identify', 'config', 'track', 'reset', 'debug', 'show', 'ping', 'page', 'hide', 'off', 'on'], //eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.factory = function (e) {
        return function () {
          //eslint-disable-next-line prefer-rest-params
          const n = Array.prototype.slice.call(arguments);
          return n.unshift(e), t.push(n), t;
        };
      }, //eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.methods.forEach(function (e) {
        t[e] = t.factory(e);
      }), //eslint-disable-next-line @typescript-eslint/no-explicit-any
      t.load = function (t) {
        var _i$parentNode;

        const e = 3e5,
              //eslint-disable-next-line @typescript-eslint/no-explicit-any
        n = Math.ceil(new Date() / e) * e,
              o = document.createElement('script');
        o.type = 'text/javascript', o.async = !0, o.crossOrigin = 'anonymous', o.src = 'https://js.driftt.com/include/' + n + '/' + t + '.js';
        const i = document.getElementsByTagName('script')[0];
        (_i$parentNode = i.parentNode) === null || _i$parentNode === void 0 ? void 0 : _i$parentNode.insertBefore(o, i);
      };
    }
  }();
};
/* eslint:enable */


const load = ({
  providerKey,
  setState
}) => {
  loadScript();
  window.drift.load(providerKey);
  window.drift.SNIPPET_VERSION = '0.3.1';
  window.drift.on('ready', () => {
    setState('open');
    setTimeout(() => setState('complete'), 2000);
  });
};

const open = () => window.drift.on('ready', api => api.showWelcomeMessage());

const close = () => window.drift.on('ready', api => api.hideWelcomeMessage());

export default {
  domain,
  load,
  open,
  close
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm92aWRlcnMvZHJpZnQudHMiXSwibmFtZXMiOlsiZG9tYWluIiwibG9hZFNjcmlwdCIsIndpbmRvdyIsImRyaWZ0IiwidCIsImRyaWZ0dCIsImluaXQiLCJpbnZva2VkIiwiY29uc29sZSIsImVycm9yIiwibWV0aG9kcyIsImZhY3RvcnkiLCJlIiwibiIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsInB1c2giLCJmb3JFYWNoIiwibG9hZCIsIk1hdGgiLCJjZWlsIiwiRGF0ZSIsIm8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiYXN5bmMiLCJjcm9zc09yaWdpbiIsInNyYyIsImkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJwcm92aWRlcktleSIsInNldFN0YXRlIiwiU05JUFBFVF9WRVJTSU9OIiwib24iLCJzZXRUaW1lb3V0Iiwib3BlbiIsImFwaSIsInNob3dXZWxjb21lTWVzc2FnZSIsImNsb3NlIiwiaGlkZVdlbGNvbWVNZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFFQSxNQUFNQSxNQUFNLEdBQUcsdUJBQWY7O0FBV0EsTUFBTUMsVUFBVSxHQUFHLE1BQU07QUFDdkIsTUFBSUMsTUFBTSxDQUFDQyxLQUFYLEVBQWtCO0FBRWxCLEdBQUUsWUFBVztBQUNYLFVBQU1DLENBQUMsR0FBSUYsTUFBTSxDQUFDRyxNQUFQLEdBQWdCSCxNQUFNLENBQUNDLEtBQVAsR0FBZUQsTUFBTSxDQUFDRyxNQUFQLElBQWlCLEVBQTNEOztBQUNBLFFBQUksQ0FBQ0QsQ0FBQyxDQUFDRSxJQUFQLEVBQWE7QUFDWCxVQUFJRixDQUFDLENBQUNHLE9BQU4sRUFBZTtBQUNiLGVBQU8sTUFDTEwsTUFBTSxDQUFDTSxPQUFQLElBQ0E7QUFDQUEsUUFBQUEsT0FBTyxDQUFDQyxLQUZSLElBR0E7QUFDQUQsUUFBQUEsT0FBTyxDQUFD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M0MsTUFBTSxDQUFDQyxLQUFQLENBQWFxQyxFQUFiLENBQWdCLE9BQWhCLEVBQTBCRyxHQUFELElBQ3ZCQSxHQUFHLENBQUNHLGtCQUFKLEVBREYsQ0FERjs7QUFLQSxlQUFlO0FBQ2I5QyxFQUFBQSxNQURhO0FBRWJzQixFQUFBQSxJQUZhO0FBR2JvQixFQUFBQSxJQUhhO0FBSWJHLEVBQUFBO0FBSmEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlIH0gZnJvbSAndHlwZXMnXG5cbmNvbnN0IGRvbWFpbiA9ICdodHRwczovL2pzLmRyaWZ0dC5jb20nXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGRyaWZ0OiBhbnlcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZHJpZnR0OiBhbnlcbiAgfVxufVxuXG5jb25zdCBsb2FkU2NyaXB0ID0gKCkgPT4ge1xuICBpZiAod2luZG93LmRyaWZ0KSByZXR1cm5cblxuICAhKGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHQgPSAod2luZG93LmRyaWZ0dCA9IHdpbmRvdy5kcmlmdCA9IHdpbmRvdy5kcmlmdHQgfHwgW10pXG4gICAgaWYgKCF0LmluaXQpIHtcbiAgICAgIGlmICh0Lmludm9rZWQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgKFxuICAgICAgICAgIHdpbmRvdy5jb25zb2xlICYmXG4gICAgICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IgJiZcbiAgICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRHJpZnQgc25pcHBldCBpbmNsdWRlZCB0d2ljZS4nKVxuICAgICAgICApXG4gICAgICB9XG4gICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSAgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhLXNlbWlcbiAgICAgIDsodC5pbnZva2VkID0gITApLFxuICAgICAgICAodC5tZXRob2RzID0gW1xuICAgICAgICAgICdpZGVudGlmeScsXG4gICAgICAgICAgJ2NvbmZpZycsXG4gICAgICAgICAgJ3RyYWNrJyxcbiAgICAgICAgICAncmVzZXQnLFxuICAgICAgICAgICdkZWJ1ZycsXG4gICAgICAgICAgJ3Nob3cnLFxuICAgICAgICAgICdwaW5nJyxcbiAgICAgICAgICAncGFnZScsXG4gICAgICAgICAgJ2hpZGUnLFxuICAgICAgICAgICdvZmYnLFxuICAgICAgICAgICdvbidcbiAgICAgICAgXSksXG4gICAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgKHQuZmFjdG9yeSA9IGZ1bmN0aW9uKGU6IGFueSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgY29uc3QgbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgICAgICAgIHJldHVybiBuLnVuc2hpZnQoZSksIHQucHVzaChuKSwgdFxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdC5tZXRob2RzLmZvckVhY2goZnVuY3Rpb24oZTogYW55KSB7XG4gICAgICAgICAgdFtlXSA9IHQuZmFjdG9yeShlKVxuICAgICAgICB9KSxcbiAgICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAodC5sb2FkID0gZnVuY3Rpb24odDogYW55KSB7XG4gICAgICAgICAgY29uc3QgZSA9IDNlNSxcbiAgICAgICAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIG4gPSBNYXRoLmNlaWwoKG5ldyBEYXRlKCkgYXMgYW55KSAvIGUpICogZSxcbiAgICAgICAgICAgIG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgICAgIDsoby50eXBlID0gJ3RleHQvamF2YXNjcmlwdCcpLFxuICAgICAgICAgICAgKG8uYXN5bmMgPSAhMCksXG4gICAgICAgICAgICAoby5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnKSxcbiAgICAgICAgICAgIChvLnNyYyA9ICdodHRwczovL2pzLmRyaWZ0dC5jb20vaW5jbHVkZS8nICsgbiArICcvJyArIHQgKyAnLmpzJylcbiAgICAgICAgICBjb25zdCBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdXG4gICAgICAgICAgaS5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUobywgaSlcbiAgICAgICAgfSlcbiAgICB9XG4gIH0pKClcbn1cbi8qIGVzbGludDplbmFibGUgKi9cblxuY29uc3QgbG9hZCA9ICh7XG4gIHByb3ZpZGVyS2V5LFxuICBzZXRTdGF0ZVxufToge1xuICBwcm92aWRlcktleTogc3RyaW5nXG4gIHNldFN0YXRlOiAoc3RhdGU6IFN0YXRlKSA9PiB2b2lkXG59KTogdm9pZCA9PiB7XG4gIGxvYWRTY3JpcHQoKVxuICB3aW5kb3cuZHJpZnQubG9hZChwcm92aWRlcktleSlcbiAgd2luZG93LmRyaWZ0LlNOSVBQRVRfVkVSU0lPTiA9ICcwLjMuMSdcbiAgd2luZG93LmRyaWZ0Lm9uKCdyZWFkeScsICgpID0+IHtcbiAgICBzZXRTdGF0ZSgnb3BlbicpXG4gICAgc2V0VGltZW91dCgoKSA9PiBzZXRTdGF0ZSgnY29tcGxldGUnKSwgMjAwMClcbiAgfSlcbn1cblxuY29uc3Qgb3BlbiA9ICgpOiB2b2lkID0+XG4gIHdpbmRvdy5kcmlmdC5vbigncmVhZHknLCAoYXBpOiB7IHNob3dXZWxjb21lTWVzc2FnZTogKCkgPT4gdm9pZCB9KSA9PlxuICAgIGFwaS5zaG93V2VsY29tZU1lc3NhZ2UoKVxuICApXG5cbmNvbnN0IGNsb3NlID0gKCk6IHZvaWQgPT5cbiAgd2luZG93LmRyaWZ0Lm9uKCdyZWFkeScsIChhcGk6IHsgaGlkZVdlbGNvbWVNZXNzYWdlOiAoKSA9PiB2b2lkIH0pID0+XG4gICAgYXBpLmhpZGVXZWxjb21lTWVzc2FnZSgpXG4gIClcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkb21haW4sXG4gIGxvYWQsXG4gIG9wZW4sXG4gIGNsb3NlXG59XG4iXX0=