{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/request/EditPage.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/request/EditPage.jsx","mtime":1698037750000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { Component } from 'react';
import arrayMutators from 'final-form-arrays';
import update from 'immutability-helper';
import _ from 'lodash';
import PropTypes from 'prop-types';
import { confirmAlert } from 'react-confirm-alert';
import { Form } from 'react-final-form';
import { getTranslate } from 'react-localize-redux';
import { connect } from 'react-redux';
import Alert from 'react-s-alert';
import { Tooltip } from 'react-tippy';
import { fetchReasonCodes, hideSpinner, showSpinner } from 'actions';
import ArrayField from 'components/form-elements/ArrayField';
import ButtonField from 'components/form-elements/ButtonField';
import LabelField from 'components/form-elements/LabelField';
import SelectField from 'components/form-elements/SelectField';
import TableRowWithSubfields from 'components/form-elements/TableRowWithSubfields';
import TextField from 'components/form-elements/TextField';
import DetailsModal from 'components/stock-movement-wizard/modals/DetailsModal';
import SubstitutionsModal from 'components/stock-movement-wizard/modals/SubstitutionsModal';
import apiClient from 'utils/apiClient';
import { renderFormField } from 'utils/form-utils';
import { formatProductDisplayName, showOutboundEditValidationErrors } from 'utils/form-values-utils';
import renderHandlingIcons from 'utils/product-handling-icons';
import Translate, { translateWithDefaultMessage } from 'utils/Translate';
import 'react-confirm-alert/src/react-confirm-alert.css';
var BTN_CLASS_MAPPER = {
  YES: 'btn btn-outline-success',
  NO: 'btn btn-outline-secondary',
  EARLIER: 'btn btn-outline-warning',
  HIDDEN: 'btn invisible'
};
var AD_HOCK_FIELDS = {
  editPageItems: {
    type: ArrayField,
    arrowsNavigation: true,
    virtualized: true,
    totalCount: function totalCount(_ref) {
      var _totalCount = _ref.totalCount;
      return _totalCount;
    },
    isRowLoaded: function isRowLoaded(_ref2) {
      var _isRowLoaded = _ref2.isRowLoaded;
      return _isRowLoaded;
    },
    isFirstPageLoaded: function isFirstPageLoaded(_ref3) {
      var _isFirstPageLoaded = _ref3.isFirstPageLoaded;
      return _isFirstPageLoaded;
    },
    loadMoreRows: function loadMoreRows(_ref4) {
      var _loadMoreRows = _ref4.loadMoreRows;
      return _loadMoreRows();
    },
    rowComponent: TableRowWithSubfields,
    getDynamicRowAttr: function getDynamicRowAttr(_ref5) {
      var rowValues = _ref5.rowValues,
        showOnlyErroredItems = _ref5.showOnlyErroredItems,
        itemFilter = _ref5.itemFilter;
      var className = rowValues.statusCode === 'SUBSTITUTED' ? 'crossed-out ' : '';
      if (rowValues.quantityAvailable < rowValues.quantityRequested) {
        className += 'font-weight-bold';
      }
      var filterOutItems = itemFilter && !(rowValues.product.name.toLowerCase().includes(itemFilter.toLowerCase()) || rowValues.productCode.toLowerCase().includes(itemFilter.toLowerCase()));
      var hideRow = showOnlyErroredItems && !rowValues.hasError || filterOutItems;
      return {
        className: className,
        hideRow: hideRow
      };
    },
    subfieldKey: 'substitutionItems',
    headerGroupings: {
      requestInformation: {
        label: 'react.verifyRequest.requestInformation.label',
        defaultLabel: 'Request Information',
        flexWidth: 0.5 + 3 + 1 + 1 + 1 // = Sum of fields flexWidth
      },

      availability: {
        label: 'react.verifyRequest.availability.label',
        defaultLabel: 'Availability',
        flexWidth: 1 + 1 + 1 + 1 // = Sum of fields flexWidth
      },

      edit: {
        label: 'react.verifyRequest.edit.label',
        defaultLabel: 'Edit',
        flexWidth: 1 + 1 + 1 + 0.5 // = Sum of fields flexWidth
      }
    },

    fields: {
      productCode: {
        type: LabelField,
        headerAlign: 'left',
        flexWidth: '0.5',
        getDynamicAttr: function getDynamicAttr(_ref6) {
          var subfield = _ref6.subfield;
          return {
            className: subfield ? 'text-center' : 'text-left ml-1'
          };
        },
        label: 'react.stockMovement.code.label',
        defaultMessage: 'Code',
        attributes: {
          showValueTooltip: true
        }
      },
      product: {
        type: LabelField,
        headerAlign: 'left',
        flexWidth: '3',
        label: 'react.stockMovement.productName.label',
        defaultMessage: 'Product name',
        attributes: {
          formatValue: function formatValue(value) {
            var _value$displayNames, _value$displayNames$d, _value$displayNames2;
            return /*#__PURE__*/React.createElement(Tooltip, {
              html: /*#__PURE__*/React.createElement("div", {
                className: "text-truncate"
              }, value.name),
              theme: "dark",
              disabled: !((_value$displayNames = value.displayNames) !== null && _value$displayNames !== void 0 && _value$displayNames["default"]),
              position: "top-start"
            }, /*#__PURE__*/React.createElement("span", {
              className: "d-flex align-items-center"
            }, /*#__PURE__*/React.createElement("span", {
              className: "text-truncate"
            }, (_value$displayNames$d = (_value$displayNames2 = value.displayNames) === null || _value$displayNames2 === void 0 ? void 0 : _value$displayNames2["default"]) !== null && _value$displayNames$d !== void 0 ? _value$displayNames$d : value.name), renderHandlingIcons(value ? value.handlingIcons : null)));
          }
        },
        getDynamicAttr: function getDynamicAttr(_ref7) {
          var subfield = _ref7.subfield;
          return {
            className: subfield ? 'text-center' : 'text-left ml-1'
          };
        }
      },
      quantityOnHandRequesting: {
        type: LabelField,
        label: 'react.stockMovement.requesterQuantityOnHand.label',
        defaultMessage: 'Requester QOH',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityDemandRequesting: {
        type: LabelField,
        label: 'react.stockMovement.quantityDemand.label',
        defaultMessage: 'Demand',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityRequested: {
        type: function type(params) {
          var fieldName = params.fieldName,
            values = params.values;
          var fieldNameParts = _.split(fieldName, '.');
          if (fieldNameParts.length === 2) {
            var rowIdx = fieldNameParts[0];
            var rowValues = _.get(values, rowIdx);
            if (rowValues.comments) {
              return /*#__PURE__*/React.createElement("div", {
                className: "d-flex align-items-center"
              }, /*#__PURE__*/React.createElement("div", {
                style: {
                  flex: 1,
                  marginLeft: '14px'
                }
              }, /*#__PURE__*/React.createElement(LabelField, params)), /*#__PURE__*/React.createElement(Tooltip, {
                html: rowValues.comments,
                theme: "transparent",
                delay: "150",
                duration: "250",
                hideDelay: "50"
              }, /*#__PURE__*/React.createElement("i", {
                className: "fa fa-sticky-note pr-2"
              })));
            }
          }
          return /*#__PURE__*/React.createElement(LabelField, params);
        },
        label: 'react.verifyRequest.quantityRequested.label',
        defaultMessage: 'Qty Requested',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityOnHand: {
        type: LabelField,
        label: 'react.stockMovement.quantityOnHand.label',
        defaultMessage: 'QOH',
        flexWidth: '1',
        fieldKey: '',
        headerClassName: 'left-border',
        attributes: {
          formatValue: function formatValue(value) {
            return value.quantityOnHand ? value.quantityOnHand.toLocaleString('en-US') : value.quantityOnHand;
          },
          numberField: true,
          className: 'left-border'
        }
      },
      quantityAvailable: {
        type: LabelField,
        label: 'react.stockMovement.available.label',
        defaultMessage: 'Available',
        flexWidth: '1',
        fieldKey: '',
        getDynamicAttr: function getDynamicAttr(_ref8) {
          var fieldValue = _ref8.fieldValue;
          var className = '';
          if (fieldValue && (!fieldValue.quantityAvailable || fieldValue.quantityAvailable < fieldValue.quantityRequested)) {
            className += 'text-danger';
          }
          return {
            className: className
          };
        },
        attributes: {
          formatValue: function formatValue(value) {
            return value.quantityAvailable ? value.quantityAvailable.toLocaleString('en-US') : value.quantityAvailable;
          },
          numberField: true
        }
      },
      quantityDemandFulfilling: {
        type: LabelField,
        label: 'react.stockMovement.demandPerMonth.label',
        defaultMessage: 'Demand per Month',
        flexWidth: '1',
        getDynamicAttr: function getDynamicAttr() {
          return {
            formatValue: function formatValue(value) {
              if (value && value !== '0') {
                return value.toLocaleString('en-US');
              }
              return '0';
            },
            showValueTooltip: true
          };
        },
        attributes: {
          numberField: true
        }
      },
      detailsButton: {
        label: 'react.stockMovement.details.label',
        defaultMessage: 'Details',
        type: DetailsModal,
        flexWidth: '1',
        fieldKey: '',
        attributes: {
          title: 'react.stockMovement.pendingRequisitionDetails.label',
          defaultTitleMessage: 'Pending Requisition Details'
        },
        getDynamicAttr: function getDynamicAttr(_ref9) {
          var _fieldValue$product, _fieldValue$product$d;
          var fieldValue = _ref9.fieldValue,
            stockMovementId = _ref9.stockMovementId,
            values = _ref9.values;
          return {
            productId: fieldValue && fieldValue.product && fieldValue.product.id,
            productCode: fieldValue && fieldValue.product && fieldValue.product.productCode,
            productName: fieldValue && fieldValue.product && fieldValue.product.name,
            displayName: fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$product = fieldValue.product) === null || _fieldValue$product === void 0 ? void 0 : (_fieldValue$product$d = _fieldValue$product.displayNames) === null || _fieldValue$product$d === void 0 ? void 0 : _fieldValue$product$d["default"],
            originId: values && values.origin && values.origin.id,
            stockMovementId: stockMovementId,
            quantityRequested: fieldValue && fieldValue.quantityRequested,
            quantityOnHand: fieldValue && fieldValue.quantityOnHand,
            quantityAvailable: fieldValue && fieldValue.quantityAvailable,
            btnOpenText: 'react.stockMovement.details.label',
            btnOpenDefaultText: 'Details',
            btnCancelText: 'Close',
            btnSaveStyle: {
              display: 'none'
            },
            btnContainerClassName: 'float-right',
            btnOpenAsIcon: true,
            btnOpenStyle: {
              border: 'none',
              cursor: 'pointer'
            },
            btnOpenIcon: 'fa-search'
          };
        }
      },
      substituteButton: {
        label: 'react.stockMovement.substitution.label',
        defaultMessage: 'Substitution',
        type: SubstitutionsModal,
        fieldKey: '',
        flexWidth: '1',
        headerClassName: 'left-border',
        attributes: {
          cellClassName: 'left-border',
          title: 'react.stockMovement.substitutes.label',
          defaultTitleMessage: 'Substitutes'
        },
        getDynamicAttr: function getDynamicAttr(_ref10) {
          var fieldValue = _ref10.fieldValue,
            rowIndex = _ref10.rowIndex,
            stockMovementId = _ref10.stockMovementId,
            onResponse = _ref10.onResponse,
            reviseRequisitionItems = _ref10.reviseRequisitionItems,
            values = _ref10.values,
            reasonCodes = _ref10.reasonCodes,
            showOnly = _ref10.showOnly;
          return {
            onOpen: function onOpen() {
              return reviseRequisitionItems(values);
            },
            productCode: fieldValue && fieldValue.productCode,
            btnOpenText: "react.stockMovement.".concat(fieldValue && fieldValue.substitutionStatus, ".label"),
            btnOpenDefaultText: "".concat(fieldValue && fieldValue.substitutionStatus),
            btnOpenDisabled: fieldValue && fieldValue.statusCode === 'SUBSTITUTED' || showOnly,
            btnOpenClassName: BTN_CLASS_MAPPER[fieldValue && fieldValue.substitutionStatus || 'HIDDEN'],
            rowIndex: rowIndex,
            lineItem: fieldValue,
            stockMovementId: stockMovementId,
            onResponse: onResponse,
            reasonCodes: reasonCodes
          };
        }
      },
      quantityRevised: {
        label: 'react.stockMovement.quantityRevised.label',
        defaultMessage: 'Qty revised',
        type: TextField,
        fieldKey: 'statusCode',
        flexWidth: '1',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref11) {
          var fieldValue = _ref11.fieldValue,
            subfield = _ref11.subfield,
            showOnly = _ref11.showOnly,
            updateRow = _ref11.updateRow,
            values = _ref11.values,
            rowIndex = _ref11.rowIndex;
          return {
            disabled: fieldValue && fieldValue === 'SUBSTITUTED' || subfield || showOnly,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      reasonCode: {
        type: SelectField,
        label: 'react.stockMovement.reasonCode.label',
        defaultMessage: 'Reason code',
        flexWidth: '1',
        fieldKey: 'quantityRevised',
        getDynamicAttr: function getDynamicAttr(_ref12) {
          var fieldValue = _ref12.fieldValue,
            subfield = _ref12.subfield,
            reasonCodes = _ref12.reasonCodes,
            updateRow = _ref12.updateRow,
            values = _ref12.values,
            rowIndex = _ref12.rowIndex,
            showOnly = _ref12.showOnly;
          var isSubstituted = fieldValue && fieldValue.statusCode === 'SUBSTITUTED';
          return {
            disabled: fieldValue === null || fieldValue === undefined || subfield || isSubstituted || showOnly,
            options: reasonCodes,
            showValueTooltip: true,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      revert: {
        type: ButtonField,
        label: 'react.default.button.undo.label',
        defaultMessage: 'Undo',
        flexWidth: '0.5',
        fieldKey: '',
        buttonLabel: 'react.default.button.undo.label',
        buttonDefaultMessage: 'Undo',
        getDynamicAttr: function getDynamicAttr(_ref13) {
          var fieldValue = _ref13.fieldValue,
            revertItem = _ref13.revertItem,
            values = _ref13.values,
            showOnly = _ref13.showOnly;
          return {
            onClick: fieldValue && fieldValue.requisitionItemId ? function () {
              return revertItem(values, fieldValue.requisitionItemId);
            } : function () {
              return null;
            },
            hidden: fieldValue && fieldValue.statusCode ? !_.includes(['CHANGED', 'CANCELED'], fieldValue.statusCode) : false,
            disabled: showOnly
          };
        },
        attributes: {
          className: 'btn btn-outline-danger'
        }
      }
    }
  }
};
var STOCKLIST_FIELDS_PUSH_TYPE = {
  editPageItems: {
    type: ArrayField,
    arrowsNavigation: true,
    virtualized: true,
    totalCount: function totalCount(_ref14) {
      var _totalCount2 = _ref14.totalCount;
      return _totalCount2;
    },
    isRowLoaded: function isRowLoaded(_ref15) {
      var _isRowLoaded2 = _ref15.isRowLoaded;
      return _isRowLoaded2;
    },
    isFirstPageLoaded: function isFirstPageLoaded(_ref16) {
      var _isFirstPageLoaded2 = _ref16.isFirstPageLoaded;
      return _isFirstPageLoaded2;
    },
    loadMoreRows: function loadMoreRows(_ref17) {
      var _loadMoreRows2 = _ref17.loadMoreRows;
      return _loadMoreRows2();
    },
    rowComponent: TableRowWithSubfields,
    getDynamicRowAttr: function getDynamicRowAttr(_ref18) {
      var rowValues = _ref18.rowValues,
        showOnlyErroredItems = _ref18.showOnlyErroredItems,
        itemFilter = _ref18.itemFilter;
      var className = rowValues.statusCode === 'SUBSTITUTED' ? 'crossed-out ' : '';
      if (rowValues.quantityAvailable < rowValues.quantityRequested) {
        className += 'font-weight-bold';
      }
      var filterOutItems = itemFilter && !(rowValues.product.name.toLowerCase().includes(itemFilter.toLowerCase()) || rowValues.productCode.toLowerCase().includes(itemFilter.toLowerCase()));
      var hideRow = showOnlyErroredItems && !rowValues.hasError || filterOutItems;
      return {
        className: className,
        hideRow: hideRow
      };
    },
    subfieldKey: 'substitutionItems',
    headerGroupings: {
      requestInformation: {
        label: 'react.verifyRequest.requestInformation.label',
        defaultLabel: 'Request Information',
        flexWidth: 0.5 + 3 + 1 + 1 + 1 // = Sum of fields flexWidth
      },

      availability: {
        label: 'react.verifyRequest.availability.label',
        defaultLabel: 'Availability',
        flexWidth: 1 + 1 + 1 + 1 // = Sum of fields flexWidth
      },

      edit: {
        label: 'react.verifyRequest.edit.label',
        defaultLabel: 'Edit',
        flexWidth: 1 + 1 + 1 + 0.5 // = Sum of fields flexWidth
      }
    },

    fields: {
      productCode: {
        type: LabelField,
        headerAlign: 'left',
        flexWidth: '0.5',
        getDynamicAttr: function getDynamicAttr(_ref19) {
          var subfield = _ref19.subfield;
          return {
            className: subfield ? 'text-center' : 'text-left ml-1'
          };
        },
        label: 'react.stockMovement.code.label',
        defaultMessage: 'Code',
        attributes: {
          showValueTooltip: true
        }
      },
      product: {
        type: LabelField,
        headerAlign: 'left',
        flexWidth: '3',
        label: 'react.stockMovement.productName.label',
        defaultMessage: 'Product name',
        attributes: {
          formatValue: formatProductDisplayName
        },
        getDynamicAttr: function getDynamicAttr(_ref20) {
          var _fieldValue$displayNa;
          var subfield = _ref20.subfield,
            fieldValue = _ref20.fieldValue;
          return {
            className: subfield ? 'text-center' : 'text-left ml-1',
            showValueTooltip: !!(fieldValue !== null && fieldValue !== void 0 && (_fieldValue$displayNa = fieldValue.displayNames) !== null && _fieldValue$displayNa !== void 0 && _fieldValue$displayNa["default"]),
            tooltipValue: fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.name
          };
        }
      },
      quantityOnStocklist: {
        type: LabelField,
        label: 'react.stockMovement.quantityOnStocklist.label',
        defaultMessage: 'Stocklist QTY',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityOnHandRequesting: {
        type: LabelField,
        label: 'react.stockMovement.requesterQuantityOnHand.label',
        defaultMessage: 'Requester QOH',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityRequested: {
        type: function type(params) {
          var fieldName = params.fieldName,
            values = params.values;
          var fieldNameParts = _.split(fieldName, '.');
          if (fieldNameParts.length === 2) {
            var rowIdx = fieldNameParts[0];
            var rowValues = _.get(values, rowIdx);
            if (rowValues.comments) {
              return /*#__PURE__*/React.createElement("div", {
                className: "d-flex align-items-center"
              }, /*#__PURE__*/React.createElement("div", {
                style: {
                  flex: 1,
                  marginLeft: '14px'
                }
              }, /*#__PURE__*/React.createElement(LabelField, params)), /*#__PURE__*/React.createElement(Tooltip, {
                html: rowValues.comments,
                theme: "transparent",
                delay: "150",
                duration: "250",
                hideDelay: "50"
              }, /*#__PURE__*/React.createElement("i", {
                className: "fa fa-sticky-note pr-2"
              })));
            }
          }
          return /*#__PURE__*/React.createElement(LabelField, params);
        },
        label: 'react.verifyRequest.quantityRequested.label',
        defaultMessage: 'Qty Requested',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityOnHand: {
        type: LabelField,
        label: 'react.stockMovement.quantityOnHand.label',
        defaultMessage: 'QOH',
        flexWidth: '1',
        fieldKey: '',
        headerClassName: 'left-border',
        attributes: {
          formatValue: function formatValue(value) {
            return value.quantityOnHand ? value.quantityOnHand.toLocaleString('en-US') : value.quantityOnHand;
          },
          numberField: true,
          className: 'left-border'
        }
      },
      quantityAvailable: {
        type: LabelField,
        label: 'react.stockMovement.available.label',
        defaultMessage: 'Available',
        flexWidth: '1',
        fieldKey: '',
        getDynamicAttr: function getDynamicAttr(_ref21) {
          var fieldValue = _ref21.fieldValue;
          var className = '';
          if (fieldValue && (!fieldValue.quantityAvailable || fieldValue.quantityAvailable < fieldValue.quantityRequested)) {
            className += 'text-danger';
          }
          return {
            className: className
          };
        },
        attributes: {
          formatValue: function formatValue(value) {
            return value.quantityAvailable ? value.quantityAvailable.toLocaleString('en-US') : value.quantityAvailable;
          },
          numberField: true
        }
      },
      quantityDemandFulfilling: {
        type: LabelField,
        label: 'react.stockMovement.demandPerMonth.label',
        defaultMessage: 'Demand per Month',
        flexWidth: '1',
        getDynamicAttr: function getDynamicAttr() {
          return {
            formatValue: function formatValue(value) {
              if (value && value !== '0') {
                return value.toLocaleString('en-US');
              }
              return '0';
            },
            showValueTooltip: true
          };
        },
        attributes: {
          numberField: true
        }
      },
      detailsButton: {
        label: 'react.stockMovement.details.label',
        defaultMessage: 'Details',
        type: DetailsModal,
        flexWidth: '1',
        fieldKey: '',
        attributes: {
          title: 'react.stockMovement.pendingRequisitionDetails.label',
          defaultTitleMessage: 'Pending Requisition Details'
        },
        getDynamicAttr: function getDynamicAttr(_ref22) {
          var _fieldValue$product2, _fieldValue$product2$;
          var fieldValue = _ref22.fieldValue,
            stockMovementId = _ref22.stockMovementId,
            values = _ref22.values;
          return {
            productId: fieldValue && fieldValue.product && fieldValue.product.id,
            productCode: fieldValue && fieldValue.product && fieldValue.product.productCode,
            productName: fieldValue && fieldValue.product && fieldValue.product.name,
            displayName: fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$product2 = fieldValue.product) === null || _fieldValue$product2 === void 0 ? void 0 : (_fieldValue$product2$ = _fieldValue$product2.displayNames) === null || _fieldValue$product2$ === void 0 ? void 0 : _fieldValue$product2$["default"],
            originId: values && values.origin && values.origin.id,
            stockMovementId: stockMovementId,
            quantityRequested: fieldValue && fieldValue.quantityRequested,
            quantityOnHand: fieldValue && fieldValue.quantityOnHand,
            quantityAvailable: fieldValue && fieldValue.quantityAvailable,
            btnOpenText: 'react.stockMovement.details.label',
            btnOpenDefaultText: 'Details',
            btnCancelText: 'Close',
            btnSaveStyle: {
              display: 'none'
            },
            btnContainerClassName: 'float-right',
            btnOpenAsIcon: true,
            btnOpenStyle: {
              border: 'none',
              cursor: 'pointer'
            },
            btnOpenIcon: 'fa-search'
          };
        }
      },
      substituteButton: {
        label: 'react.stockMovement.substitution.label',
        defaultMessage: 'Substitution',
        type: SubstitutionsModal,
        fieldKey: '',
        flexWidth: '1',
        headerClassName: 'left-border',
        attributes: {
          cellClassName: 'left-border',
          title: 'react.stockMovement.substitutes.label',
          defaultTitleMessage: 'Substitutes'
        },
        getDynamicAttr: function getDynamicAttr(_ref23) {
          var fieldValue = _ref23.fieldValue,
            rowIndex = _ref23.rowIndex,
            stockMovementId = _ref23.stockMovementId,
            onResponse = _ref23.onResponse,
            reviseRequisitionItems = _ref23.reviseRequisitionItems,
            values = _ref23.values,
            reasonCodes = _ref23.reasonCodes,
            showOnly = _ref23.showOnly;
          return {
            onOpen: function onOpen() {
              return reviseRequisitionItems(values);
            },
            productCode: fieldValue && fieldValue.productCode,
            btnOpenText: "react.stockMovement.".concat(fieldValue && fieldValue.substitutionStatus, ".label"),
            btnOpenDefaultText: "".concat(fieldValue && fieldValue.substitutionStatus),
            btnOpenDisabled: fieldValue && fieldValue.statusCode === 'SUBSTITUTED' || showOnly,
            btnOpenClassName: BTN_CLASS_MAPPER[fieldValue && fieldValue.substitutionStatus || 'HIDDEN'],
            rowIndex: rowIndex,
            lineItem: fieldValue,
            stockMovementId: stockMovementId,
            onResponse: onResponse,
            reasonCodes: reasonCodes
          };
        }
      },
      quantityRevised: {
        label: 'react.stockMovement.quantityRevised.label',
        defaultMessage: 'Qty revised',
        type: TextField,
        fieldKey: 'statusCode',
        flexWidth: '1',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref24) {
          var fieldValue = _ref24.fieldValue,
            subfield = _ref24.subfield,
            showOnly = _ref24.showOnly,
            updateRow = _ref24.updateRow,
            values = _ref24.values,
            rowIndex = _ref24.rowIndex;
          return {
            disabled: fieldValue && fieldValue === 'SUBSTITUTED' || subfield || showOnly,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      reasonCode: {
        type: SelectField,
        label: 'react.stockMovement.reasonCode.label',
        defaultMessage: 'Reason code',
        flexWidth: '1',
        fieldKey: 'quantityRevised',
        getDynamicAttr: function getDynamicAttr(_ref25) {
          var fieldValue = _ref25.fieldValue,
            subfield = _ref25.subfield,
            reasonCodes = _ref25.reasonCodes,
            updateRow = _ref25.updateRow,
            values = _ref25.values,
            rowIndex = _ref25.rowIndex,
            showOnly = _ref25.showOnly;
          var isSubstituted = fieldValue && fieldValue.statusCode === 'SUBSTITUTED';
          return {
            disabled: fieldValue === null || fieldValue === undefined || subfield || isSubstituted || showOnly,
            options: reasonCodes,
            showValueTooltip: true,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      revert: {
        type: ButtonField,
        label: 'react.default.button.undo.label',
        defaultMessage: 'Undo',
        flexWidth: '0.5',
        fieldKey: '',
        buttonLabel: 'react.default.button.undo.label',
        buttonDefaultMessage: 'Undo',
        getDynamicAttr: function getDynamicAttr(_ref26) {
          var fieldValue = _ref26.fieldValue,
            revertItem = _ref26.revertItem,
            values = _ref26.values,
            showOnly = _ref26.showOnly;
          return {
            onClick: fieldValue && fieldValue.requisitionItemId ? function () {
              return revertItem(values, fieldValue.requisitionItemId);
            } : function () {
              return null;
            },
            hidden: fieldValue && fieldValue.statusCode ? !_.includes(['CHANGED', 'CANCELED'], fieldValue.statusCode) : false,
            disabled: showOnly
          };
        },
        attributes: {
          className: 'btn btn-outline-danger'
        }
      }
    }
  }
};
var STOCKLIST_FIELDS_PULL_TYPE = {
  editPageItems: {
    type: ArrayField,
    arrowsNavigation: true,
    virtualized: true,
    totalCount: function totalCount(_ref27) {
      var _totalCount3 = _ref27.totalCount;
      return _totalCount3;
    },
    isRowLoaded: function isRowLoaded(_ref28) {
      var _isRowLoaded3 = _ref28.isRowLoaded;
      return _isRowLoaded3;
    },
    isFirstPageLoaded: function isFirstPageLoaded(_ref29) {
      var _isFirstPageLoaded3 = _ref29.isFirstPageLoaded;
      return _isFirstPageLoaded3;
    },
    loadMoreRows: function loadMoreRows(_ref30) {
      var _loadMoreRows3 = _ref30.loadMoreRows;
      return _loadMoreRows3();
    },
    rowComponent: TableRowWithSubfields,
    getDynamicRowAttr: function getDynamicRowAttr(_ref31) {
      var rowValues = _ref31.rowValues,
        showOnlyErroredItems = _ref31.showOnlyErroredItems,
        itemFilter = _ref31.itemFilter;
      var className = rowValues.statusCode === 'SUBSTITUTED' ? 'crossed-out ' : '';
      if (rowValues.quantityAvailable < rowValues.quantityRequested) {
        className += 'font-weight-bold';
      }
      var filterOutItems = itemFilter && !(rowValues.product.name.toLowerCase().includes(itemFilter.toLowerCase()) || rowValues.productCode.toLowerCase().includes(itemFilter.toLowerCase()));
      var hideRow = showOnlyErroredItems && !rowValues.hasError || filterOutItems;
      return {
        className: className,
        hideRow: hideRow
      };
    },
    subfieldKey: 'substitutionItems',
    headerGroupings: {
      requestInformation: {
        label: 'react.verifyRequest.requestInformation.label',
        defaultLabel: 'Request Information',
        flexWidth: 0.5 + 3.5 + 1 + 1 + 1 // = Sum of fields flexWidth
      },

      availability: {
        label: 'react.verifyRequest.availability.label',
        defaultLabel: 'Availability',
        flexWidth: 1 + 1 + 1 + 1 // = Sum of fields flexWidth
      },

      edit: {
        label: 'react.verifyRequest.edit.label',
        defaultLabel: 'Edit',
        flexWidth: 1 + 1 + 1.5 + 0.5 // = Sum of fields flexWidth
      }
    },

    fields: {
      productCode: {
        type: LabelField,
        headerAlign: 'left',
        flexWidth: '0.5',
        getDynamicAttr: function getDynamicAttr(_ref32) {
          var subfield = _ref32.subfield;
          return {
            className: subfield ? 'text-center' : 'text-left ml-1'
          };
        },
        label: 'react.stockMovement.code.label',
        defaultMessage: 'Code',
        attributes: {
          showValueTooltip: true
        }
      },
      product: {
        type: LabelField,
        headerAlign: 'left',
        flexWidth: '3.5',
        label: 'react.stockMovement.productName.label',
        defaultMessage: 'Product name',
        attributes: {
          formatValue: formatProductDisplayName
        },
        getDynamicAttr: function getDynamicAttr(_ref33) {
          var _fieldValue$displayNa2;
          var subfield = _ref33.subfield,
            fieldValue = _ref33.fieldValue;
          return {
            className: subfield ? 'text-center' : 'text-left ml-1',
            showValueTooltip: !!(fieldValue !== null && fieldValue !== void 0 && (_fieldValue$displayNa2 = fieldValue.displayNames) !== null && _fieldValue$displayNa2 !== void 0 && _fieldValue$displayNa2["default"]),
            tooltipValue: fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.name
          };
        }
      },
      demandPerReplenishmentPeriod: {
        type: LabelField,
        label: 'react.stockMovement.demandPerReplenishmentPeriod.label',
        defaultMessage: 'Demand per Replenishment Period',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityOnHandRequesting: {
        type: LabelField,
        label: 'react.stockMovement.requesterQuantityOnHand.label',
        defaultMessage: 'Requester QOH',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityRequested: {
        type: function type(params) {
          var fieldName = params.fieldName,
            values = params.values;
          var fieldNameParts = _.split(fieldName, '.');
          if (fieldNameParts.length === 2) {
            var rowIdx = fieldNameParts[0];
            var rowValues = _.get(values, rowIdx);
            if (rowValues.comments) {
              return /*#__PURE__*/React.createElement("div", {
                className: "d-flex align-items-center"
              }, /*#__PURE__*/React.createElement("div", {
                style: {
                  flex: 1,
                  marginLeft: '14px'
                }
              }, /*#__PURE__*/React.createElement(LabelField, params)), /*#__PURE__*/React.createElement(Tooltip, {
                html: rowValues.comments,
                theme: "transparent",
                delay: "150",
                duration: "250",
                hideDelay: "50"
              }, /*#__PURE__*/React.createElement("i", {
                className: "fa fa-sticky-note pr-2"
              })));
            }
          }
          return /*#__PURE__*/React.createElement(LabelField, params);
        },
        label: 'react.verifyRequest.quantityRequested.label',
        defaultMessage: 'Qty Requested',
        flexWidth: '1',
        attributes: {
          formatValue: function formatValue(value) {
            return value ? value.toLocaleString('en-US') : value;
          },
          numberField: true
        }
      },
      quantityOnHand: {
        type: LabelField,
        label: 'react.stockMovement.quantityOnHand.label',
        defaultMessage: 'QOH',
        flexWidth: '1',
        fieldKey: '',
        headerClassName: 'left-border',
        attributes: {
          formatValue: function formatValue(value) {
            return value.quantityOnHand ? value.quantityOnHand.toLocaleString('en-US') : value.quantityOnHand;
          },
          numberField: true,
          className: 'left-border'
        }
      },
      quantityAvailable: {
        type: LabelField,
        label: 'react.stockMovement.available.label',
        defaultMessage: 'Available',
        flexWidth: '1',
        fieldKey: '',
        getDynamicAttr: function getDynamicAttr(_ref34) {
          var fieldValue = _ref34.fieldValue;
          var className = '';
          if (fieldValue && (!fieldValue.quantityAvailable || fieldValue.quantityAvailable < fieldValue.quantityRequested)) {
            className += 'text-danger';
          }
          return {
            className: className
          };
        },
        attributes: {
          formatValue: function formatValue(value) {
            return value.quantityAvailable ? value.quantityAvailable.toLocaleString('en-US') : value.quantityAvailable;
          },
          numberField: true
        }
      },
      quantityDemandFulfilling: {
        type: LabelField,
        label: 'react.stockMovement.demandPerMonth.labe',
        defaultMessage: 'Demand per Month',
        flexWidth: '1',
        getDynamicAttr: function getDynamicAttr() {
          return {
            formatValue: function formatValue(value) {
              if (value && value !== '0') {
                return value.toLocaleString('en-US');
              }
              return '0';
            },
            showValueTooltip: true
          };
        },
        attributes: {
          numberField: true
        }
      },
      detailsButton: {
        label: 'react.stockMovement.details.label',
        defaultMessage: 'Details',
        type: DetailsModal,
        fieldKey: '',
        flexWidth: '1',
        attributes: {
          title: 'react.stockMovement.pendingRequisitionDetails.label',
          defaultTitleMessage: 'Pending Requisition Details'
        },
        getDynamicAttr: function getDynamicAttr(_ref35) {
          var _fieldValue$product3, _fieldValue$product3$;
          var fieldValue = _ref35.fieldValue,
            stockMovementId = _ref35.stockMovementId,
            values = _ref35.values;
          return {
            productId: fieldValue && fieldValue.product && fieldValue.product.id,
            productCode: fieldValue && fieldValue.product && fieldValue.product.productCode,
            productName: fieldValue && fieldValue.product && fieldValue.product.name,
            displayName: fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$product3 = fieldValue.product) === null || _fieldValue$product3 === void 0 ? void 0 : (_fieldValue$product3$ = _fieldValue$product3.displayNames) === null || _fieldValue$product3$ === void 0 ? void 0 : _fieldValue$product3$["default"],
            originId: values && values.origin && values.origin.id,
            stockMovementId: stockMovementId,
            quantityRequested: fieldValue && fieldValue.quantityRequested,
            quantityOnHand: fieldValue && fieldValue.quantityOnHand,
            quantityAvailable: fieldValue && fieldValue.quantityAvailable,
            btnOpenText: 'react.stockMovement.details.label',
            btnOpenDefaultText: 'Details',
            btnCancelText: 'Close',
            btnSaveStyle: {
              display: 'none'
            },
            btnContainerClassName: 'float-right',
            btnOpenAsIcon: true,
            btnOpenStyle: {
              border: 'none',
              cursor: 'pointer'
            },
            btnOpenIcon: 'fa-search'
          };
        }
      },
      substituteButton: {
        label: 'react.stockMovement.substitution.label',
        defaultMessage: 'Substitution',
        type: SubstitutionsModal,
        fieldKey: '',
        flexWidth: '1',
        headerClassName: 'left-border',
        attributes: {
          cellClassName: 'left-border',
          title: 'react.stockMovement.substitutes.label',
          defaultTitleMessage: 'Substitutes'
        },
        getDynamicAttr: function getDynamicAttr(_ref36) {
          var fieldValue = _ref36.fieldValue,
            rowIndex = _ref36.rowIndex,
            stockMovementId = _ref36.stockMovementId,
            onResponse = _ref36.onResponse,
            reviseRequisitionItems = _ref36.reviseRequisitionItems,
            values = _ref36.values,
            reasonCodes = _ref36.reasonCodes,
            showOnly = _ref36.showOnly;
          return {
            onOpen: function onOpen() {
              return reviseRequisitionItems(values);
            },
            productCode: fieldValue && fieldValue.productCode,
            btnOpenText: "react.stockMovement.".concat(fieldValue && fieldValue.substitutionStatus, ".label"),
            btnOpenDefaultText: "".concat(fieldValue && fieldValue.substitutionStatus),
            btnOpenDisabled: fieldValue && fieldValue.statusCode === 'SUBSTITUTED' || showOnly,
            btnOpenClassName: BTN_CLASS_MAPPER[fieldValue && fieldValue.substitutionStatus || 'HIDDEN'],
            rowIndex: rowIndex,
            lineItem: fieldValue,
            stockMovementId: stockMovementId,
            onResponse: onResponse,
            reasonCodes: reasonCodes
          };
        }
      },
      quantityRevised: {
        label: 'react.stockMovement.quantityRevised.label',
        defaultMessage: 'Qty revised',
        type: TextField,
        fieldKey: 'statusCode',
        flexWidth: '1',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref37) {
          var fieldValue = _ref37.fieldValue,
            subfield = _ref37.subfield,
            showOnly = _ref37.showOnly,
            updateRow = _ref37.updateRow,
            values = _ref37.values,
            rowIndex = _ref37.rowIndex;
          return {
            disabled: fieldValue && fieldValue === 'SUBSTITUTED' || subfield || showOnly,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      reasonCode: {
        type: SelectField,
        label: 'react.stockMovement.reasonCode.label',
        defaultMessage: 'Reason code',
        flexWidth: '1.5',
        fieldKey: 'quantityRevised',
        getDynamicAttr: function getDynamicAttr(_ref38) {
          var fieldValue = _ref38.fieldValue,
            subfield = _ref38.subfield,
            reasonCodes = _ref38.reasonCodes,
            updateRow = _ref38.updateRow,
            values = _ref38.values,
            rowIndex = _ref38.rowIndex,
            showOnly = _ref38.showOnly;
          var isSubstituted = fieldValue && fieldValue.statusCode === 'SUBSTITUTED';
          return {
            disabled: fieldValue === null || fieldValue === undefined || subfield || isSubstituted || showOnly,
            options: reasonCodes,
            showValueTooltip: true,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      revert: {
        type: ButtonField,
        label: 'react.default.button.undo.label',
        defaultMessage: 'Undo',
        flexWidth: '0.5',
        fieldKey: '',
        buttonLabel: 'react.default.button.undo.label',
        buttonDefaultMessage: 'Undo',
        getDynamicAttr: function getDynamicAttr(_ref39) {
          var fieldValue = _ref39.fieldValue,
            revertItem = _ref39.revertItem,
            values = _ref39.values,
            showOnly = _ref39.showOnly;
          return {
            onClick: fieldValue && fieldValue.requisitionItemId ? function () {
              return revertItem(values, fieldValue.requisitionItemId);
            } : function () {
              return null;
            },
            hidden: fieldValue && fieldValue.statusCode ? !_.includes(['CHANGED', 'CANCELED'], fieldValue.statusCode) : false,
            disabled: showOnly
          };
        },
        attributes: {
          className: 'btn btn-outline-danger'
        }
      }
    }
  }
};
var REPLENISHMENT_TYPE_PULL = 'PULL';
function validateForSave(values) {
  var errors = {};
  errors.editPageItems = [];
  _.forEach(values.editPageItems, function (item, key) {
    if (!_.isEmpty(item.quantityRevised) && _.isEmpty(item.reasonCode)) {
      errors.editPageItems[key] = {
        reasonCode: 'react.stockMovement.errors.reasonCodeRequired.label'
      };
    } else if (_.isNil(item.quantityRevised) && !_.isEmpty(item.reasonCode) && item.statusCode !== 'SUBSTITUTED') {
      errors.editPageItems[key] = {
        quantityRevised: 'react.stockMovement.errors.revisedQuantityRequired.label'
      };
    }
    if (parseInt(item.quantityRevised, 10) === item.quantityRequested) {
      errors.editPageItems[key] = {
        quantityRevised: 'react.stockMovement.errors.sameRevisedQty.label'
      };
    }
    if (!_.isEmpty(item.quantityRevised) && item.quantityAvailable >= 0 && item.quantityRevised > item.quantityAvailable) {
      errors.editPageItems[key] = {
        quantityRevised: 'react.stockMovement.errors.higherQty.label'
      };
    }
    if (!_.isEmpty(item.quantityRevised) && item.quantityRevised < 0) {
      errors.editPageItems[key] = {
        quantityRevised: 'react.stockMovement.errors.negativeQty.label'
      };
    }
  });
  return errors;
}

/**
 * The third step of stock movement(for stock requests) where user can see the
 * stock available and adjust quantities or make substitutions based on that information.
 * or validate the current status of a request
 */
var EditItemsPage = /*#__PURE__*/function (_Component) {
  _inherits(EditItemsPage, _Component);
  var _super = _createSuper(EditItemsPage);
  function EditItemsPage(props) {
    var _this;
    _classCallCheck(this, EditItemsPage);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "dataFetched", false);
    _this.state = {
      statusCode: '',
      revisedItems: [],
      values: _objectSpread(_objectSpread({}, _this.props.initialValues), {}, {
        editPageItems: []
      }),
      hasItemsLoaded: false,
      totalCount: 0,
      isFirstPageLoaded: false,
      showOnlyErroredItems: false,
      itemFilter: ''
    };
    _this.revertItem = _this.revertItem.bind(_assertThisInitialized(_this));
    _this.fetchEditPageItems = _this.fetchEditPageItems.bind(_assertThisInitialized(_this));
    _this.reviseRequisitionItems = _this.reviseRequisitionItems.bind(_assertThisInitialized(_this));
    _this.isRowLoaded = _this.isRowLoaded.bind(_assertThisInitialized(_this));
    _this.loadMoreRows = _this.loadMoreRows.bind(_assertThisInitialized(_this));
    _this.updateRow = _this.updateRow.bind(_assertThisInitialized(_this));
    _this.markErroredLines = _this.markErroredLines.bind(_assertThisInitialized(_this));
    _this.validate = _this.validate.bind(_assertThisInitialized(_this));
    _this.props.showSpinner();
    return _this;
  }
  _createClass(EditItemsPage, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.stockMovementTranslationsFetched) {
        this.dataFetched = true;
        this.fetchAllData(false);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.stockMovementTranslationsFetched && !this.dataFetched) {
        this.dataFetched = true;
        this.fetchAllData(false);
      }

      // If we change the language, refetch the reason codes
      if (nextProps.currentLocale !== this.props.currentLocale) {
        this.props.fetchReasonCodes();
      }
    }
  }, {
    key: "setEditPageItems",
    value: function setEditPageItems(response, startIndex) {
      var _this2 = this;
      this.props.showSpinner();
      var data = response.data.data;
      var editPageItems = _.map(data, function (val) {
        return _objectSpread(_objectSpread({}, val), {}, {
          disabled: true,
          quantityOnHand: val.quantityOnHand > 0 ? val.quantityOnHand : 0,
          quantityAvailable: val.quantityAvailable > 0 ? val.quantityAvailable : 0,
          product: _objectSpread(_objectSpread({}, val.product), {}, {
            label: "".concat(val.productCode, " ").concat(val.productName)
          }),
          // eslint-disable-next-line max-len
          reasonCode: _.find(_this2.props.reasonCodes, function (_ref40) {
            var value = _ref40.value;
            return _.includes(val.reasonCode, value);
          }),
          substitutionItems: _.map(val.substitutionItems, function (sub) {
            return _objectSpread(_objectSpread({}, sub), {}, {
              requisitionItemId: val.requisitionItemId,
              product: _objectSpread(_objectSpread({}, sub.product), {}, {
                label: "".concat(sub.productCode, " ").concat(sub.productName)
              }),
              // eslint-disable-next-line max-len
              reasonCode: _.find(_this2.props.reasonCodes, function (_ref41) {
                var value = _ref41.value;
                return _.includes(val.reasonCode, value);
              })
            });
          })
        });
      });
      this.setState({
        revisedItems: _.filter(editPageItems, function (item) {
          return item.statusCode === 'CHANGED';
        }),
        values: _objectSpread(_objectSpread({}, this.state.values), {}, {
          editPageItems: _.uniqBy(_.concat(this.state.values.editPageItems, editPageItems), 'requisitionItemId')
        }),
        hasItemsLoaded: this.state.hasItemsLoaded || this.state.totalCount === _.uniqBy(_.concat(this.state.values.editPageItems, editPageItems), 'requisitionItemId').length
      }, function () {
        // eslint-disable-next-line max-len
        if (!_.isNull(startIndex) && _this2.state.values.editPageItems.length !== _this2.state.totalCount) {
          _this2.loadMoreRows({
            startIndex: startIndex + _this2.props.pageSize
          });
        }
        _this2.props.hideSpinner();
      });
    }
  }, {
    key: "getFields",
    value: function getFields() {
      if (_.get(this.state.values.stocklist, 'id')) {
        if (_.get(this.state.values.replenishmentType, 'name') === REPLENISHMENT_TYPE_PULL) {
          return STOCKLIST_FIELDS_PULL_TYPE;
        }
        return STOCKLIST_FIELDS_PUSH_TYPE;
      }
      return AD_HOCK_FIELDS;
    }
  }, {
    key: "validate",
    value: function validate(values) {
      var errors = validateForSave(values);
      _.forEach(values.editPageItems, function (item, key) {
        if (_.isNil(item.quantityRevised) && item.quantityRequested > item.quantityAvailable && item.statusCode !== 'SUBSTITUTED') {
          errors.editPageItems[key] = {
            quantityRevised: 'react.stockMovement.errors.lowerQty.label'
          };
        }
      });
      this.markErroredLines(values, errors);
      return errors;
    }
  }, {
    key: "markErroredLines",
    value: function markErroredLines(values, errors) {
      var updatedValues = values;
      _.forEach(this.state.values.editPageItems, function (item, itemIdx) {
        updatedValues = update(updatedValues, {
          editPageItems: _defineProperty({}, itemIdx, {
            hasError: {
              $set: !!_.find(errors.editPageItems, function (error, errorIdx) {
                return itemIdx === errorIdx;
              })
            }
          })
        });
      });
      this.setState({
        values: updatedValues,
        showOnlyErroredItems: !errors.editPageItems.length ? false : this.state.showOnlyErroredItems
      });
    }
  }, {
    key: "fetchAllData",
    value:
    /**
     * Fetches all required data.
     * @param {boolean} forceFetch
     * @public
     */
    function fetchAllData(forceFetch) {
      var _this3 = this;
      this.props.showSpinner();
      // TODO: When having full React, fetch only if not fetched yet or language changed
      this.props.fetchReasonCodes();
      this.fetchEditPageData().then(function (resp) {
        var statusCode = resp.data.data.statusCode;
        var totalCount = resp.data.totalCount;
        _this3.setState({
          statusCode: statusCode,
          totalCount: totalCount
        }, function () {
          if (!_this3.props.isPaginated || forceFetch) {
            _this3.fetchItems();
          }
        });
      })["catch"](function () {
        _this3.props.hideSpinner();
      });
    }
  }, {
    key: "fetchItems",
    value: function fetchItems() {
      var _this4 = this;
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?stepNumber=3");
      apiClient.get(url).then(function (response) {
        _this4.setEditPageItems(response, null);
        _this4.setState({
          hasItemsLoaded: true
        });
      });
    }
  }, {
    key: "fetchEditPageItems",
    value: function fetchEditPageItems() {
      var _this5 = this;
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?stepNumber=3");
      apiClient.get(url).then(function (response) {
        var data = response.data.data;
        _this5.setState({
          hasItemsLoaded: true,
          values: _objectSpread(_objectSpread({}, _this5.state.values), {}, {
            editPageItems: _.map(data, function (item) {
              return _objectSpread(_objectSpread({}, item), {}, {
                quantityOnHand: item.quantityOnHand || 0,
                // eslint-disable-next-line max-len
                reasonCode: _.find(_this5.props.reasonCodes, function (_ref42) {
                  var value = _ref42.value;
                  return _.includes(item.reasonCode, value);
                }),
                substitutionItems: _.map(item.substitutionItems, function (sub) {
                  return _objectSpread(_objectSpread({}, sub), {}, {
                    requisitionItemId: item.requisitionItemId,
                    // eslint-disable-next-line max-len
                    reasonCode: _.find(_this5.props.reasonCodes, function (_ref43) {
                      var value = _ref43.value;
                      return _.includes(item.reasonCode, value);
                    })
                  });
                })
              });
            })
          })
        }, function () {
          _this5.fetchAllData(false);
          _this5.props.hideSpinner();
        });
      })["catch"](function () {
        _this5.props.hideSpinner();
      });
    }
  }, {
    key: "loadMoreRows",
    value: function loadMoreRows(_ref44) {
      var _this6 = this;
      var startIndex = _ref44.startIndex;
      if (this.state.totalCount) {
        this.setState({
          isFirstPageLoaded: true
        });
        var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?offset=").concat(startIndex, "&max=").concat(this.props.pageSize, "&stepNumber=3");
        apiClient.get(url).then(function (response) {
          _this6.setEditPageItems(response, startIndex);
        });
      }
    }
  }, {
    key: "isRowLoaded",
    value: function isRowLoaded(_ref45) {
      var index = _ref45.index;
      return !!this.state.values.editPageItems[index];
    }

    /**
     * Sends data of revised items with post method.
     * @param {object} values
     * @public
     */
  }, {
    key: "reviseRequisitionItems",
    value: function reviseRequisitionItems(values) {
      var _this7 = this;
      var itemsToRevise = _.filter(values.editPageItems, function (item) {
        if (item.quantityRevised && item.reasonCode) {
          var oldRevision = _.find(_this7.state.revisedItems, function (revision) {
            return revision.requisitionItemId === item.requisitionItemId;
          });
          return _.isEmpty(oldRevision) ? true : _.toInteger(oldRevision.quantityRevised) !== _.toInteger(item.quantityRevised) || oldRevision.reasonCode !== item.reasonCode;
        }
        return false;
      });
      var updatedValues = values;
      _.forEach(itemsToRevise, function (item) {
        var editPageItemIndex = _.findIndex(_this7.state.values.editPageItems, function (editPageItem) {
          return item.requisitionItemId === editPageItem.requisitionItemId;
        });
        updatedValues = update(updatedValues, {
          editPageItems: _defineProperty({}, editPageItemIndex, {
            statusCode: {
              $set: 'CHANGED'
            }
          })
        });
      });
      this.setState({
        values: updatedValues
      });
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/reviseItems");
      var payload = {
        lineItems: _.map(itemsToRevise, function (item) {
          return {
            id: item.requisitionItemId,
            quantityRevised: item.quantityRevised,
            reasonCode: item.reasonCode.value
          };
        })
      };
      if (payload.lineItems.length) {
        return apiClient.post(url, payload);
      }
      return Promise.resolve();
    }
  }, {
    key: "updateRow",
    value: function updateRow(values, index) {
      var item = values.editPageItems[index];
      var val = values;
      val = update(values, {
        editPageItems: _defineProperty({}, index, {
          $set: item
        })
      });
      this.setState({
        values: val
      });
    }

    /**
     * Saves list of requisition items in current step (without step change).
     * @param {object} formValues
     * @public
     */
  }, {
    key: "save",
    value: function save(formValues) {
      var _this8 = this;
      this.props.showSpinner();
      var errors = validateForSave(formValues).editPageItems;
      if (errors.length) {
        showOutboundEditValidationErrors({
          translate: this.props.translate,
          errors: errors
        });
        this.props.hideSpinner();
        return null;
      }
      return this.reviseRequisitionItems(formValues).then(function (resp) {
        // If reponse 200, then save revise items taken from the payload
        var payload = JSON.parse(resp.config.data);
        if (payload.lineItems && payload.lineItems.length) {
          var savedItemIds = payload.lineItems.map(function (item) {
            return item.id;
          });
          // Map to have the required field
          // (requisitionItemId, quantityRevised and reasonCode as obj)
          var savedItems = payload.lineItems.map(function (item) {
            return _objectSpread(_objectSpread({}, item), {}, {
              requisitionItemId: item.id,
              reasonCode: _.find(_this8.props.reasonCodes, function (_ref46) {
                var value = _ref46.value;
                return _.includes(item.reasonCode, value);
              })
            });
          });
          // Get old revise items, that were not changed in this request
          var oldItems = _.filter(_this8.state.values.editPageItems, function (item) {
            return savedItemIds.indexOf(item.requisitionItemId) < 0;
          });
          _this8.setState({
            revisedItems: [].concat(_toConsumableArray(oldItems), _toConsumableArray(savedItems))
          });
        }
        _this8.props.hideSpinner();
        Alert.success(_this8.props.translate('react.stockMovement.alert.saveSuccess.label', 'Changes saved successfully'), {
          timeout: 3000
        });
      })["catch"](function () {
        return _this8.props.hideSpinner();
      });
    }

    /**
     * Refetch the data, all not saved changes will be lost.
     * @public
     */
  }, {
    key: "refresh",
    value: function refresh() {
      var _this9 = this;
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmRefresh.label', 'Confirm refresh'),
        message: this.props.translate('react.stockMovement.confirmRefresh.message', 'Are you sure you want to refresh? Your progress since last save will be lost.'),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: function onClick() {
            _this9.setState({
              revisedItems: [],
              values: _objectSpread(_objectSpread({}, _this9.props.initialValues), {}, {
                editPageItems: []
              }),
              hasItemsLoaded: false,
              totalCount: 0,
              isFirstPageLoaded: false
            });
            _this9.fetchAllData(true);
          }
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }

    /**
     * Transition to next stock movement status (PICKING)
     * after sending createPicklist: 'true' to backend autopick functionality is invoked.
     * @public
     */
  }, {
    key: "transitionToNextStep",
    value: function transitionToNextStep() {
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/status");
      var payload = {
        status: 'PICKING',
        createPicklist: this.state.statusCode === 'REQUESTED' ? 'true' : 'false'
      };
      return apiClient.post(url, payload);
    }

    /**
     * Fetches 3rd step data from current stock movement.
     * @public
     */
  }, {
    key: "fetchEditPageData",
    value: function fetchEditPageData() {
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId);
      return apiClient.get(url).then(function (resp) {
        return resp;
      })["catch"](function (err) {
        return err;
      });
    }

    /**
     * Saves current stock movement progress (line items) and goes to the next stock movement step.
     * @param {object} formValues
     * @public
     */
  }, {
    key: "nextPage",
    value: function nextPage(formValues) {
      var _this10 = this;
      this.props.showSpinner();
      this.reviseRequisitionItems(formValues).then(function () {
        _this10.transitionToNextStep().then(function () {
          return _this10.props.nextPage(formValues);
        })["catch"](function () {
          return _this10.props.hideSpinner();
        });
      })["catch"](function () {
        return _this10.props.hideSpinner();
      });
    }

    /**
     * Saves changes made when item reverted.
     * @param {object} editPageItem
     * @public
     */
  }, {
    key: "updateEditPageItem",
    value: function updateEditPageItem(values, editPageItem) {
      var editPageItemIndex = _.findIndex(this.state.values.editPageItems, function (item) {
        return item.requisitionItemId === editPageItem.requisitionItemId;
      });
      var revisedItemIndex = _.findIndex(this.state.revisedItems, function (item) {
        return item.requisitionItemId === editPageItem.requisitionItemId;
      });
      this.setState({
        values: _objectSpread(_objectSpread({}, values), {}, {
          editPageItems: update(values.editPageItems, _defineProperty({}, editPageItemIndex, {
            $set: _objectSpread(_objectSpread(_objectSpread({}, values.editPageItems[editPageItemIndex]), editPageItem), {}, {
              quantityOnHand: editPageItem.quantityOnHand || 0,
              quantityAvailable: editPageItem.quantityAvailable || 0,
              substitutionItems: _.map(editPageItem.substitutionItems, function (sub) {
                return _objectSpread(_objectSpread({}, sub), {}, {
                  requisitionItemId: editPageItem.requisitionItemId
                });
              })
            })
          }))
        }),
        revisedItems: update(this.state.revisedItems, revisedItemIndex > -1 ? {
          $splice: [[revisedItemIndex, 1]]
        } : {})
      });
    }

    /**
     * Saves changes made by user in this step and redirects to the shipment view page
     * @param {object} formValues
     * @public
     */
  }, {
    key: "saveAndExit",
    value: function saveAndExit(formValues) {
      var errors = validateForSave(formValues).editPageItems;
      if (errors.length) {
        confirmAlert({
          title: this.props.translate('react.stockMovement.confirmExit.label', 'Confirm save'),
          message: this.props.translate('react.stockMovement.confirmExit.message', 'Validation errors occurred. Are you sure you want to exit and lose unsaved data?'),
          buttons: [{
            label: this.props.translate('react.default.yes.label', 'Yes'),
            onClick: function onClick() {
              window.location = "/openboxes/stockMovement/show/".concat(formValues.stockMovementId);
            }
          }, {
            label: this.props.translate('react.default.no.label', 'No')
          }]
        });
        this.props.hideSpinner();
      } else {
        this.reviseRequisitionItems(formValues).then(function () {
          window.location = "/openboxes/stockMovement/show/".concat(formValues.stockMovementId);
        });
      }
    }

    /**
     * Reverts to previous state of requisition item (reverts substitutions and quantity revisions)
     * @param {string} itemId
     * @public
     */
  }, {
    key: "revertItem",
    value: function revertItem(values, itemId) {
      var _this11 = this;
      this.props.showSpinner();
      var revertItemsUrl = "/openboxes/api/stockMovementItems/".concat(itemId, "/revertItem");
      var itemsUrl = "/openboxes/api/stockMovementItems/".concat(itemId, "?stepNumber=3");
      return apiClient.post(revertItemsUrl).then(function () {
        return apiClient.get(itemsUrl).then(function (response) {
          var editPageItem = response.data.data;
          _this11.updateEditPageItem(values, editPageItem);
          _this11.props.hideSpinner();
        })["catch"](function () {
          _this11.props.hideSpinner();
          return Promise.reject(new Error(_this11.props.translate('react.stockMovement.error.revertRequisitionItem.label', 'Could not revert requisition items')));
        });
      })["catch"](function () {
        _this11.props.hideSpinner();
        return Promise.reject(new Error(_this11.props.translate('react.stockMovement.error.revertRequisitionItem.label', 'Could not revert requisition items')));
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this12 = this;
      var _this$state = this.state,
        showOnlyErroredItems = _this$state.showOnlyErroredItems,
        itemFilter = _this$state.itemFilter;
      var showOnly = this.props.showOnly;
      var erroredItemsCount = this.state.values && this.state.values.editPageItems.length > 0 ? _.filter(this.state.values.editPageItems, function (item) {
        return item.hasError;
      }).length : '0';
      return /*#__PURE__*/React.createElement(Form, {
        onSubmit: function onSubmit() {},
        validate: this.validate,
        mutators: _objectSpread({}, arrayMutators),
        initialValues: this.state.values,
        render: function render(_ref47) {
          var handleSubmit = _ref47.handleSubmit,
            values = _ref47.values,
            invalid = _ref47.invalid;
          return /*#__PURE__*/React.createElement("div", {
            className: "d-flex flex-column"
          }, !showOnly ? /*#__PURE__*/React.createElement("span", {
            className: "buttons-container"
          }, /*#__PURE__*/React.createElement("div", {
            className: "d-flex mr-auto justify-content-center align-items-center"
          }, /*#__PURE__*/React.createElement("input", {
            value: itemFilter,
            onChange: function onChange(event) {
              return _this12.setState({
                itemFilter: event.target.value
              });
            },
            className: "float-left btn btn-outline-secondary btn-xs filter-input mr-1 mb-1",
            placeholder: _this12.props.translate('react.stockMovement.searchPlaceholder.label', 'Search...')
          }), itemFilter && /*#__PURE__*/React.createElement("i", {
            role: "button",
            className: "fa fa-times-circle",
            style: {
              color: 'grey',
              cursor: 'pointer'
            },
            onClick: function onClick() {
              return _this12.setState({
                itemFilter: ''
              });
            },
            onKeyPress: function onKeyPress() {
              return _this12.setState({
                itemFilter: ''
              });
            },
            tabIndex: 0
          })), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this12.setState({
                showOnlyErroredItems: !showOnlyErroredItems
              });
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-3 btn-xs ".concat(showOnlyErroredItems ? 'active' : '')
          }, /*#__PURE__*/React.createElement("span", null, erroredItemsCount, " ", /*#__PURE__*/React.createElement(Translate, {
            id: "react.stockMovement.erroredItemsCount.label",
            defaultMessage: "item(s) require your attention"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this12.refresh();
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-3 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-refresh pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.refresh.label",
            defaultMessage: "Reload"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this12.save(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-3 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-save pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.saveProgress.label",
            defaultMessage: "Save Progress"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this12.saveAndExit(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-sign-out pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.saveAndExit.label",
            defaultMessage: "Save and exit"
          })))) : /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              window.location = !_this12.props.supportedActivities.includes('MANAGE_INVENTORY') && _this12.props.supportedActivities.includes('SUBMIT_REQUEST') ? '/openboxes/dashboard' : '/openboxes/stockMovement/list?direction=INBOUND';
            },
            className: "float-right mb-1 btn btn-outline-danger align-self-end btn-xs mr-2"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-sign-out pr-2"
          }), " ", /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.exit.label",
            defaultMessage: "Exit"
          }), " ")), /*#__PURE__*/React.createElement("form", {
            onSubmit: handleSubmit
          }, /*#__PURE__*/React.createElement("div", {
            className: "table-form"
          }, _.map(_this12.getFields(), function (fieldConfig, fieldName) {
            return renderFormField(fieldConfig, fieldName, {
              stockMovementId: values.stockMovementId,
              hasStockList: !!_.get(values.stocklist, 'id'),
              translate: _this12.props.translate,
              reasonCodes: _this12.props.reasonCodes,
              onResponse: _this12.fetchEditPageItems,
              revertItem: _this12.revertItem,
              reviseRequisitionItems: _this12.reviseRequisitionItems,
              totalCount: _this12.state.totalCount,
              loadMoreRows: _this12.loadMoreRows,
              isRowLoaded: _this12.isRowLoaded,
              isPaginated: _this12.props.isPaginated,
              updateRow: _this12.updateRow,
              isFirstPageLoaded: _this12.state.isFirstPageLoaded,
              values: values,
              showOnly: showOnly,
              showOnlyErroredItems: showOnlyErroredItems,
              itemFilter: itemFilter
            });
          })), /*#__PURE__*/React.createElement("div", {
            className: "submit-buttons"
          }, /*#__PURE__*/React.createElement("button", {
            type: "submit",
            disabled: !_this12.state.hasItemsLoaded || showOnly || invalid,
            onClick: function onClick() {
              if (!invalid) {
                _this12.nextPage(values);
              }
            },
            className: "btn btn-outline-primary btn-form float-right btn-xs"
          }, /*#__PURE__*/React.createElement(Translate, {
            id: "react.stockMovement.button.generatePicklist.label",
            defaultMessage: "Generate Picklist"
          })))));
        }
      });
    }
  }]);
  return EditItemsPage;
}(Component);
var mapStateToProps = function mapStateToProps(state) {
  return {
    reasonCodes: state.reasonCodes.data,
    translate: translateWithDefaultMessage(getTranslate(state.localize)),
    stockMovementTranslationsFetched: state.session.fetchedTranslations.stockMovement,
    isPaginated: state.session.isPaginated,
    pageSize: state.session.pageSize,
    supportedActivities: state.session.supportedActivities,
    currentLocale: state.session.activeLanguage
  };
};
export default connect(mapStateToProps, {
  fetchReasonCodes: fetchReasonCodes,
  showSpinner: showSpinner,
  hideSpinner: hideSpinner
})(EditItemsPage);
EditItemsPage.propTypes = {
  /** Initial component's data */
  initialValues: PropTypes.shape({}).isRequired,
  /**
   * Function called with the form data when the handleSubmit()
   * is fired from within the form component.
   */
  nextPage: PropTypes.func.isRequired,
  /** Function called when data is loading */
  showSpinner: PropTypes.func.isRequired,
  /** Function called when data has loaded */
  hideSpinner: PropTypes.func.isRequired,
  /** Function fetching reason codes */
  fetchReasonCodes: PropTypes.func.isRequired,
  /** Array of available reason codes */
  reasonCodes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,
  translate: PropTypes.func.isRequired,
  stockMovementTranslationsFetched: PropTypes.bool.isRequired,
  /** Return true if pagination is enabled */
  isPaginated: PropTypes.bool.isRequired,
  /** Return true if show only */
  showOnly: PropTypes.bool.isRequired,
  pageSize: PropTypes.number.isRequired,
  supportedActivities: PropTypes.arrayOf(PropTypes.string).isRequired,
  currentLocale: PropTypes.string.isRequired
};"},null]}