{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/request/AddItemsPage.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/request/AddItemsPage.jsx","mtime":1698037750000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { Component } from 'react';
import arrayMutators from 'final-form-arrays';
import update from 'immutability-helper';
import fileDownload from 'js-file-download';
import _ from 'lodash';
import moment from 'moment';
import PropTypes from 'prop-types';
import { confirmAlert } from 'react-confirm-alert';
import { Form } from 'react-final-form';
import { getTranslate } from 'react-localize-redux';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import Alert from 'react-s-alert';
import { fetchUsers, hideSpinner, showSpinner } from 'actions';
import ArrayField from 'components/form-elements/ArrayField';
import ButtonField from 'components/form-elements/ButtonField';
import LabelField from 'components/form-elements/LabelField';
import ProductSelectField from 'components/form-elements/ProductSelectField';
import TextField from 'components/form-elements/TextField';
import apiClient from 'utils/apiClient';
import { renderFormField } from 'utils/form-utils';
import isRequestFromWard from 'utils/supportedActivitiesUtils';
import Translate, { translateWithDefaultMessage } from 'utils/Translate';
import 'react-confirm-alert/src/react-confirm-alert.css';
function addButton(_ref) {
  var addRow = _ref.addRow,
    getSortOrder = _ref.getSortOrder,
    newItemAdded = _ref.newItemAdded,
    updateTotalCount = _ref.updateTotalCount;
  return /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: "btn btn-outline-success btn-xs",
    onClick: function onClick() {
      updateTotalCount(1);
      addRow({
        sortOrder: getSortOrder()
      });
      newItemAdded();
    }
  }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
    className: "fa fa-plus pr-2"
  }), /*#__PURE__*/React.createElement(Translate, {
    id: "react.default.button.addLine.label",
    defaultMessage: "Add line"
  })));
}

// Used for util function to calculate quantityRequested for requests from wards
// where quantityRequested is calculated by subtracting one of below from QOH
var RequestFromWardTypes = {
  MANUAL: {
    calculateQtyRequestedFrom: 'monthlyDemand'
  },
  STOCKLIST_PUSH_TYPE: {
    calculateQtyRequestedFrom: 'quantityAllowed'
  },
  STOCKLIST_PULL_TYPE: {
    calculateQtyRequestedFrom: 'demandPerReplenishmentPeriod'
  }
};
var FIELDS = {
  product: {
    type: ProductSelectField,
    label: 'react.stockMovement.requestedProduct.label',
    defaultMessage: 'Requested product',
    headerAlign: 'left',
    flexWidth: '9',
    attributes: {
      showSelectedOptionColor: true
    }
  },
  quantityOnHand: {
    type: LabelField,
    label: 'react.stockMovement.quantityOnHand.label',
    defaultMessage: 'QoH',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  },
  quantityOnHandAtRequestSite: {
    type: TextField,
    flexWidth: '1.7',
    label: 'react.stockMovement.quantityOnHandAtRequestSite.label',
    defaultMessage: 'QOH at Request Site',
    attributes: {
      type: 'number'
    }
  },
  quantityAvailable: {
    type: LabelField,
    label: 'react.stockMovement.available.label',
    defaultMessage: 'Available',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  },
  quantityAllowed: {
    type: LabelField,
    label: 'react.stockMovement.maxQuantity.label',
    defaultMessage: 'Max Qty',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  },
  monthlyDemand: {
    type: LabelField,
    label: 'react.stockMovement.demandPerMonth.label',
    defaultMessage: 'Demand per Month',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  },
  quantityRequested: {
    type: TextField,
    label: 'react.stockMovement.neededQuantity.label',
    defaultMessage: 'Needed Qty',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  },
  comments: {
    type: TextField,
    label: 'react.stockMovement.comments.label',
    defaultMessage: 'Comments',
    flexWidth: '1.7',
    getDynamicAttr: function getDynamicAttr(_ref2) {
      var addRow = _ref2.addRow,
        rowCount = _ref2.rowCount,
        rowIndex = _ref2.rowIndex,
        getSortOrder = _ref2.getSortOrder,
        updateTotalCount = _ref2.updateTotalCount,
        updateRow = _ref2.updateRow,
        values = _ref2.values;
      return {
        onTabPress: rowCount === rowIndex + 1 ? function () {
          updateTotalCount(1);
          addRow({
            sortOrder: getSortOrder()
          });
        } : null,
        arrowRight: rowCount === rowIndex + 1 ? function () {
          updateTotalCount(1);
          addRow({
            sortOrder: getSortOrder()
          });
        } : null,
        arrowDown: rowCount === rowIndex + 1 ? function () {
          return function () {
            updateTotalCount(1);
            addRow({
              sortOrder: getSortOrder()
            });
          };
        } : null,
        onBlur: function onBlur() {
          return updateRow(values, rowIndex);
        }
      };
    }
  },
  demandPerReplenishmentPeriod: {
    type: LabelField,
    label: 'react.stockMovement.demandPerReplenishmentPeriod.label',
    defaultMessage: 'Demand per Replenishment Period',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  },
  demandPerRequestPeriod: {
    type: LabelField,
    label: 'react.stockMovement.demandPerRequestPeriod.label',
    defaultMessage: 'Demand per Request Period',
    flexWidth: '1.7',
    attributes: {
      type: 'number'
    }
  }
};
var DELETE_BUTTON_FIELD = {
  type: ButtonField,
  label: 'react.default.button.delete.label',
  defaultMessage: 'Delete',
  flexWidth: '1',
  fieldKey: '',
  buttonLabel: 'react.default.button.delete.label',
  buttonDefaultMessage: 'Delete',
  getDynamicAttr: function getDynamicAttr(_ref3) {
    var fieldValue = _ref3.fieldValue,
      removeItem = _ref3.removeItem,
      removeRow = _ref3.removeRow,
      updateTotalCount = _ref3.updateTotalCount;
    return {
      onClick: fieldValue && fieldValue.id ? function () {
        removeItem(fieldValue.id).then(function () {
          updateTotalCount(-1);
          removeRow();
        });
      } : function () {
        updateTotalCount(-1);
        removeRow();
      }
    };
  },
  attributes: {
    className: 'btn btn-outline-danger'
  }
};
var LINE_ITEMS_ATTR = {
  type: ArrayField,
  arrowsNavigation: true,
  virtualized: true,
  totalCount: function totalCount(_ref4) {
    var _totalCount = _ref4.totalCount;
    return _totalCount;
  },
  isRowLoaded: function isRowLoaded(_ref5) {
    var _isRowLoaded = _ref5.isRowLoaded;
    return _isRowLoaded;
  },
  loadMoreRows: function loadMoreRows(_ref6) {
    var _loadMoreRows = _ref6.loadMoreRows;
    return _loadMoreRows();
  },
  isFirstPageLoaded: function isFirstPageLoaded(_ref7) {
    var _isFirstPageLoaded = _ref7.isFirstPageLoaded;
    return _isFirstPageLoaded;
  },
  addButton: addButton
};
var NO_STOCKLIST_FIELDS = {
  lineItems: _objectSpread(_objectSpread({}, LINE_ITEMS_ATTR), {}, {
    fields: {
      product: _objectSpread(_objectSpread({}, FIELDS.product), {}, {
        fieldKey: '',
        flexWidth: '9.5',
        getDynamicAttr: function getDynamicAttr(_ref8) {
          var rowIndex = _ref8.rowIndex,
            rowCount = _ref8.rowCount,
            updateProductData = _ref8.updateProductData,
            values = _ref8.values,
            originId = _ref8.originId,
            focusField = _ref8.focusField;
          return {
            onChange: function onChange(value) {
              return updateProductData(value, values, rowIndex);
            },
            autoFocus: rowIndex === rowCount - 1,
            locationId: originId,
            onExactProductSelected: function onExactProductSelected(_ref9) {
              var product = _ref9.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityRequested');
              }
            }
          };
        }
      }),
      quantityOnHand: FIELDS.quantityOnHand,
      quantityAvailable: FIELDS.quantityAvailable,
      monthlyDemand: FIELDS.monthlyDemand,
      quantityRequested: _objectSpread(_objectSpread({}, FIELDS.quantityRequested), {}, {
        flexWidth: '2.5',
        fieldKey: '',
        getDynamicAttr: function getDynamicAttr(_ref10) {
          var updateRow = _ref10.updateRow,
            values = _ref10.values,
            rowIndex = _ref10.rowIndex;
          return {
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      }),
      comments: FIELDS.comments,
      deleteButton: DELETE_BUTTON_FIELD
    }
  })
};
var STOCKLIST_FIELDS_PUSH_TYPE = {
  lineItems: _objectSpread(_objectSpread({}, LINE_ITEMS_ATTR), {}, {
    fields: {
      product: _objectSpread(_objectSpread({}, FIELDS.product), {}, {
        fieldKey: 'disabled',
        getDynamicAttr: function getDynamicAttr(_ref11) {
          var fieldValue = _ref11.fieldValue,
            rowIndex = _ref11.rowIndex,
            rowCount = _ref11.rowCount,
            newItem = _ref11.newItem,
            originId = _ref11.originId,
            focusField = _ref11.focusField;
          return {
            locationId: originId,
            disabled: !!fieldValue,
            autoFocus: newItem && rowIndex === rowCount - 1,
            onExactProductSelected: function onExactProductSelected(_ref12) {
              var product = _ref12.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityRequested');
              }
            }
          };
        }
      }),
      quantityAllowed: FIELDS.quantityAllowed,
      quantityOnHand: FIELDS.quantityOnHand,
      quantityAvailable: FIELDS.quantityAvailable,
      quantityRequested: _objectSpread(_objectSpread({}, FIELDS.quantityRequested), {}, {
        getDynamicAttr: function getDynamicAttr(_ref13) {
          var rowIndex = _ref13.rowIndex,
            values = _ref13.values,
            updateRow = _ref13.updateRow;
          return {
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      }),
      comments: FIELDS.comments,
      deleteButton: DELETE_BUTTON_FIELD
    }
  })
};
var STOCKLIST_FIELDS_PULL_TYPE = {
  lineItems: _objectSpread(_objectSpread({}, LINE_ITEMS_ATTR), {}, {
    fields: {
      product: _objectSpread(_objectSpread({}, FIELDS.product), {}, {
        fieldKey: 'disabled',
        getDynamicAttr: function getDynamicAttr(_ref14) {
          var fieldValue = _ref14.fieldValue,
            rowIndex = _ref14.rowIndex,
            rowCount = _ref14.rowCount,
            newItem = _ref14.newItem,
            originId = _ref14.originId,
            focusField = _ref14.focusField;
          return {
            locationId: originId,
            disabled: !!fieldValue,
            autoFocus: newItem && rowIndex === rowCount - 1,
            onExactProductSelected: function onExactProductSelected(_ref15) {
              var product = _ref15.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityRequested');
              }
            }
          };
        }
      }),
      demandPerReplenishmentPeriod: FIELDS.demandPerReplenishmentPeriod,
      quantityOnHand: FIELDS.quantityOnHand,
      quantityAvailable: FIELDS.quantityAvailable,
      quantityRequested: FIELDS.quantityRequested,
      comments: FIELDS.comments,
      deleteButton: DELETE_BUTTON_FIELD
    }
  })
};
var REQUEST_FROM_WARD_STOCKLIST_FIELDS_PUSH_TYPE = {
  lineItems: _objectSpread(_objectSpread({}, LINE_ITEMS_ATTR), {}, {
    fields: {
      product: _objectSpread(_objectSpread({}, FIELDS.product), {}, {
        fieldKey: 'disabled',
        getDynamicAttr: function getDynamicAttr(_ref16) {
          var fieldValue = _ref16.fieldValue,
            rowIndex = _ref16.rowIndex,
            rowCount = _ref16.rowCount,
            newItem = _ref16.newItem,
            originId = _ref16.originId,
            focusField = _ref16.focusField;
          return {
            locationId: originId,
            disabled: !!fieldValue,
            autoFocus: newItem && rowIndex === rowCount - 1,
            onExactProductSelected: function onExactProductSelected(_ref17) {
              var product = _ref17.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityOnHand');
              }
            }
          };
        }
      }),
      quantityAllowed: _objectSpread(_objectSpread({}, FIELDS.quantityAllowed), {}, {
        headerTooltip: 'react.stockMovement.tooltip.maxQuantity.label',
        headerAlign: 'right',
        attributes: _objectSpread(_objectSpread({}, FIELDS.quantityAllowed.attributes), {}, {
          cellClassName: 'text-right'
        })
      }),
      quantityOnHand: _objectSpread(_objectSpread({}, FIELDS.quantityOnHand), {}, {
        type: TextField,
        headerTooltip: 'react.stockMovement.tooltip.quantityOnHand.label',
        headerAlign: 'right',
        attributes: _objectSpread(_objectSpread({}, FIELDS.quantityOnHand.attributes), {}, {
          cellClassName: 'text-right'
        }),
        getDynamicAttr: function getDynamicAttr(_ref18) {
          var fieldValue = _ref18.fieldValue,
            rowIndex = _ref18.rowIndex,
            values = _ref18.values,
            updateRow = _ref18.updateRow,
            calculateQtyRequested = _ref18.calculateQtyRequested;
          return {
            onBlur: function onBlur() {
              var valuesWithUpdatedQtyRequested = calculateQtyRequested(values, rowIndex, fieldValue, RequestFromWardTypes.STOCKLIST_PUSH_TYPE);
              updateRow(valuesWithUpdatedQtyRequested, rowIndex);
            }
          };
        }
      }),
      quantityRequested: _objectSpread(_objectSpread({}, FIELDS.quantityRequested), {}, {
        headerAlign: 'right',
        required: true,
        headerTooltip: 'react.stockMovement.tooltip.quantityRequested.label',
        attributes: _objectSpread(_objectSpread({}, FIELDS.quantityRequested.attributes), {}, {
          cellClassName: 'text-right'
        }),
        getDynamicAttr: function getDynamicAttr(_ref19) {
          var rowIndex = _ref19.rowIndex,
            values = _ref19.values,
            updateRow = _ref19.updateRow;
          return {
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      }),
      comments: _objectSpread(_objectSpread({}, FIELDS.comments), {}, {
        headerTooltip: 'react.stockMovement.tooltip.comments.label',
        headerAlign: 'left',
        attributes: _objectSpread(_objectSpread({}, FIELDS.comments.attributes), {}, {
          cellClassName: 'text-left'
        })
      }),
      deleteButton: DELETE_BUTTON_FIELD
    }
  })
};
var REQUEST_FROM_WARD_STOCKLIST_FIELDS_PULL_TYPE = {
  lineItems: _objectSpread(_objectSpread({}, LINE_ITEMS_ATTR), {}, {
    fields: {
      product: _objectSpread(_objectSpread({}, FIELDS.product), {}, {
        fieldKey: 'disabled',
        flexWidth: '2',
        getDynamicAttr: function getDynamicAttr(_ref20) {
          var fieldValue = _ref20.fieldValue,
            rowIndex = _ref20.rowIndex,
            rowCount = _ref20.rowCount,
            newItem = _ref20.newItem,
            originId = _ref20.originId,
            focusField = _ref20.focusField;
          return {
            locationId: originId,
            disabled: !!fieldValue,
            autoFocus: newItem && rowIndex === rowCount - 1,
            onExactProductSelected: function onExactProductSelected(_ref21) {
              var product = _ref21.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityOnHand');
              }
            }
          };
        }
      }),
      demandPerReplenishmentPeriod: {
        type: LabelField,
        label: 'react.stockMovement.demandPerRequestPeriod.label',
        defaultMessage: 'Demand per Request Period',
        flexWidth: '1',
        headerAlign: 'right',
        headerTooltip: 'react.stockMovement.demandPerRequestPeriod.headerTooltip.label',
        headerDefaultTooltip: 'The average of your previous requests for this product.',
        attributes: {
          type: 'number',
          className: 'text-right'
        }
      },
      quantityOnHand: _objectSpread(_objectSpread({}, FIELDS.quantityOnHandAtRequestSite), {}, {
        label: 'react.stockMovement.quantityOnHand.label',
        defaultMessage: 'QOH',
        flexWidth: '0.6',
        headerAlign: 'right',
        headerTooltip: 'react.stockMovement.quantityOnHand.headerTooltip.label',
        headerDefaultTooltip: 'Enter your current quantity on hand for this product',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref22) {
          var fieldValue = _ref22.fieldValue,
            rowIndex = _ref22.rowIndex,
            values = _ref22.values,
            updateRow = _ref22.updateRow,
            calculateQtyRequested = _ref22.calculateQtyRequested;
          return {
            onBlur: function onBlur() {
              var valuesWithUpdatedQtyRequested = calculateQtyRequested(values, rowIndex, fieldValue, RequestFromWardTypes.STOCKLIST_PULL_TYPE);
              updateRow(valuesWithUpdatedQtyRequested, rowIndex);
            }
          };
        }
      }),
      quantityRequested: {
        type: TextField,
        label: 'react.stockMovement.neededQuantity.label',
        defaultMessage: 'Needed Qty',
        flexWidth: '0.6',
        required: true,
        headerAlign: 'right',
        headerTooltip: 'react.stockMovement.quantityRequested.headerTooltip.label',
        headerDefaultTooltip: 'Your demand for the request period minus your QOH. Edit as needed.',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref23) {
          var rowIndex = _ref23.rowIndex,
            values = _ref23.values,
            updateRow = _ref23.updateRow;
          return {
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      comments: {
        type: TextField,
        label: 'react.stockMovement.comments.label',
        defaultMessage: 'Comments',
        flexWidth: '1.6',
        headerAlign: 'left',
        headerTooltip: 'react.stockMovement.comments.headerTooltip.label',
        headerDefaultTooltip: 'Leave a comment for the person who will review this request.',
        getDynamicAttr: function getDynamicAttr(_ref24) {
          var addRow = _ref24.addRow,
            rowCount = _ref24.rowCount,
            rowIndex = _ref24.rowIndex,
            getSortOrder = _ref24.getSortOrder,
            updateTotalCount = _ref24.updateTotalCount,
            updateRow = _ref24.updateRow,
            values = _ref24.values;
          return {
            onTabPress: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder()
              });
            } : null,
            arrowRight: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder()
              });
            } : null,
            arrowDown: rowCount === rowIndex + 1 ? function () {
              return function () {
                updateTotalCount(1);
                addRow({
                  sortOrder: getSortOrder()
                });
              };
            } : null,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      deleteButton: DELETE_BUTTON_FIELD
    }
  })
};
var REQUEST_FROM_WARD_FIELDS = {
  lineItems: _objectSpread(_objectSpread({}, LINE_ITEMS_ATTR), {}, {
    fields: {
      product: _objectSpread(_objectSpread({}, FIELDS.product), {}, {
        fieldKey: 'disabled',
        flexWidth: '2.4',
        getDynamicAttr: function getDynamicAttr(_ref25) {
          var rowIndex = _ref25.rowIndex,
            rowCount = _ref25.rowCount,
            updateProductData = _ref25.updateProductData,
            values = _ref25.values,
            newItem = _ref25.newItem,
            originId = _ref25.originId,
            focusField = _ref25.focusField;
          return {
            locationId: originId,
            onChange: function onChange(value) {
              return updateProductData(value, values, rowIndex);
            },
            autoFocus: newItem && rowIndex === rowCount - 1,
            onExactProductSelected: function onExactProductSelected(_ref26) {
              var product = _ref26.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityOnHand');
              }
            }
          };
        }
      }),
      monthlyDemand: {
        type: LabelField,
        label: 'react.stockMovement.demandPerMonth.label',
        defaultMessage: 'Demand per Month',
        headerAlign: 'right',
        flexWidth: '0.8',
        headerTooltip: 'react.stockMovement.demandPerRequestPeriod.headerTooltip.label',
        headerDefaultTooltip: 'The average of your previous requests for this product.',
        attributes: {
          type: 'number',
          className: 'text-right'
        }
      },
      quantityOnHand: {
        type: TextField,
        label: 'react.stockMovement.quantityOnHand.label',
        defaultMessage: 'QOH',
        flexWidth: '0.6',
        headerAlign: 'right',
        headerTooltip: 'react.stockMovement.quantityOnHand.headerTooltip.label',
        headerDefaultTooltip: 'Enter your current quantity on hand for this product',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref27) {
          var fieldValue = _ref27.fieldValue,
            rowIndex = _ref27.rowIndex,
            values = _ref27.values,
            updateRow = _ref27.updateRow,
            calculateQtyRequested = _ref27.calculateQtyRequested;
          return {
            onBlur: function onBlur() {
              var valuesWithUpdatedQtyRequested = calculateQtyRequested(values, rowIndex, fieldValue, RequestFromWardTypes.MANUAL);
              updateRow(valuesWithUpdatedQtyRequested, rowIndex);
            }
          };
        }
      },
      quantityRequested: {
        type: TextField,
        label: 'react.stockMovement.neededQuantity.label',
        defaultMessage: 'Needed Qty',
        flexWidth: '0.6',
        required: true,
        headerAlign: 'right',
        headerTooltip: 'react.stockMovement.quantityRequested.headerTooltip.label',
        headerDefaultTooltip: 'Your demand for the request period minus your QOH. Edit as needed.',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref28) {
          var rowIndex = _ref28.rowIndex,
            values = _ref28.values,
            updateRow = _ref28.updateRow;
          return {
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      comments: {
        type: TextField,
        label: 'react.stockMovement.comments.label',
        defaultMessage: 'Comments',
        flexWidth: '2.4',
        headerAlign: 'left',
        headerTooltip: 'react.stockMovement.comments.headerTooltip.label',
        headerDefaultTooltip: 'Leave a comment for the person who will review this request.',
        getDynamicAttr: function getDynamicAttr(_ref29) {
          var addRow = _ref29.addRow,
            rowCount = _ref29.rowCount,
            rowIndex = _ref29.rowIndex,
            getSortOrder = _ref29.getSortOrder,
            updateTotalCount = _ref29.updateTotalCount,
            updateRow = _ref29.updateRow,
            values = _ref29.values;
          return {
            onTabPress: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder()
              });
            } : null,
            arrowRight: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder()
              });
            } : null,
            arrowDown: rowCount === rowIndex + 1 ? function () {
              return function () {
                updateTotalCount(1);
                addRow({
                  sortOrder: getSortOrder()
                });
              };
            } : null,
            onBlur: function onBlur() {
              return updateRow(values, rowIndex);
            }
          };
        }
      },
      deleteButton: DELETE_BUTTON_FIELD
    }
  })
};
var REPLENISHMENT_TYPE_PULL = 'PULL';
function calculateQuantityRequested(values, rowIndex, fieldValue, requestType) {
  var valuesWithUpdatedQtyRequested = values;
  var lineItem = valuesWithUpdatedQtyRequested.lineItems[rowIndex];
  // Options: quantityAllowed, demandPerReplenishmentPeriod, monthlyDemand
  // depending on request from ward type: stocklist push, stocklist pull, manual respectively
  var baseValue = lineItem[requestType.calculateQtyRequestedFrom];
  if (baseValue && fieldValue) {
    valuesWithUpdatedQtyRequested.lineItems[rowIndex].quantityRequested = baseValue - fieldValue >= 0 ? baseValue - fieldValue : 0;
  }
  return valuesWithUpdatedQtyRequested;
}

/**
 * The second step of stock movement where user can add items to stock list.
 * This component supports three different cases: with or without stocklist
 * when movement is from a depot and when movement is from a vendor.
 */
var AddItemsPage = /*#__PURE__*/function (_Component) {
  _inherits(AddItemsPage, _Component);
  var _super = _createSuper(AddItemsPage);
  function AddItemsPage(props) {
    var _this;
    _classCallCheck(this, AddItemsPage);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "dataFetched", false);
    _this.state = {
      currentLineItems: [],
      sortOrder: 0,
      values: _objectSpread(_objectSpread({}, _this.props.initialValues), {}, {
        lineItems: []
      }),
      newItem: false,
      totalCount: 0,
      isFirstPageLoaded: false,
      isRequestFromWard: false
    };
    _this.props.showSpinner();
    _this.removeItem = _this.removeItem.bind(_assertThisInitialized(_this));
    _this.importTemplate = _this.importTemplate.bind(_assertThisInitialized(_this));
    _this.getSortOrder = _this.getSortOrder.bind(_assertThisInitialized(_this));
    _this.confirmSave = _this.confirmSave.bind(_assertThisInitialized(_this));
    _this.confirmTransition = _this.confirmTransition.bind(_assertThisInitialized(_this));
    _this.newItemAdded = _this.newItemAdded.bind(_assertThisInitialized(_this));
    _this.validate = _this.validate.bind(_assertThisInitialized(_this));
    _this.isRowLoaded = _this.isRowLoaded.bind(_assertThisInitialized(_this));
    _this.loadMoreRows = _this.loadMoreRows.bind(_assertThisInitialized(_this));
    _this.updateTotalCount = _this.updateTotalCount.bind(_assertThisInitialized(_this));
    _this.updateRow = _this.updateRow.bind(_assertThisInitialized(_this));
    _this.updateProductData = _this.updateProductData.bind(_assertThisInitialized(_this));
    _this.submitRequest = _this.submitRequest.bind(_assertThisInitialized(_this));
    _this.calculateQuantityRequested = calculateQuantityRequested.bind(_assertThisInitialized(_this));
    _this.cancelRequest = _this.cancelRequest.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(AddItemsPage, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.stockMovementTranslationsFetched) {
        this.dataFetched = true;
        this.fetchAllData();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.stockMovementTranslationsFetched && !this.dataFetched) {
        this.dataFetched = true;
        this.fetchAllData();
      }
    }

    /**
     * Returns proper fields depending on origin type or if stock list is chosen.
     * @public
     */
  }, {
    key: "getFields",
    value: function getFields() {
      if (this.state.isRequestFromWard) {
        if (_.get(this.state.values.stocklist, 'id')) {
          if (_.get(this.state.values.replenishmentType, 'name') === REPLENISHMENT_TYPE_PULL) {
            return REQUEST_FROM_WARD_STOCKLIST_FIELDS_PULL_TYPE;
          }
          return REQUEST_FROM_WARD_STOCKLIST_FIELDS_PUSH_TYPE;
        }
        return REQUEST_FROM_WARD_FIELDS;
      }
      if (_.get(this.state.values.stocklist, 'id')) {
        if (_.get(this.state.values.replenishmentType, 'name') === REPLENISHMENT_TYPE_PULL) {
          return STOCKLIST_FIELDS_PULL_TYPE;
        }
        return STOCKLIST_FIELDS_PUSH_TYPE;
      }
      return NO_STOCKLIST_FIELDS;
    }

    /**
     * Returns an array of new stock movement's items and items to be
     * updated (comparing to previous state of line items).
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "getLineItemsToBeSaved",
    value: function getLineItemsToBeSaved(lineItems) {
      var _this2 = this;
      // First find items that are new and should be added (don't have status code)
      var lineItemsToBeAdded = _.filter(lineItems, function (item) {
        return !item.statusCode && item.quantityRequested && item.quantityRequested !== '0' && item.product;
      });
      // Then get a list of items that already exist in this request (have status code)
      var lineItemsWithStatus = _.filter(lineItems, function (item) {
        return item.statusCode;
      });
      var lineItemsToBeUpdated = [];
      // For each already existing items - find the ones that have changed
      _.forEach(lineItemsWithStatus, function (item) {
        var oldItem = _.find(_this2.state.currentLineItems, function (old) {
          return old.id === item.id;
        });
        var oldQty = parseInt(oldItem.quantityRequested, 10);
        var newQty = parseInt(item.quantityRequested, 10);
        // Intersection of keys common to both objects (excluding product key)
        var keyIntersection = _.remove(_.intersection(_.keys(oldItem), _.keys(item)), function (key) {
          return key !== 'product';
        });
        if ((_this2.state.values.origin.type === 'SUPPLIER' || !_this2.state.values.hasManageInventory) && (!_.isEqual(_.pick(item, keyIntersection), _.pick(oldItem, keyIntersection)) || item.product.id !== oldItem.product.id)) {
          lineItemsToBeUpdated.push(item);
        } else if (newQty !== oldQty || !item.quantityRequested || oldItem.comments !== item.comments && !_.isNil(item.comments)) {
          lineItemsToBeUpdated.push(item);
        }
      });

      // Combine items to be added and items to be updated into one list to be saved
      return [].concat(_.map(lineItemsToBeAdded, function (item) {
        return {
          'product.id': item.product.id,
          quantityRequested: item.quantityRequested,
          sortOrder: item.sortOrder,
          comments: !_.isNil(item.comments) ? item.comments : ''
        };
      }), _.map(lineItemsToBeUpdated, function (item) {
        return {
          id: item.id,
          'product.id': item.product.id,
          quantityRequested: item.quantityRequested,
          sortOrder: item.sortOrder,
          comments: !_.isNil(item.comments) ? item.comments : ''
        };
      }));
    }
  }, {
    key: "getSortOrder",
    value: function getSortOrder() {
      this.setState({
        sortOrder: this.state.sortOrder + 100
      });
      return this.state.sortOrder;
    }
  }, {
    key: "setLineItems",
    value: function setLineItems(response, startIndex) {
      var _this3 = this;
      var data = response.data.data;
      var lineItemsData;
      var isPullType = _.get(this.state.values.replenishmentType, 'name') === REPLENISHMENT_TYPE_PULL;
      if (this.state.values.lineItems.length === 0 && !data.length) {
        lineItemsData = new Array(1).fill({
          sortOrder: 100
        });
      } else if (this.state.isRequestFromWard && _.get(this.state.values.stocklist, 'id')) {
        lineItemsData = _.map(data, function (val) {
          var quantityRequested = val.quantityRequested,
            demandPerReplenishmentPeriod = val.demandPerReplenishmentPeriod,
            quantityOnHand = val.quantityOnHand,
            quantityAllowed = val.quantityAllowed;
          var qtyRequested = 0;
          if (quantityRequested) qtyRequested = quantityRequested;else if (isPullType) qtyRequested = demandPerReplenishmentPeriod - quantityOnHand;else qtyRequested = quantityAllowed;
          return _objectSpread(_objectSpread({}, val), {}, {
            quantityOnHand: '',
            disabled: true,
            quantityRequested: qtyRequested >= 0 ? qtyRequested : 0
          });
        });
      } else if (isPullType) {
        lineItemsData = _.map(data, function (val) {
          var quantityRequested = val.quantityRequested,
            demandPerReplenishmentPeriod = val.demandPerReplenishmentPeriod,
            quantityAvailable = val.quantityAvailable;
          var qtyRequested = quantityRequested || demandPerReplenishmentPeriod - quantityAvailable;
          return _objectSpread(_objectSpread({}, val), {}, {
            disabled: true,
            quantityRequested: qtyRequested >= 0 ? qtyRequested : 0,
            quantityOnHand: _this3.state.isRequestFromWard ? '' : val.quantityOnHand
          });
        });
      } else {
        lineItemsData = _.map(data, function (val) {
          return _objectSpread(_objectSpread({}, val), {}, {
            disabled: true,
            quantityOnHand: _this3.state.isRequestFromWard ? '' : val.quantityOnHand
          });
        });
      }
      var sortOrder = _.toInteger(_.last(lineItemsData).sortOrder) + 100;
      this.setState({
        currentLineItems: this.props.isPaginated ? _.uniqBy(_.concat(this.state.currentLineItems, data), 'id') : data,
        values: _objectSpread(_objectSpread({}, this.state.values), {}, {
          lineItems: this.props.isPaginated ? _.uniqBy(_.concat(this.state.values.lineItems, lineItemsData), 'id') : lineItemsData
        }),
        sortOrder: sortOrder
      }, function () {
        if (!_.isNull(startIndex) && _this3.state.values.lineItems.length !== _this3.state.totalCount) {
          _this3.loadMoreRows({
            startIndex: startIndex + _this3.props.pageSize
          });
        }
        _this3.props.hideSpinner();
      });
    }
  }, {
    key: "updateTotalCount",
    value: function updateTotalCount(value) {
      this.setState({
        totalCount: this.state.totalCount + value === 0 ? 1 : this.state.totalCount + value
      });
    }
  }, {
    key: "updateRow",
    value: function updateRow(values, index) {
      var item = values.lineItems[index];
      this.setState({
        values: update(values, {
          lineItems: _defineProperty({}, index, {
            $set: item
          })
        })
      });
    }
  }, {
    key: "validate",
    value: function validate(values) {
      var _this4 = this;
      var errors = {};
      errors.lineItems = [];
      var date = moment(this.props.minimumExpirationDate, 'MM/DD/YYYY');
      _.forEach(values.lineItems, function (item, key) {
        var rowErrors = {};
        if (!_.isNil(item.product)) {
          if (_.isNil(item.quantityRequested) || item.quantityRequested < 0) {
            rowErrors.quantityRequested = 'react.stockMovement.error.enterQuantity.label';
          }
        }
        if (!_.isEmpty(item.boxName) && _.isEmpty(item.palletName)) {
          rowErrors.boxName = 'react.stockMovement.error.boxWithoutPallet.label';
        }
        var dateRequested = moment(item.expirationDate, 'MM/DD/YYYY');
        if (date.diff(dateRequested) > 0) {
          rowErrors.expirationDate = 'react.stockMovement.error.invalidDate.label';
        }
        if (_this4.state.isRequestFromWard) {
          if (_.isNil(item.quantityRequested) || item.quantityRequested < 0) {
            rowErrors.quantityRequested = 'react.stockMovement.error.enterQuantity.label';
          }
        }
        if (!_.isEmpty(rowErrors)) {
          errors.lineItems[key] = rowErrors;
        }
      });
      return errors;
    }
  }, {
    key: "newItemAdded",
    value: function newItemAdded() {
      this.setState({
        newItem: true
      });
    }

    /**
     * Exports current state of stock movement's to csv file.
     * @param {object} formValues
     * @public
     */
  }, {
    key: "exportTemplate",
    value: function exportTemplate(formValues) {
      var lineItems = _.filter(formValues.lineItems, function (item) {
        return !_.isEmpty(item);
      });
      this.saveItemsAndExportTemplate(formValues, lineItems);
    }

    /**
     * Exports current state of stock movement's to csv file.
     * @param {object} formValues
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveItemsAndExportTemplate",
    value: function saveItemsAndExportTemplate(formValues, lineItems) {
      var _this5 = this;
      var movementNumber = formValues.movementNumber,
        stockMovementId = formValues.stockMovementId;
      var url = "/openboxes/stockMovement/exportCsv/".concat(stockMovementId);
      this.props.showSpinner();
      return this.saveRequisitionItemsInCurrentStep(lineItems).then(function () {
        apiClient.get(url, {
          responseType: 'blob'
        }).then(function (response) {
          fileDownload(response.data, "ItemList".concat(movementNumber ? "-".concat(movementNumber) : '', ".csv"), 'text/csv');
          _this5.props.hideSpinner();
        });
      })["catch"](function () {
        return _this5.props.hideSpinner();
      });
    }

    /**
     * Imports chosen file to backend and then fetches line items.
     * @param {object} event
     * @public
     */
  }, {
    key: "importTemplate",
    value: function importTemplate(event) {
      var _this6 = this;
      this.props.showSpinner();
      var formData = new FormData();
      var file = event.target.files[0];
      var stockMovementId = this.state.values.stockMovementId;
      formData.append('importFile', file.slice(0, file.size, 'text/csv'));
      var config = {
        headers: {
          'content-type': 'multipart/form-data'
        }
      };
      var url = "/openboxes/stockMovement/importCsv/".concat(stockMovementId);
      return apiClient.post(url, formData, config).then(function () {
        _this6.setState({
          values: _objectSpread(_objectSpread({}, _this6.state.values), {}, {
            lineItems: []
          })
        });
        _this6.fetchLineItems();
      })["catch"](function () {
        _this6.props.hideSpinner();
      });
    }

    /**
     * Shows save confirmation dialog.
     * @param {function} onConfirm
     * @public
     */
  }, {
    key: "confirmSave",
    value: function confirmSave(onConfirm) {
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmSave.label', 'Confirm save'),
        message: this.state.isRequestFromWard ? this.props.translate('react.stockMovement.QOHWillNotBeSaved.message', 'This save action won’t save the quantity on hand you have entered. You will have to reenter these when you came back to this request later. Also if there are any empty or zero quantity lines, those lines will be deleted. Are you sure you want to proceed?') : this.props.translate('react.stockMovement.confirmSave.message', 'Are you sure you want to save? There are some lines with empty or zero quantity, those lines will be deleted.'),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: onConfirm
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }

    /**
     * Shows transition confirmation dialog if there are items with the same code.
     * @param {function} onConfirm
     * @param {object} items
     * @public
     */
  }, {
    key: "confirmTransition",
    value: function confirmTransition(onConfirm, items) {
      confirmAlert({
        title: this.props.translate('react.stockMovement.confirmTransition.label', 'You have entered the same code twice. Do you want to continue?'),
        message: _.map(items, function (item) {
          var _item$product$display;
          return /*#__PURE__*/React.createElement("p", {
            key: item.sortOrder
          }, "".concat(item.product.productCode, " ").concat(((_item$product$display = item.product.displayNames) === null || _item$product$display === void 0 ? void 0 : _item$product$display["default"]) || item.product.name, " ").concat(item.quantityRequested));
        }),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: onConfirm
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }
  }, {
    key: "confirmSubmit",
    value: function confirmSubmit(onConfirm) {
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmSubmit.label', 'Confirm submit'),
        message: this.props.translate('react.stockMovement.confirmSubmit.message', 'Please confirm you are ready to submit your request. Once submitted, you cannot edit the request.'),
        buttons: [{
          label: this.props.translate('react.default.goBack.label', 'Go back')
        }, {
          label: this.props.translate('react.default.submit.label', 'Submit'),
          onClick: onConfirm
        }]
      });
    }

    /**
     * Fetches all required data.
     * @param {boolean} forceFetch
     * @public
     */
  }, {
    key: "fetchAllData",
    value: function fetchAllData() {
      this.fetchAddItemsPageData();
      if (!this.props.isPaginated) {
        this.fetchLineItems();
      } else if (this.state.isFirstPageLoaded) {
        // Workaround for refetching items from scratch
        // when the first page was already loaded and table is paginated
        this.loadMoreRows({
          startIndex: 0
        });
      }
    }

    /**
     * Fetches 2nd step data from current stock movement.
     * @public
     */
  }, {
    key: "fetchLineItems",
    value: function fetchLineItems() {
      var _this7 = this;
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?stepNumber=2");
      return apiClient.get(url).then(function (response) {
        _this7.setState({
          totalCount: response.data.data.length
        }, function () {
          return _this7.setLineItems(response, null);
        });
      })["catch"](function (err) {
        return err;
      });
    }
  }, {
    key: "isRowLoaded",
    value: function isRowLoaded(_ref30) {
      var index = _ref30.index;
      return !!this.state.values.lineItems[index];
    }

    /**
     * Fetches stock movement's line items and sets them in redux form and in
     * state as current line items.
     * @public
     */
  }, {
    key: "fetchAddItemsPageData",
    value: function fetchAddItemsPageData() {
      var _this8 = this;
      this.props.showSpinner();
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId);
      apiClient.get(url).then(function (resp) {
        var _resp$data = resp.data,
          _resp$data$data = _resp$data.data,
          hasManageInventory = _resp$data$data.hasManageInventory,
          statusCode = _resp$data$data.statusCode,
          totalCount = _resp$data.totalCount;
        _this8.setState({
          values: _objectSpread(_objectSpread({}, _this8.state.values), {}, {
            hasManageInventory: hasManageInventory,
            statusCode: statusCode
          }),
          totalCount: totalCount === 0 ? 1 : totalCount,
          isRequestFromWard: isRequestFromWard(_this8.props.currentLocationId, _this8.state.values.destination.id, _this8.props.supportedActivities)
        });
        _this8.props.hideSpinner();
      })["catch"](function () {
        return _this8.props.hideSpinner();
      });
    }
  }, {
    key: "loadMoreRows",
    value: function loadMoreRows(_ref31) {
      var _this9 = this;
      var startIndex = _ref31.startIndex;
      this.setState({
        isFirstPageLoaded: true
      });
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?offset=").concat(startIndex, "&max=").concat(this.props.pageSize, "&stepNumber=2");
      apiClient.get(url).then(function (response) {
        _this9.setLineItems(response, startIndex);
      });
    }

    /**
     * Saves current stock movement progress (line items) and goes to the next stock movement step.
     * @param {object} formValues
     * @public
     */
  }, {
    key: "nextPage",
    value: function nextPage(formValues) {
      var _this10 = this;
      var lineItems = _.filter(formValues.lineItems, function (val) {
        return !_.isEmpty(val) && val.product;
      });
      if (_.some(lineItems, function (item) {
        return !item.quantityRequested || item.quantityRequested === '0';
      })) {
        this.confirmSave(function () {
          return _this10.checkDuplicatesSaveAndTransitionToNextStep(formValues, lineItems);
        });
      } else {
        this.checkDuplicatesSaveAndTransitionToNextStep(formValues, lineItems);
      }
    }
  }, {
    key: "checkDuplicatesSaveAndTransitionToNextStep",
    value: function checkDuplicatesSaveAndTransitionToNextStep(formValues, lineItems) {
      var _this11 = this;
      var itemsMap = {};
      _.forEach(lineItems, function (item) {
        if (itemsMap[item.product.productCode]) {
          itemsMap[item.product.productCode].push(item);
        } else {
          itemsMap[item.product.productCode] = [item];
        }
      });
      var itemsWithSameCode = _.filter(itemsMap, function (item) {
        return item.length > 1;
      });
      if (_.some(itemsMap, function (item) {
        return item.length > 1;
      }) && !(this.state.values.origin.type === 'SUPPLIER' || !this.state.values.hasManageInventory)) {
        this.confirmTransition(function () {
          return _this11.saveAndTransitionToNextStep(formValues, lineItems);
        }, _.reduce(itemsWithSameCode, function (a, b) {
          return a.concat(b);
        }, []));
      } else {
        this.saveAndTransitionToNextStep(formValues, lineItems);
      }
    }

    /**
     * Saves current stock movement progress (line items) and goes to the next stock movement step.
     * @param {object} formValues
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveAndTransitionToNextStep",
    value: function saveAndTransitionToNextStep(formValues, lineItems) {
      var _this12 = this;
      this.props.showSpinner();
      if (formValues.origin.type === 'SUPPLIER' || !formValues.hasManageInventory) {
        this.saveRequisitionItems(lineItems).then(function (resp) {
          var values = formValues;
          if (resp) {
            values = _objectSpread(_objectSpread({}, formValues), {}, {
              lineItems: resp.data.data.lineItems
            });
          }
          _this12.transitionToNextStep('CHECKING').then(function () {
            _this12.props.nextPage(values);
          })["catch"](function () {
            return _this12.props.hideSpinner();
          });
        })["catch"](function () {
          return _this12.props.hideSpinner();
        });
      } else {
        this.saveRequisitionItems(lineItems).then(function (resp) {
          var values = formValues;
          if (resp) {
            values = _objectSpread(_objectSpread({}, formValues), {}, {
              lineItems: resp.data.data.lineItems
            });
          }
          _this12.transitionToNextStep('VERIFYING').then(function () {
            _this12.props.nextPage(values);
          })["catch"](function () {
            return _this12.props.hideSpinner();
          });
        })["catch"](function () {
          return _this12.props.hideSpinner();
        });
      }
    }

    /**
     * Saves list of stock movement items with post method.
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveRequisitionItems",
    value: function saveRequisitionItems(lineItems) {
      var _this13 = this;
      var itemsToSave = this.getLineItemsToBeSaved(lineItems);
      var updateItemsUrl = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/updateItems");
      var payload = {
        id: this.state.values.stockMovementId,
        lineItems: itemsToSave
      };
      if (payload.lineItems.length) {
        return apiClient.post(updateItemsUrl, payload).then(function () {
          return _this13.fetchAddItemsPageData();
        })["catch"](function () {
          return Promise.reject(new Error('react.stockMovement.error.saveRequisitionItems.label'));
        });
      }
      return Promise.resolve();
    }
  }, {
    key: "submitRequest",
    value: function submitRequest(lineItems) {
      var _this14 = this;
      this.confirmSubmit(function () {
        var nonEmptyLineItems = _.filter(lineItems, function (val) {
          return !_.isEmpty(val) && val.product;
        });
        _this14.saveRequisitionItems(nonEmptyLineItems).then(function () {
          return _this14.transitionToNextStep('REQUESTED');
        });
      });
    }

    /**
     * Saves list of requisition items in current step (without step change). Used to export template.
     * @param {object} itemCandidatesToSave
     * @public
     */
  }, {
    key: "saveRequisitionItemsInCurrentStep",
    value: function saveRequisitionItemsInCurrentStep(itemCandidatesToSave) {
      var _this15 = this;
      var itemsToSave = this.getLineItemsToBeSaved(itemCandidatesToSave);
      var updateItemsUrl = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/updateItems");
      var payload = {
        id: this.state.values.stockMovementId,
        lineItems: itemsToSave
      };
      if (payload.lineItems.length) {
        return apiClient.post(updateItemsUrl, payload).then(function () {
          return _this15.setState({
            currentLineItems: [],
            values: _objectSpread(_objectSpread({}, _this15.state.values), {}, {
              lineItems: []
            }),
            sortOrder: 0,
            newItem: false,
            totalCount: 0
          }, function () {
            return _this15.fetchAllData();
          });
        })["catch"](function () {
          return Promise.reject(new Error(_this15.props.translate('react.stockMovement.error.saveRequisitionItems.label', 'Could not save requisition items')));
        });
      }
      return Promise.resolve();
    }

    /**
     * Saves list of requisition items in current step (without step change).
     * @param {object} formValues
     * @public
     */
  }, {
    key: "save",
    value: function save(formValues) {
      var _this16 = this;
      var lineItems = _.filter(formValues.lineItems, function (item) {
        return !_.isEmpty(item);
      });
      var zeroedLines = _.some(lineItems, function (item) {
        return !item.quantityRequested || item.quantityRequested === '0';
      });
      if (zeroedLines || this.state.isRequestFromWard) {
        this.confirmSave(function () {
          return _this16.saveItems(lineItems);
        });
      } else {
        this.saveItems(lineItems);
      }
    }
  }, {
    key: "cancelRequest",
    value: function cancelRequest() {
      var _this17 = this;
      confirmAlert({
        title: this.props.translate('react.stockMovement.request.confirmCancellation.label', 'Confirm request cancellation'),
        message: this.props.translate('react.stockMovement.request.confirmCancellation.message.label', 'Are you sure you want to delete current request ?'),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: function onClick() {
            _this17.props.showSpinner();
            apiClient["delete"]("/openboxes/api/stockMovements/".concat(_this17.state.values.stockMovementId)).then(function (response) {
              if (response.status === 204) {
                _this17.props.hideSpinner();
                Alert.success(_this17.props.translate('react.stockMovement.request.successfullyDeleted.label', 'Request was successfully deleted'), {
                  timeout: 3000
                });
                if (_this17.state.isRequestFromWard) {
                  _this17.props.history.push('/openboxes/');
                } else {
                  window.location = '/openboxes/stockMovement/list?direction=INBOUND';
                }
              }
            })["catch"](function () {
              return _this17.props.hideSpinner();
            });
          }
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }

    /**
     * Saves changes made by user in this step and redirects to the shipment view page
     * @param {object} formValues
     * @public
     */
    // eslint-disable-next-line consistent-return
  }, {
    key: "saveAndExit",
    value: function saveAndExit(formValues) {
      var _this18 = this;
      var saveAndRedirect = function saveAndRedirect(lineItems) {
        _this18.props.showSpinner();
        return _this18.saveRequisitionItemsInCurrentStep(lineItems).then(function () {
          var redirectTo = '/openboxes/stockMovement/list?direction=INBOUND';
          if (!_this18.props.supportedActivities.includes('MANAGE_INVENTORY') && _this18.props.supportedActivities.includes('SUBMIT_REQUEST')) {
            redirectTo = '/openboxes/dashboard';
          }
          window.location = redirectTo;
        })["catch"](function () {
          _this18.props.hideSpinner();
        });
      };
      var errors = this.validate(formValues).lineItems;
      if (!errors.length) {
        var lineItems = _.filter(formValues.lineItems, function (item) {
          return !_.isEmpty(item);
        });
        var zeroedLines = _.some(lineItems, function (item) {
          return !item.quantityRequested || item.quantityRequested === '0';
        });
        if (zeroedLines || this.state.isRequestFromWard) {
          this.confirmSave(function () {
            saveAndRedirect(lineItems);
          });
        } else {
          saveAndRedirect(lineItems);
        }
      } else {
        confirmAlert({
          title: this.props.translate('react.stockMovement.confirmExit.label', 'Confirm save'),
          message: this.props.translate('react.stockMovement.confirmExit.message', 'Validation errors occurred. Are you sure you want to exit and lose unsaved data?'),
          buttons: [{
            label: this.props.translate('react.default.yes.label', 'Yes'),
            onClick: function onClick() {
              var redirectTo = '/openboxes/stockMovement/list?direction=INBOUND';
              if (!_this18.props.supportedActivities.includes('MANAGE_INVENTORY') && _this18.props.supportedActivities.includes('SUBMIT_REQUEST')) {
                redirectTo = '/openboxes/dashboard';
              }
              window.location = redirectTo;
            }
          }, {
            label: this.props.translate('react.default.no.label', 'No')
          }]
        });
      }
    }

    /**
     * Saves list of requisition items in current step (without step change).
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveItems",
    value: function saveItems(lineItems) {
      var _this19 = this;
      this.props.showSpinner();
      return this.saveRequisitionItemsInCurrentStep(lineItems).then(function () {
        _this19.props.hideSpinner();
        Alert.success(_this19.props.translate('react.stockMovement.alert.saveSuccess.label', 'Changes saved successfully'), {
          timeout: 3000
        });
      })["catch"](function () {
        _this19.props.hideSpinner();
      });
    }

    /**
     * Refetch the data, all not saved changes will be lost.
     * @public
     */
  }, {
    key: "refresh",
    value: function refresh() {
      var _this20 = this;
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmRefresh.label', 'Confirm refresh'),
        message: this.props.translate('react.stockMovement.confirmRefresh.message', 'Are you sure you want to refresh? Your progress since last save will be lost.'),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: function onClick() {
            return _this20.fetchAllData();
          }
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }

    /**
     * Removes chosen item from requisition's items list.
     * @param {string} itemId
     * @public
     */
  }, {
    key: "removeItem",
    value: function removeItem(itemId) {
      var _this21 = this;
      var removeItemsUrl = "/openboxes/api/stockMovementItems/".concat(itemId, "/removeItem");
      return apiClient["delete"](removeItemsUrl)["catch"](function () {
        _this21.props.hideSpinner();
        return Promise.reject(new Error('react.stockMovement.error.deleteRequisitionItem.label'));
      });
    }

    /**
     * Removes all items from requisition's items list.
     * @public
     */
  }, {
    key: "removeAll",
    value: function removeAll() {
      var _this22 = this;
      var removeItemsUrl = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/removeAllItems");
      return apiClient["delete"](removeItemsUrl).then(function () {
        _this22.setState({
          totalCount: 1,
          currentLineItems: [],
          values: _objectSpread(_objectSpread({}, _this22.state.values), {}, {
            lineItems: new Array(1).fill({
              sortOrder: 100
            })
          })
        });
      })["catch"](function () {
        _this22.fetchLineItems();
        return Promise.reject(new Error('react.stockMovement.error.deleteRequisitionItem.label'));
      });
    }

    /**
     * Transition to next stock movement status:
     * - 'CHECKING' if origin type is supplier.
     * - 'VERIFYING' if origin type is other than supplier.
     * @param {string} status
     * @public
     */
  }, {
    key: "transitionToNextStep",
    value: function transitionToNextStep(status) {
      var _this23 = this;
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/status");
      var payload = {
        status: status
      };
      var movementNumber = this.state.values.movementNumber;
      if (this.state.values.statusCode === 'CREATED') {
        return apiClient.post(url, payload).then(function () {
          var translatedSubmitMessage = _this23.props.translate('react.stockMovement.request.submitMessage.label', 'Thank you for submitting your request. You can check the status of your request using stock movement number');
          var redirectToURL = '';
          if (!_this23.props.supportedActivities.includes('MANAGE_INVENTORY') && _this23.props.supportedActivities.includes('SUBMIT_REQUEST')) {
            redirectToURL = '/openboxes/';
          } else {
            redirectToURL = '/openboxes/stockMovement/list?direction=INBOUND';
          }
          Alert.success("".concat(translatedSubmitMessage, " ").concat(movementNumber));
          _this23.props.history.push(redirectToURL);
        });
      }
      return Promise.resolve();
    }

    /**
     * Saves changes made by user in this step and go back to previous page
     * @param {object} values
     * @param {boolean} invalid
     * @public
     */
    // eslint-disable-next-line consistent-return
  }, {
    key: "previousPage",
    value: function previousPage(values, invalid) {
      var _this24 = this;
      var saveAndRedirect = function saveAndRedirect(lineItems) {
        _this24.props.showSpinner();
        return _this24.saveRequisitionItemsInCurrentStep(lineItems).then(function () {
          return _this24.props.previousPage(values);
        })["catch"](function () {
          _this24.props.hideSpinner();
        });
      };
      if (!invalid) {
        var lineItems = _.filter(values.lineItems, function (item) {
          return !_.isEmpty(item);
        });
        var zeroedLines = _.some(lineItems, function (item) {
          return !item.quantityRequested || item.quantityRequested === '0';
        });
        if (zeroedLines || this.state.isRequestFromWard) {
          this.confirmSave(function () {
            saveAndRedirect(lineItems);
          });
        } else {
          saveAndRedirect(lineItems);
        }
      } else {
        confirmAlert({
          title: this.props.translate('react.stockMovement.confirmPreviousPage.label', 'Validation error'),
          message: this.props.translate('react.stockMovement.confirmPreviousPage.message.label', 'Cannot save due to validation error on page'),
          buttons: [{
            label: this.props.translate('react.stockMovement.confirmPreviousPage.correctError.label', 'Correct error')
          }, {
            label: this.props.translate('react.stockMovement.confirmPreviousPage.continue.label', 'Continue (lose unsaved work)'),
            onClick: function onClick() {
              return _this24.props.previousPage(values);
            }
          }]
        });
      }
    }
  }, {
    key: "updateProductData",
    value: function updateProductData(product, values, index) {
      var _this25 = this;
      if (product) {
        if (this.state.isRequestFromWard) {
          var url = "/openboxes/api/products/".concat(product.id, "/productDemand?originId=").concat(this.state.values.origin.id, "&destinationId=").concat(this.state.values.destination.id);
          apiClient.get(url).then(function (response) {
            var monthlyDemand = parseFloat(response.data.monthlyDemand);
            var quantityRequested = monthlyDemand - (response.data.quantityOnHand || 0);
            _this25.setState({
              values: update(values, {
                lineItems: _defineProperty({}, index, {
                  product: {
                    $set: product
                  },
                  quantityOnHand: {
                    $set: ''
                  },
                  monthlyDemand: {
                    $set: monthlyDemand
                  },
                  quantityRequested: {
                    $set: quantityRequested >= 0 ? quantityRequested : 0
                  }
                })
              })
            });
          })["catch"](this.props.hideSpinner());
        } else {
          var _url = "/openboxes/api/products/".concat(product.id, "/productAvailabilityAndDemand?locationId=").concat(this.state.values.destination.id);
          apiClient.get(_url).then(function (response) {
            var _response$data = response.data,
              monthlyDemand = _response$data.monthlyDemand,
              quantityAvailable = _response$data.quantityAvailable,
              quantityOnHand = _response$data.quantityOnHand;
            var quantityRequested = monthlyDemand - quantityAvailable > 0 ? monthlyDemand - quantityAvailable : 0;
            _this25.setState({
              values: update(values, {
                lineItems: _defineProperty({}, index, {
                  product: {
                    $set: product
                  },
                  quantityOnHand: {
                    $set: quantityOnHand
                  },
                  quantityAvailable: {
                    $set: quantityAvailable
                  },
                  monthlyDemand: {
                    $set: monthlyDemand
                  },
                  quantityRequested: {
                    $set: quantityRequested
                  }
                })
              })
            });
          })["catch"](this.props.hideSpinner());
        }
      } else {
        this.setState({
          values: update(values, {
            lineItems: _defineProperty({}, index, {
              product: {
                $set: null
              },
              quantityOnHand: {
                $set: ''
              },
              quantityAvailable: {
                $set: ''
              },
              monthlyDemand: {
                $set: ''
              },
              quantityRequested: {
                $set: ''
              }
            })
          })
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this26 = this;
      return /*#__PURE__*/React.createElement(Form, {
        onSubmit: function onSubmit() {},
        validate: this.validate,
        mutators: _objectSpread({}, arrayMutators),
        initialValues: this.state.values,
        render: function render(_ref32) {
          var handleSubmit = _ref32.handleSubmit,
            values = _ref32.values,
            invalid = _ref32.invalid;
          return /*#__PURE__*/React.createElement("div", {
            className: "d-flex flex-column"
          }, /*#__PURE__*/React.createElement("span", {
            className: "buttons-container"
          }, /*#__PURE__*/React.createElement("label", {
            htmlFor: "csvInput",
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs ".concat(_this26.state.isRequestFromWard ? 'disabled' : ''),
            title: _this26.state.isRequestFromWard ? 'Temporarily disabled' : ''
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-download pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.importTemplate.label",
            defaultMessage: "Import template"
          })), /*#__PURE__*/React.createElement("input", {
            id: "csvInput",
            type: "file",
            style: {
              display: 'none'
            },
            onChange: _this26.importTemplate,
            disabled: _this26.state.isRequestFromWard,
            onClick: function onClick(event) {
              // eslint-disable-next-line no-param-reassign
              event.target.value = null;
            },
            accept: ".csv"
          })), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this26.exportTemplate(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-upload pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.exportTemplate.label",
            defaultMessage: "Export template"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this26.refresh();
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-refresh pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.refresh.label",
            defaultMessage: "Reload"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid,
            onClick: function onClick() {
              return _this26.save(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-save pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.save.label",
            defaultMessage: "Save"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid,
            onClick: function onClick() {
              return _this26.saveAndExit(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-sign-out pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.saveAndExit.label",
            defaultMessage: "Save and exit"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid,
            onClick: function onClick() {
              return _this26.removeAll();
            },
            className: "float-right mb-1 btn btn-outline-danger align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-remove pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.deleteAll.label",
            defaultMessage: "Delete all"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            className: "float-right mb-1 btn btn-outline-danger align-self-end ml-1 btn-xs",
            onClick: function onClick() {
              return _this26.cancelRequest();
            }
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-remove pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.stockMovement.request.cancel.label",
            defaultMessage: "Cancel Request"
          })))), /*#__PURE__*/React.createElement("form", {
            onSubmit: handleSubmit
          }, /*#__PURE__*/React.createElement("div", {
            className: "table-form"
          }, _.map(_this26.getFields(), function (fieldConfig, fieldName) {
            return renderFormField(fieldConfig, fieldName, {
              stocklist: values.stocklist,
              removeItem: _this26.removeItem,
              originId: _this26.props.initialValues.origin.id,
              getSortOrder: _this26.getSortOrder,
              newItemAdded: _this26.newItemAdded,
              newItem: _this26.state.newItem,
              totalCount: _this26.state.totalCount,
              loadMoreRows: _this26.loadMoreRows,
              isRowLoaded: _this26.isRowLoaded,
              updateTotalCount: _this26.updateTotalCount,
              isPaginated: _this26.props.isPaginated,
              isFromOrder: _this26.state.values.isFromOrder,
              updateRow: _this26.updateRow,
              values: values,
              isFirstPageLoaded: _this26.state.isFirstPageLoaded,
              updateProductData: _this26.updateProductData,
              calculateQtyRequested: _this26.calculateQuantityRequested
            });
          })), /*#__PURE__*/React.createElement("div", {
            className: "submit-buttons"
          }, /*#__PURE__*/React.createElement("button", {
            type: "submit",
            disabled: invalid,
            onClick: function onClick() {
              return _this26.previousPage(values, invalid);
            },
            className: "btn btn-outline-primary btn-form btn-xs"
          }, /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.previous.label",
            defaultMessage: "Previous"
          })), /*#__PURE__*/React.createElement("button", {
            type: "submit",
            onClick: function onClick() {
              return _this26.submitRequest(values.lineItems);
            },
            className: "btn btn-outline-primary btn-form float-right btn-xs",
            disabled: invalid || !_.some(values.lineItems, function (item) {
              return item.product && _.parseInt(item.quantityRequested);
            })
          }, /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.submitRequest.label",
            defaultMessage: "Submit request"
          })))));
        }
      });
    }
  }]);
  return AddItemsPage;
}(Component);
var mapStateToProps = function mapStateToProps(state) {
  return {
    translate: translateWithDefaultMessage(getTranslate(state.localize)),
    stockMovementTranslationsFetched: state.session.fetchedTranslations.stockMovement,
    minimumExpirationDate: state.session.minimumExpirationDate,
    isPaginated: state.session.isPaginated,
    pageSize: state.session.pageSize,
    currentLocationId: state.session.currentLocation.id,
    supportedActivities: state.session.supportedActivities
  };
};
var mapDispatchToProps = {
  showSpinner: showSpinner,
  hideSpinner: hideSpinner,
  fetchUsers: fetchUsers
};
export default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddItemsPage));
AddItemsPage.propTypes = {
  /** Initial component's data */
  initialValues: PropTypes.shape({
    origin: PropTypes.shape({
      id: PropTypes.string
    }),
    hasManageInventory: PropTypes.bool
  }).isRequired,
  /** Function returning user to the previous page */
  previousPage: PropTypes.func.isRequired,
  /**
   * Function called with the form data when the handleSubmit()
   * is fired from within the form component.
   */
  nextPage: PropTypes.func.isRequired,
  /** Function called when data is loading */
  showSpinner: PropTypes.func.isRequired,
  /** Function called when data has loaded */
  hideSpinner: PropTypes.func.isRequired,
  translate: PropTypes.func.isRequired,
  stockMovementTranslationsFetched: PropTypes.bool.isRequired,
  minimumExpirationDate: PropTypes.string.isRequired,
  /** Return true if pagination is enabled */
  isPaginated: PropTypes.bool.isRequired,
  pageSize: PropTypes.number.isRequired,
  currentLocationId: PropTypes.string.isRequired,
  supportedActivities: PropTypes.arrayOf(PropTypes.string).isRequired,
  history: PropTypes.shape({
    push: PropTypes.func
  }).isRequired
};"},null]}