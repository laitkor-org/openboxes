{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/stock-movement/outbound/StockMovementOutboundTable.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/stock-movement/outbound/StockMovementOutboundTable.jsx","mtime":1698037750000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJzsKaW1wb3J0IHsgUmlBcnJvd1JpZ2h0U0xpbmUsIFJpRGVsZXRlQmluTGluZSwgUmlEb3dubG9hZDJMaW5lLCBSaUluZm9ybWF0aW9uTGluZSwgUmlQZW5jaWxMaW5lIH0gZnJvbSAncmVhY3QtaWNvbnMvcmknOwppbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICdyZWFjdC1sb2NhbGl6ZS1yZWR1eCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCBEYXRhVGFibGUsIHsgVGFibGVDZWxsIH0gZnJvbSAnY29tcG9uZW50cy9EYXRhVGFibGUnOwppbXBvcnQgRGF0ZUNlbGwgZnJvbSAnY29tcG9uZW50cy9EYXRhVGFibGUvRGF0ZUNlbGwnOwppbXBvcnQgQnV0dG9uIGZyb20gJ2NvbXBvbmVudHMvZm9ybS1lbGVtZW50cy9CdXR0b24nOwppbXBvcnQgU2hpcG1lbnRJZGVudGlmaWVyIGZyb20gJ2NvbXBvbmVudHMvc3RvY2stbW92ZW1lbnQvY29tbW9uL1NoaXBtZW50SWRlbnRpZmllcic7CmltcG9ydCB1c2VPdXRib3VuZExpc3RUYWJsZURhdGEgZnJvbSAnaG9va3MvbGlzdC1wYWdlcy9vdXRib3VuZC91c2VPdXRib3VuZExpc3RUYWJsZURhdGEnOwppbXBvcnQgQWN0aW9uRG90cyBmcm9tICd1dGlscy9BY3Rpb25Eb3RzJzsKaW1wb3J0IHsgZ2V0U2hpcG1lbnRUeXBlVG9vbHRpcCB9IGZyb20gJ3V0aWxzL2xpc3QtdXRpbHMnOwppbXBvcnQgeyBtYXBTaGlwbWVudFR5cGVzIH0gZnJvbSAndXRpbHMvb3B0aW9uLXV0aWxzJzsKaW1wb3J0IFN0YXR1c0luZGljYXRvciBmcm9tICd1dGlscy9TdGF0dXNJbmRpY2F0b3InOwppbXBvcnQgVHJhbnNsYXRlLCB7IHRyYW5zbGF0ZVdpdGhEZWZhdWx0TWVzc2FnZSB9IGZyb20gJ3V0aWxzL1RyYW5zbGF0ZSc7CmltcG9ydCAncmVhY3QtY29uZmlybS1hbGVydC9zcmMvcmVhY3QtY29uZmlybS1hbGVydC5jc3MnOwp2YXIgU3RvY2tNb3ZlbWVudE91dGJvdW5kVGFibGUgPSBmdW5jdGlvbiBTdG9ja01vdmVtZW50T3V0Ym91bmRUYWJsZShfcmVmKSB7CiAgdmFyIGZpbHRlclBhcmFtcyA9IF9yZWYuZmlsdGVyUGFyYW1zLAogICAgdHJhbnNsYXRlID0gX3JlZi50cmFuc2xhdGUsCiAgICByZXF1aXNpdGlvblN0YXR1c2VzID0gX3JlZi5yZXF1aXNpdGlvblN0YXR1c2VzLAogICAgY3VycmVudExvY2F0aW9uID0gX3JlZi5jdXJyZW50TG9jYXRpb24sCiAgICBpc1JlcXVlc3RzT3BlbiA9IF9yZWYuaXNSZXF1ZXN0c09wZW4sCiAgICBpc1VzZXJBZG1pbiA9IF9yZWYuaXNVc2VyQWRtaW47CiAgdmFyIF91c2VPdXRib3VuZExpc3RUYWJsZSA9IHVzZU91dGJvdW5kTGlzdFRhYmxlRGF0YShmaWx0ZXJQYXJhbXMpLAogICAgdGFibGVEYXRhID0gX3VzZU91dGJvdW5kTGlzdFRhYmxlLnRhYmxlRGF0YSwKICAgIHRhYmxlUmVmID0gX3VzZU91dGJvdW5kTGlzdFRhYmxlLnRhYmxlUmVmLAogICAgbG9hZGluZyA9IF91c2VPdXRib3VuZExpc3RUYWJsZS5sb2FkaW5nLAogICAgb25GZXRjaEhhbmRsZXIgPSBfdXNlT3V0Ym91bmRMaXN0VGFibGUub25GZXRjaEhhbmRsZXIsCiAgICBleHBvcnRTdG9ja01vdmVtZW50cyA9IF91c2VPdXRib3VuZExpc3RUYWJsZS5leHBvcnRTdG9ja01vdmVtZW50cywKICAgIGV4cG9ydFBlbmRpbmdTaGlwbWVudEl0ZW1zID0gX3VzZU91dGJvdW5kTGlzdFRhYmxlLmV4cG9ydFBlbmRpbmdTaGlwbWVudEl0ZW1zLAogICAgZGVsZXRlQ29uZmlybUFsZXJ0ID0gX3VzZU91dGJvdW5kTGlzdFRhYmxlLmRlbGV0ZUNvbmZpcm1BbGVydDsKICB2YXIgZ2V0U3RhdHVzVG9vbHRpcCA9IGZ1bmN0aW9uIGdldFN0YXR1c1Rvb2x0aXAoc3RhdHVzKSB7CiAgICByZXR1cm4gdHJhbnNsYXRlKCJyZWFjdC5zdG9ja01vdmVtZW50LnN0YXR1cy4iLmNvbmNhdChzdGF0dXMudG9Mb3dlckNhc2UoKSwgIi5kZXNjcmlwdGlvbi5sYWJlbCIpLCBzdGF0dXMudG9Mb3dlckNhc2UoKSk7CiAgfTsKCiAgLy8gTGlzdCBvZiBhbGwgYWN0aW9ucyBmb3Igb3V0Ym91bmQgU3RvY2sgTW92ZW1lbnQgcm93cwogIHZhciBnZXRBY3Rpb25zID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHJvdykgewogICAgdmFyIF9yb3ckb3JpZ2luYWwgPSByb3cub3JpZ2luYWwsCiAgICAgIGlzUGVuZGluZyA9IF9yb3ckb3JpZ2luYWwuaXNQZW5kaW5nLAogICAgICBpc1JldHVybiA9IF9yb3ckb3JpZ2luYWwuaXNSZXR1cm4sCiAgICAgIG9yZGVyID0gX3JvdyRvcmlnaW5hbC5vcmRlciwKICAgICAgb3JpZ2luID0gX3JvdyRvcmlnaW5hbC5vcmlnaW4sCiAgICAgIGlzUmVjZWl2ZWQgPSBfcm93JG9yaWdpbmFsLmlzUmVjZWl2ZWQsCiAgICAgIGlzUGFydGlhbGx5UmVjZWl2ZWQgPSBfcm93JG9yaWdpbmFsLmlzUGFydGlhbGx5UmVjZWl2ZWQsCiAgICAgIGN1cnJlbnRTdGF0dXMgPSBfcm93JG9yaWdpbmFsLmN1cnJlbnRTdGF0dXM7CiAgICB2YXIgYWN0aW9ucyA9IFtdOwoKICAgIC8vIFNob3cKICAgIHZhciBzaG93QWN0aW9uID0gewogICAgICBkZWZhdWx0TGFiZWw6ICdTaG93IFN0b2NrIE1vdmVtZW50JywKICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LmFjdGlvbi5zaG93LmxhYmVsJywKICAgICAgbGVmdEljb246IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJpSW5mb3JtYXRpb25MaW5lLCBudWxsKSwKICAgICAgaHJlZjogJy9vcGVuYm94ZXMvc3RvY2tNb3ZlbWVudC9zaG93JwogICAgfTsKICAgIGFjdGlvbnMucHVzaChzaG93QWN0aW9uKTsKCiAgICAvLyBFZGl0CiAgICBpZiAoIWlzUmVjZWl2ZWQgJiYgIWlzUGFydGlhbGx5UmVjZWl2ZWQpIHsKICAgICAgdmFyIGVkaXRBY3Rpb24gPSB7CiAgICAgICAgZGVmYXVsdExhYmVsOiAnRWRpdCBTdG9jayBNb3ZlbWVudCcsCiAgICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LmFjdGlvbi5lZGl0LmxhYmVsJywKICAgICAgICBsZWZ0SWNvbjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlQZW5jaWxMaW5lLCBudWxsKQogICAgICB9OwogICAgICBpZiAoaXNSZXR1cm4pIHsKICAgICAgICBlZGl0QWN0aW9uLmhyZWYgPSAiL29wZW5ib3hlcy9zdG9ja1RyYW5zZmVyL2VkaXQvIi5jb25jYXQob3JkZXIgPT09IG51bGwgfHwgb3JkZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yZGVyLmlkKTsKICAgICAgICBlZGl0QWN0aW9uLmFwcGVuZElkID0gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZWRpdEFjdGlvbi5ocmVmID0gJy9vcGVuYm94ZXMvc3RvY2tNb3ZlbWVudC9lZGl0JzsKICAgICAgfQogICAgICBhY3Rpb25zLnB1c2goZWRpdEFjdGlvbik7CiAgICB9CiAgICB2YXIgaXNTYW1lT3JpZ2luID0gY3VycmVudExvY2F0aW9uLmlkID09PSAob3JpZ2luID09PSBudWxsIHx8IG9yaWdpbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luLmlkKTsKICAgIC8vIERlbGV0ZQogICAgaWYgKChpc1BlbmRpbmcgfHwgIWN1cnJlbnRTdGF0dXMpICYmIChpc1NhbWVPcmlnaW4gfHwgIShvcmlnaW4gIT09IG51bGwgJiYgb3JpZ2luICE9PSB2b2lkIDAgJiYgb3JpZ2luLmlzRGVwb3QpKSkgewogICAgICB2YXIgZGVsZXRlQWN0aW9uID0gewogICAgICAgIGRlZmF1bHRMYWJlbDogJ0RlbGV0ZSBTdG9jayBNb3ZlbWVudCcsCiAgICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LmFjdGlvbi5kZWxldGUubGFiZWwnLAogICAgICAgIGxlZnRJY29uOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSaURlbGV0ZUJpbkxpbmUsIG51bGwpLAogICAgICAgIHZhcmlhbnQ6ICdkYW5nZXInLAogICAgICAgIG9uQ2xpY2s6IGRlbGV0ZUNvbmZpcm1BbGVydAogICAgICB9OwogICAgICAvLyBkZWxldGluZyByZXR1cm5zIHNob3VsZCBvbmx5IGJlIGF2YWlsYWJsZSB0byBhZG1pbiBvciBoaWdoZXIKICAgICAgaWYgKCFpc1JldHVybiB8fCBpc1JldHVybiAmJiBpc1VzZXJBZG1pbikgewogICAgICAgIGFjdGlvbnMucHVzaChkZWxldGVBY3Rpb24pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYWN0aW9uczsKICB9LCBbXSk7CgogIC8vIENvbHVtbnMgZm9yIHJlYWN0LXRhYmxlCiAgdmFyIGNvbHVtbnMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBbewogICAgICBIZWFkZXI6ICcgJywKICAgICAgd2lkdGg6IDUwLAogICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgIHN0eWxlOiB7CiAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJywKICAgICAgICB6SW5kZXg6IDEKICAgICAgfSwKICAgICAgZml4ZWQ6ICdsZWZ0JywKICAgICAgQ2VsbDogZnVuY3Rpb24gQ2VsbChyb3cpIHsKICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQWN0aW9uRG90cywgewogICAgICAgICAgZHJvcGRvd25QbGFjZW1lbnQ6ICJyaWdodCIsCiAgICAgICAgICBkcm9wZG93bkNsYXNzZXM6ICJhY3Rpb24tZHJvcGRvd24tb2Zmc2V0IiwKICAgICAgICAgIGFjdGlvbnM6IGdldEFjdGlvbnMocm93KSwKICAgICAgICAgIGlkOiByb3cub3JpZ2luYWwuaWQKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgIGlkOiAicmVhY3Quc3RvY2tNb3ZlbWVudC5jb2x1bW4uaXRlbXNDb3VudC5sYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICIjIGl0ZW1zIgogICAgICB9KSwKICAgICAgYWNjZXNzb3I6ICdsaW5lSXRlbUNvdW50JywKICAgICAgZml4ZWQ6ICdsZWZ0JywKICAgICAgY2xhc3NOYW1lOiAnYWN0aXZlLWNpcmNsZSBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlcicsCiAgICAgIGhlYWRlckNsYXNzTmFtZTogJ2hlYWRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyJywKICAgICAgd2lkdGg6IDgwLAogICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgIENlbGw6IGZ1bmN0aW9uIENlbGwocm93KSB7CiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ2VsbCwgX2V4dGVuZHMoe30sIHJvdywgewogICAgICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICAgICAgY2xhc3NOYW1lOiAiaXRlbXMtY291bnQtY2lyY2xlIgogICAgICAgIH0pKTsKICAgICAgfQogICAgfSwgewogICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgIGlkOiAicmVhY3Quc3RvY2tNb3ZlbWVudC5jb2x1bW4uc3RhdHVzLmxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlN0YXR1cyIKICAgICAgfSksCiAgICAgIGFjY2Vzc29yOiAnc3RhdHVzJywKICAgICAgZml4ZWQ6ICdsZWZ0JywKICAgICAgd2lkdGg6IDE1MCwKICAgICAgc29ydGFibGU6IGZhbHNlLAogICAgICBDZWxsOiBmdW5jdGlvbiBDZWxsKHJvdykgewogICAgICAgIHZhciBzdGF0dXMgPSBfLmZpbmQocmVxdWlzaXRpb25TdGF0dXNlcywgXy5tYXRjaGVzUHJvcGVydHkoJ2lkJywgcm93LnZhbHVlKSk7CiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ2VsbCwgX2V4dGVuZHMoe30sIHJvdywgewogICAgICAgICAgdG9vbHRpcDogdHJ1ZSwKICAgICAgICAgIHRvb2x0aXBMYWJlbDogZ2V0U3RhdHVzVG9vbHRpcChyb3cudmFsdWUpCiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0YXR1c0luZGljYXRvciwgewogICAgICAgICAgdmFyaWFudDogc3RhdHVzID09PSBudWxsIHx8IHN0YXR1cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhdHVzLnZhcmlhbnQsCiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyA9PT0gbnVsbCB8fCBzdGF0dXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0YXR1cy5sYWJlbAogICAgICAgIH0pKTsKICAgICAgfQogICAgfSwgewogICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgIGlkOiAicmVhY3Quc3RvY2tNb3ZlbWVudC5jb2x1bW4uaWRlbnRpZmllci5sYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJJZGVudGlmaWVyIgogICAgICB9KSwKICAgICAgYWNjZXNzb3I6ICdpZGVudGlmaWVyJywKICAgICAgZml4ZWQ6ICdsZWZ0JywKICAgICAgaGVhZGVyQ2xhc3NOYW1lOiAnaGVhZGVyIGp1c3RpZnktY29udGVudC1jZW50ZXInLAogICAgICBtaW5XaWR0aDogMTAwLAogICAgICBDZWxsOiBmdW5jdGlvbiBDZWxsKHJvdykgewogICAgICAgIHZhciBfcm93JG9yaWdpbmFsMiA9IHJvdy5vcmlnaW5hbCwKICAgICAgICAgIGlkID0gX3JvdyRvcmlnaW5hbDIuaWQsCiAgICAgICAgICBzaGlwbWVudFR5cGUgPSBfcm93JG9yaWdpbmFsMi5zaGlwbWVudFR5cGU7CiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ2VsbCwgX2V4dGVuZHMoe30sIHJvdywgewogICAgICAgICAgbGluazogIi9vcGVuYm94ZXMvc3RvY2tNb3ZlbWVudC9zaG93LyIuY29uY2F0KGlkKSwKICAgICAgICAgIHRvb2x0aXA6IHRydWUsCiAgICAgICAgICB0b29sdGlwTGFiZWw6IGdldFNoaXBtZW50VHlwZVRvb2x0aXAodHJhbnNsYXRlLCBzaGlwbWVudFR5cGUgPT09IG51bGwgfHwgc2hpcG1lbnRUeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaGlwbWVudFR5cGUuZGlzcGxheU5hbWUpCiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNoaXBtZW50SWRlbnRpZmllciwgewogICAgICAgICAgc2hpcG1lbnRUeXBlOiBtYXBTaGlwbWVudFR5cGVzKHNoaXBtZW50VHlwZSksCiAgICAgICAgICBpZGVudGlmaWVyOiByb3cgPT09IG51bGwgfHwgcm93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByb3cudmFsdWUKICAgICAgICB9KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LnN0b2NrTW92ZW1lbnQuY29sdW1uLm5hbWUubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTmFtZSIKICAgICAgfSksCiAgICAgIGFjY2Vzc29yOiAnbmFtZScsCiAgICAgIG1pbldpZHRoOiAyNTAsCiAgICAgIHNvcnRhYmxlOiBmYWxzZSwKICAgICAgQ2VsbDogZnVuY3Rpb24gQ2VsbChyb3cpIHsKICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVDZWxsLCBfZXh0ZW5kcyh7fSwgcm93LCB7CiAgICAgICAgICB0b29sdGlwOiB0cnVlLAogICAgICAgICAgdG9vbHRpcExhYmVsOiByb3cub3JpZ2luYWwuZGVzY3JpcHRpb24gfHwgcm93Lm9yaWdpbmFsLm5hbWUsCiAgICAgICAgICBsaW5rOiAiL29wZW5ib3hlcy9zdG9ja01vdmVtZW50L3Nob3cvIi5jb25jYXQocm93Lm9yaWdpbmFsLmlkKQogICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsKICAgICAgICAgIGNsYXNzTmFtZTogIm14LTEiCiAgICAgICAgfSwgdHJhbnNsYXRlKCJyZWFjdC5TdG9ja01vdmVtZW50VHlwZS5lbnVtLiIuY29uY2F0KHJvdy5vcmlnaW5hbC5zdG9ja01vdmVtZW50VHlwZSksIHJvdy5vcmlnaW5hbC5zdG9ja01vdmVtZW50VHlwZSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSaUFycm93UmlnaHRTTGluZSwgbnVsbCksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgcm93Lm9yaWdpbmFsLmRlc2NyaXB0aW9uIHx8IHJvdy5vcmlnaW5hbC5uYW1lKSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LnN0b2NrTW92ZW1lbnQuZGVzdGluYXRpb24ubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGVzdGluYXRpb24iCiAgICAgIH0pLAogICAgICBhY2Nlc3NvcjogJ2Rlc3RpbmF0aW9uLm5hbWUnLAogICAgICBtaW5XaWR0aDogMjUwLAogICAgICBDZWxsOiBmdW5jdGlvbiBDZWxsKHJvdykgewogICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNlbGwsIF9leHRlbmRzKHt9LCByb3csIHsKICAgICAgICAgIHRvb2x0aXA6IHRydWUKICAgICAgICB9KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LnN0b2NrTW92ZW1lbnQuc3RvY2tsaXN0LmxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlN0b2NrbGlzdCIKICAgICAgfSksCiAgICAgIGFjY2Vzc29yOiAnc3RvY2tsaXN0Lm5hbWUnLAogICAgICBtaW5XaWR0aDogMTUwLAogICAgICBDZWxsOiBmdW5jdGlvbiBDZWxsKHJvdykgewogICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNlbGwsIF9leHRlbmRzKHt9LCByb3csIHsKICAgICAgICAgIHRvb2x0aXA6IHRydWUsCiAgICAgICAgICBkZWZhdWx0VmFsdWU6ICJOb25lIgogICAgICAgIH0pKTsKICAgICAgfQogICAgfSwgewogICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgIGlkOiAicmVhY3Quc3RvY2tNb3ZlbWVudC5yZXF1ZXN0ZWRCeS5sYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJSZXF1ZXN0ZWQgYnkiCiAgICAgIH0pLAogICAgICBhY2Nlc3NvcjogJ3JlcXVlc3RlZEJ5Lm5hbWUnLAogICAgICBtaW5XaWR0aDogMjUwLAogICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgIENlbGw6IGZ1bmN0aW9uIENlbGwocm93KSB7CiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ2VsbCwgX2V4dGVuZHMoe30sIHJvdywgewogICAgICAgICAgZGVmYXVsdFZhbHVlOiAiTm9uZSIKICAgICAgICB9KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LnN0b2NrTW92ZW1lbnQub3V0Ym91bmQuY29sdW1uLmRhdGVSZXF1ZXN0ZWQubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGF0ZSBSZXF1ZXN0ZWQiCiAgICAgIH0pLAogICAgICBhY2Nlc3NvcjogJ2RhdGVSZXF1ZXN0ZWQnLAogICAgICB3aWR0aDogMTUwLAogICAgICBDZWxsOiBmdW5jdGlvbiBDZWxsKHJvdykgewogICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRlQ2VsbCwgcm93KTsKICAgICAgfQogICAgfSwgewogICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgIGlkOiAicmVhY3Quc3RvY2tNb3ZlbWVudC5jb2x1bW4uZGF0ZUNyZWF0ZWQubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGF0ZSBDcmVhdGVkIgogICAgICB9KSwKICAgICAgYWNjZXNzb3I6ICdkYXRlQ3JlYXRlZCcsCiAgICAgIHdpZHRoOiAxNTAsCiAgICAgIENlbGw6IGZ1bmN0aW9uIENlbGwocm93KSB7CiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGVDZWxsLCByb3cpOwogICAgICB9CiAgICB9XTsKICB9LCBbcmVxdWlzaXRpb25TdGF0dXNlc10pOwogIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiAibGlzdC1wYWdlLWxpc3Qtc2VjdGlvbiIKICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiAidGl0bGUtdGV4dCBwLTMgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciIKICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgaXNSZXF1ZXN0c09wZW4gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgIGlkOiAicmVhY3Quc3RvY2tNb3ZlbWVudC5yZXF1ZXN0cy5sYWJlbCIsCiAgICBkZWZhdWx0TWVzc2FnZTogIlJlcXVlc3RzIgogIH0pIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICBpZDogInJlYWN0LnN0b2NrTW92ZW1lbnQub3V0Ym91bmQubGFiZWwiLAogICAgZGVmYXVsdE1lc3NhZ2U6ICJPdXRib3VuZCIKICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCB7CiAgICBjbGFzc05hbWU6ICJtbC0xIgogIH0sICIoIi5jb25jYXQodGFibGVEYXRhLnRvdGFsQ291bnQsICIpIikpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7CiAgICBpc0Ryb3Bkb3duOiB0cnVlLAogICAgZGVmYXVsdExhYmVsOiAiRXhwb3J0IiwKICAgIGxhYmVsOiAicmVhY3QuZGVmYXVsdC5idXR0b24uZXhwb3J0LmxhYmVsIiwKICAgIHZhcmlhbnQ6ICJzZWNvbmRhcnkiLAogICAgRW5kSWNvbjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlEb3dubG9hZDJMaW5lLCBudWxsKQogIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiAiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IG5hdi1pdGVtIHBhZGRpbmctOCIsCiAgICAiYXJpYS1sYWJlbGxlZGJ5IjogImRyb3Bkb3duTWVudUJ1dHRvbiIKICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiYSIsIHsKICAgIGhyZWY6ICIjIiwKICAgIGNsYXNzTmFtZTogImRyb3Bkb3duLWl0ZW0iLAogICAgb25DbGljazogZXhwb3J0U3RvY2tNb3ZlbWVudHMsCiAgICByb2xlOiAiYnV0dG9uIiwKICAgIHRhYkluZGV4OiAwCiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICBpZDogInJlYWN0LnN0b2NrTW92ZW1lbnQuZXhwb3J0LmxhYmVsIiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiRXhwb3J0IFN0b2NrIE1vdmVtZW50cyIKICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJhIiwgewogICAgY2xhc3NOYW1lOiAiZHJvcGRvd24taXRlbSIsCiAgICBvbkNsaWNrOiBleHBvcnRQZW5kaW5nU2hpcG1lbnRJdGVtcywKICAgIGhyZWY6ICIjIgogIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgaWQ6ICJyZWFjdC5zdG9ja01vdmVtZW50LmV4cG9ydC5wZW5kaW5nU2hpcG1lbnRJdGVtcy5sYWJlbCIsCiAgICBkZWZhdWx0TWVzc2FnZTogIkV4cG9ydCBwZW5kaW5nIHNoaXBtZW50IGl0ZW1zIgogIH0pKSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhVGFibGUsIHsKICAgIG1hbnVhbDogdHJ1ZSwKICAgIHNvcnRhYmxlOiB0cnVlLAogICAgcmVmOiB0YWJsZVJlZiwKICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICBkYXRhOiB0YWJsZURhdGEuZGF0YSwKICAgIGxvYWRpbmc6IGxvYWRpbmcsCiAgICBkZWZhdWx0UGFnZVNpemU6IDEwLAogICAgcGFnZXM6IHRhYmxlRGF0YS5wYWdlcywKICAgIHRvdGFsRGF0YTogdGFibGVEYXRhLnRvdGFsQ291bnQsCiAgICBvbkZldGNoRGF0YTogb25GZXRjaEhhbmRsZXIsCiAgICBub0RhdGFUZXh0OiB0cmFuc2xhdGUoJ3JlYWN0LnN0b2NrTW92ZW1lbnQuZW1wdHkubGlzdC5sYWJlbCcsICdObyBTdG9jayBNb3ZlbWVudHMgbWF0Y2ggdGhlIGdpdmVuIGNyaXRlcmlhJykKICB9KSk7Cn07CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHsKICByZXR1cm4gewogICAgdHJhbnNsYXRlOiB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UoZ2V0VHJhbnNsYXRlKHN0YXRlLmxvY2FsaXplKSksCiAgICByZXF1aXNpdGlvblN0YXR1c2VzOiBzdGF0ZS5yZXF1aXNpdGlvblN0YXR1c2VzLmRhdGEsCiAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLnNlc3Npb24uY3VycmVudExvY2F0aW9uLAogICAgaXNVc2VyQWRtaW46IHN0YXRlLnNlc3Npb24uaXNVc2VyQWRtaW4sCiAgICBjdXJyZW50TG9jYWxlOiBzdGF0ZS5zZXNzaW9uLmFjdGl2ZUxhbmd1YWdlCiAgfTsKfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFN0b2NrTW92ZW1lbnRPdXRib3VuZFRhYmxlKTsKU3RvY2tNb3ZlbWVudE91dGJvdW5kVGFibGUucHJvcFR5cGVzID0gewogIGZpbHRlclBhcmFtczogUHJvcFR5cGVzLnNoYXBlKHt9KS5pc1JlcXVpcmVkLAogIHRyYW5zbGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICBpc1JlcXVlc3RzT3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCwKICBpc1VzZXJBZG1pbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCwKICBjdXJyZW50TG9jYXRpb246IFByb3BUeXBlcy5zaGFwZSh7CiAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLAogICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkCiAgfSkuaXNSZXF1aXJlZCwKICByZXF1aXNpdGlvblN0YXR1c2VzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoewogICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsCiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLAogICAgdmFyaWFudDogUHJvcFR5cGVzLnN0cmluZywKICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nCiAgfSkpLmlzUmVxdWlyZWQKfTs="},null]}