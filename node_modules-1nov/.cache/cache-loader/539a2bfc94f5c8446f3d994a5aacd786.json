{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/stock-transfer/StockTransferSecondPage.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/stock-transfer/StockTransferSecondPage.jsx","mtime":1698037750000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfQpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbIkBAaXRlcmF0b3IiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9CmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfQpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTsgfSB9CmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCAicHJvdG90eXBlIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgInByb3RvdHlwZSIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQpmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsICJzdHJpbmciKTsgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gInN5bWJvbCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfQpmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKF90eXBlb2YoaW5wdXQpICE9PSAib2JqZWN0IiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCAiZGVmYXVsdCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSAib2JqZWN0IikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS4iKTsgfSByZXR1cm4gKGhpbnQgPT09ICJzdHJpbmciID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH0KaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJzsKaW1wb3J0IHF1ZXJ5U3RyaW5nIGZyb20gJ3F1ZXJ5LXN0cmluZyc7CmltcG9ydCB7IGdldFRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LWxvY2FsaXplLXJlZHV4JzsKaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFJlYWN0VGFibGUgZnJvbSAncmVhY3QtdGFibGUnOwppbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAncmVhY3QtdGlwcHknOwppbXBvcnQgeyBoaWRlU3Bpbm5lciwgc2hvd1NwaW5uZXIgfSBmcm9tICdhY3Rpb25zJzsKaW1wb3J0IHsgZXh0cmFjdFN0b2NrVHJhbnNmZXJJdGVtcywgcHJlcGFyZVJlcXVlc3QgfSBmcm9tICdjb21wb25lbnRzL3N0b2NrLXRyYW5zZmVyL3V0aWxzJzsKaW1wb3J0IGFwaUNsaWVudCwgeyBmbGF0dGVuUmVxdWVzdCwgcGFyc2VSZXNwb25zZSB9IGZyb20gJ3V0aWxzL2FwaUNsaWVudCc7CmltcG9ydCBjdXN0b21UcmVlVGFibGVIT0MgZnJvbSAndXRpbHMvQ3VzdG9tVHJlZVRhYmxlJzsKaW1wb3J0IEZpbHRlciBmcm9tICd1dGlscy9GaWx0ZXInOwppbXBvcnQgU2VsZWN0IGZyb20gJ3V0aWxzL1NlbGVjdCc7CmltcG9ydCBUcmFuc2xhdGUsIHsgdHJhbnNsYXRlV2l0aERlZmF1bHRNZXNzYWdlIH0gZnJvbSAndXRpbHMvVHJhbnNsYXRlJzsKaW1wb3J0ICdyZWFjdC10YWJsZS9yZWFjdC10YWJsZS5jc3MnOwp2YXIgU2VsZWN0VHJlZVRhYmxlID0gY3VzdG9tVHJlZVRhYmxlSE9DKFJlYWN0VGFibGUpOwp2YXIgQVBQUk9WRUQgPSAnQVBQUk9WRUQnOwp2YXIgQ0FOQ0VMRUQgPSAnQ0FOQ0VMRUQnOwoKLyoqCiAqIFRoZSBzZWNvbmQgcGFnZSBvZiBzdG9jayB0cmFuc2ZlciB3aGVyZSB1c2VyIGNhbiBjaG9vc2UgcXR5IGFuZCBiaW4gdG8gdHJhbnNmZXIKICogb3IgZ2VuZXJhdGUgc3RvY2sgdHJhbnNmZXIgbGlzdChwZGYpLgogKi8KdmFyIFN0b2NrVHJhbnNmZXJTZWNvbmRQYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFN0b2NrVHJhbnNmZXJTZWNvbmRQYWdlLCBfQ29tcG9uZW50KTsKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFN0b2NrVHJhbnNmZXJTZWNvbmRQYWdlKTsKICBmdW5jdGlvbiBTdG9ja1RyYW5zZmVyU2Vjb25kUGFnZShfcHJvcHMpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdG9ja1RyYW5zZmVyU2Vjb25kUGFnZSk7CiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9wcm9wcyk7CiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJnZXRDb2x1bW5zIiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gW3sKICAgICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgICAgaWQ6ICJyZWFjdC5zdG9ja1RyYW5zZmVyLmNvZGUubGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDb2RlIgogICAgICAgIH0pLAogICAgICAgIGFjY2Vzc29yOiAncHJvZHVjdC5wcm9kdWN0Q29kZScsCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnCiAgICAgICAgfSwKICAgICAgICBGaWx0ZXI6IEZpbHRlcgogICAgICB9LCB7CiAgICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgIGlkOiAicmVhY3Quc3RvY2tUcmFuc2Zlci5wcm9kdWN0LmxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUHJvZHVjdCIKICAgICAgICB9KSwKICAgICAgICBhY2Nlc3NvcjogJ3Byb2R1Y3QubmFtZScsCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnCiAgICAgICAgfSwKICAgICAgICBGaWx0ZXI6IEZpbHRlcgogICAgICB9LCB7CiAgICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgIGlkOiAicmVhY3Quc3RvY2tUcmFuc2Zlci5sb3QubGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMb3QiCiAgICAgICAgfSksCiAgICAgICAgYWNjZXNzb3I6ICdsb3ROdW1iZXInLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm9ybWFsJwogICAgICAgIH0sCiAgICAgICAgRmlsdGVyOiBGaWx0ZXIKICAgICAgfSwgewogICAgICAgIEhlYWRlcjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgICBpZDogInJlYWN0LnN0b2NrVHJhbnNmZXIuZXhwaXJ5LmxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXhwaXJ5IgogICAgICAgIH0pLAogICAgICAgIGFjY2Vzc29yOiAnZXhwaXJhdGlvbkRhdGUnLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm9ybWFsJwogICAgICAgIH0sCiAgICAgICAgRmlsdGVyOiBGaWx0ZXIKICAgICAgfSwgewogICAgICAgIEhlYWRlcjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgICBpZDogInJlYWN0LnN0b2NrVHJhbnNmZXIucXVhbnRpdHlBdmFpbGFibGVUb1RyYW5zZmVyLmxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUXVhbnRpdHkgQXZhaWxhYmxlIHRvIFRyYW5zZmVyIgogICAgICAgIH0pLAogICAgICAgIGFjY2Vzc29yOiAncXVhbnRpdHlOb3RQaWNrZWQnLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm9ybWFsJwogICAgICAgIH0sCiAgICAgICAgd2lkdGg6IDIyMCwKICAgICAgICBGaWx0ZXI6IEZpbHRlcgogICAgICB9LCB7CiAgICAgICAgSGVhZGVyOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgIGlkOiAicmVhY3Quc3RvY2tUcmFuc2Zlci5jdXJyZW50Wm9uZS5sYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkN1cnJlbnQgWm9uZSIKICAgICAgICB9KSwKICAgICAgICBhY2Nlc3NvcjogJ29yaWdpblpvbmUnLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm9ybWFsJwogICAgICAgIH0sCiAgICAgICAgRmlsdGVyOiBGaWx0ZXIKICAgICAgfSwgewogICAgICAgIEhlYWRlcjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgICBpZDogInJlYWN0LnN0b2NrVHJhbnNmZXIuY3VycmVudEJpbkxvY2F0aW9uLmxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ3VycmVudCBCaW4gTG9jYXRpb24iCiAgICAgICAgfSksCiAgICAgICAgYWNjZXNzb3I6ICdvcmlnaW5CaW5Mb2NhdGlvbi5uYW1lJywKICAgICAgICBzdHlsZTogewogICAgICAgICAgd2hpdGVTcGFjZTogJ25vcm1hbCcKICAgICAgICB9LAogICAgICAgIEZpbHRlcjogRmlsdGVyCiAgICAgIH0sIHsKICAgICAgICBIZWFkZXI6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgICAgaWQ6ICJyZWFjdC5zdG9ja1RyYW5zZmVyLnF0eVRvVHJhbnNmZXIubGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJRdHkgdG8gVHJhbnNmZXIiCiAgICAgICAgfSksCiAgICAgICAgYWNjZXNzb3I6ICdxdWFudGl0eScsCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnCiAgICAgICAgfSwKICAgICAgICBDZWxsOiBmdW5jdGlvbiBDZWxsKHByb3BzKSB7CiAgICAgICAgICB2YXIgaXRlbUluZGV4ID0gcHJvcHMuaW5kZXg7CiAgICAgICAgICB2YXIgc3RvY2tUcmFuc2Zlckl0ZW1zID0gX3RoaXMuc3RhdGUuc3RvY2tUcmFuc2Zlci5zdG9ja1RyYW5zZmVySXRlbXM7CiAgICAgICAgICB2YXIgc3BsaXRJdGVtcyA9IF8uZmlsdGVyKHN0b2NrVHJhbnNmZXJJdGVtcywgZnVuY3Rpb24gKGxpbmVJdGVtKSB7CiAgICAgICAgICAgIHJldHVybiBsaW5lSXRlbS5yZWZlcmVuY2VJZCAmJiBsaW5lSXRlbS5yZWZlcmVuY2VJZCA9PT0gcHJvcHMub3JpZ2luYWwucmVmZXJlbmNlSWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBkaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgdmFyIGRpc2FibGVkTWVzc2FnZTsKICAgICAgICAgIGlmICghcHJvcHMub3JpZ2luYWwuaWQgfHwgc3BsaXRJdGVtcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgIHZhciBxdWFudGl0eVRvVHJhbnNmZXIgPSBfLnJlZHVjZShzcGxpdEl0ZW1zLCBmdW5jdGlvbiAoc3VtLCB2YWwpIHsKICAgICAgICAgICAgICByZXR1cm4gc3VtICsgKHZhbC5xdWFudGl0eSA/IF8udG9JbnRlZ2VyKHZhbC5xdWFudGl0eSkgOiAwKTsKICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgIGlmIChxdWFudGl0eVRvVHJhbnNmZXIgPiBwcm9wcy5vcmlnaW5hbC5xdWFudGl0eU5vdFBpY2tlZCkgewogICAgICAgICAgICAgIF8uZm9yRWFjaChzdG9ja1RyYW5zZmVySXRlbXMsIGZ1bmN0aW9uIChsaW5lSXRlbSkgewogICAgICAgICAgICAgICAgXy5mb3JFYWNoKHNwbGl0SXRlbXMsIGZ1bmN0aW9uIChzcGxpdEl0ZW0pIHsKICAgICAgICAgICAgICAgICAgaWYgKGxpbmVJdGVtID09PSBzcGxpdEl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWRNZXNzYWdlID0gX3RoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja1RyYW5zZmVyLmhpZ2hlclNwbGl0UXVhbnRpdHkubGFiZWwnLCAnU3VtIG9mIHF1YW50aXR5IHRvIHRyYW5zZmVyIG9mIHNwbGl0IGl0ZW1zIGNhbm5vdCBiZSBoaWdoZXIgdGhhbiBxdWFudGl0eSBpbiBjdXJyZW50IGJpbi4nKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoc3BsaXRJdGVtcy5sZW5ndGggPT09IDEgJiYgcHJvcHMub3JpZ2luYWwucXVhbnRpdHlOb3RQaWNrZWQgPCBfLnRvSW50ZWdlcihwcm9wcy52YWx1ZSkpIHsKICAgICAgICAgICAgZGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgICBkaXNhYmxlZE1lc3NhZ2UgPSBfdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LnN0b2NrVHJhbnNmZXIuaGlnaGVyUXVhbnRpdHkubGFiZWwnLCAnUXVhbnRpdHkgdG8gdHJhbnNmZXIgY2Fubm90IGJlIGhpZ2hlciB0aGFuIHF1YW50aXR5IGluIGN1cnJlbnQgYmluJyk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIV8udG9JbnRlZ2VyKHByb3BzLnZhbHVlKSkgewogICAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICAgIGRpc2FibGVkTWVzc2FnZSA9IF90aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tUcmFuc2Zlci5zZWxlY3RPckRlbGV0ZUxpbmUubGFiZWwnLCAnUGxlYXNlIHNlbGVjdCBhIHF1YW50aXR5IG9yIGRlbGV0ZSB0aGUgbGluZScpOwogICAgICAgICAgfSBlbHNlIGlmIChfLnRvSW50ZWdlcihwcm9wcy52YWx1ZSkgPiBwcm9wcy5vcmlnaW5hbC5xdWFudGl0eU5vdFBpY2tlZCkgewogICAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICAgIGRpc2FibGVkTWVzc2FnZSA9IF90aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tUcmFuc2Zlci5oaWdoZXJUaGFuUW9ILmxhYmVsJywgJ0NhbnQgdHJhbnNmZXIgbW9yZSB0aGFuIG9uIGhhbmQuJyk7CiAgICAgICAgICB9IGVsc2UgaWYgKF8udG9JbnRlZ2VyKHByb3BzLnZhbHVlKSA8IDApIHsKICAgICAgICAgICAgZGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgICBkaXNhYmxlZE1lc3NhZ2UgPSBfdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LnN0b2NrVHJhbnNmZXIuZXJyb3JzLm5lZ2F0aXZlUXR5LmxhYmVsJywgJ1F1YW50aXR5IHRvIHRyYW5zZmVyIGNhblwndCBiZSBuZWdhdGl2ZScpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRvb2x0aXAsIHsKICAgICAgICAgICAgaHRtbDogZGlzYWJsZWRNZXNzYWdlLAogICAgICAgICAgICBkaXNhYmxlZDogIWRpc2FibGVkLAogICAgICAgICAgICB0aGVtZTogInRyYW5zcGFyZW50IiwKICAgICAgICAgICAgYXJyb3c6ICJ0cnVlIiwKICAgICAgICAgICAgZGVsYXk6ICIxNTAiLAogICAgICAgICAgICBkdXJhdGlvbjogIjI1MCIsCiAgICAgICAgICAgIGhpZGVEZWxheTogIjUwIgogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiBkaXNhYmxlZCAmJiBwcm9wcy5vcmlnaW5hbC5zdGF0dXMgIT09IENBTkNFTEVEID8gJ2hhcy1lcnJvcicgOiAnJwogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImlucHV0IiwgewogICAgICAgICAgICB0eXBlOiAibnVtYmVyIiwKICAgICAgICAgICAgY2xhc3NOYW1lOiAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC14cyIsCiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSwKICAgICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLm9yaWdpbmFsLnN0YXR1cyA9PT0gQ0FOQ0VMRUQsCiAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkgewogICAgICAgICAgICAgIHZhciBzdG9ja1RyYW5zZmVyID0gdXBkYXRlKF90aGlzLnN0YXRlLnN0b2NrVHJhbnNmZXIsIHsKICAgICAgICAgICAgICAgIHN0b2NrVHJhbnNmZXJJdGVtczogX2RlZmluZVByb3BlcnR5KHt9LCBpdGVtSW5kZXgsIHsKICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiBldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBfdGhpcy5jaGFuZ2VTdG9ja1RyYW5zZmVyKHN0b2NrVHJhbnNmZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KSkpOwogICAgICAgIH0sCiAgICAgICAgRmlsdGVyOiBGaWx0ZXIKICAgICAgfSwgewogICAgICAgIEhlYWRlcjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgICBpZDogInJlYWN0LnN0b2NrVHJhbnNmZXIudHJhbnNmZXJUby5sYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlRyYW5zZmVyIHRvIgogICAgICAgIH0pLAogICAgICAgIGFjY2Vzc29yOiAnZGVzdGluYXRpb25CaW5Mb2NhdGlvbicsCiAgICAgICAgQ2VsbDogZnVuY3Rpb24gQ2VsbChjZWxsSW5mbykgewogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgewogICAgICAgICAgICBvcHRpb25zOiBfdGhpcy5zdGF0ZS5iaW5zLAogICAgICAgICAgICB2YWx1ZTogXy5nZXQoX3RoaXMuc3RhdGUuc3RvY2tUcmFuc2Zlci5zdG9ja1RyYW5zZmVySXRlbXMsICJbIi5jb25jYXQoY2VsbEluZm8uaW5kZXgsICJdLiIpLmNvbmNhdChjZWxsSW5mby5jb2x1bW4uaWQpKSB8fCBudWxsLAogICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY2hhbmdlU3RvY2tUcmFuc2Zlcih1cGRhdGUoX3RoaXMuc3RhdGUuc3RvY2tUcmFuc2ZlciwgewogICAgICAgICAgICAgICAgc3RvY2tUcmFuc2Zlckl0ZW1zOiBfZGVmaW5lUHJvcGVydHkoe30sIGNlbGxJbmZvLmluZGV4LCB7CiAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uQmluTG9jYXRpb246IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiB2YWx1ZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmFsdWVLZXk6ICJpZCIsCiAgICAgICAgICAgIGxhYmVsS2V5OiAibmFtZSIsCiAgICAgICAgICAgIGNsYXNzTmFtZTogInNlbGVjdC14cyIsCiAgICAgICAgICAgIGRpc2FibGVkOiBjZWxsSW5mby5vcmlnaW5hbC5zdGF0dXMgPT09IENBTkNFTEVECiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIEZpbHRlcjogRmlsdGVyCiAgICAgIH0sIHsKICAgICAgICBIZWFkZXI6ICcnLAogICAgICAgIGFjY2Vzc29yOiAnc3BsaXRJdGVtcycsCiAgICAgICAgQ2VsbDogZnVuY3Rpb24gQ2VsbChjZWxsSW5mbykgewogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImQtZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAiCiAgICAgICAgICB9LCAhY2VsbEluZm8ub3JpZ2luYWwucmVmZXJlbmNlSWQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiAiYnRuIGJ0bi1vdXRsaW5lLXN1Y2Nlc3MgYnRuLXhzIG1yLTEgbWItMSIsCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNwbGl0SXRlbShjZWxsSW5mbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgICAgICBpZDogInJlYWN0LnN0b2NrVHJhbnNmZXIuc3BsaXRJdGVtLmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTcGxpdCBsaW5lIgogICAgICAgICAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiYnV0dG9uIiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJidG4gYnRuLW91dGxpbmUtZGFuZ2VyIGJ0bi14cyBtYi0xIiwKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZGVsZXRlSXRlbShjZWxsSW5mby5pbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgICAgICBpZDogInJlYWN0LmRlZmF1bHQuYnV0dG9uLmRlbGV0ZS5sYWJlbCIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGVsZXRlIgogICAgICAgICAgfSkpKTsKICAgICAgICB9LAogICAgICAgIGZpbHRlcmFibGU6IGZhbHNlCiAgICAgIH1dOwogICAgfSk7CiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJkYXRhRmV0Y2hlZCIsIGZhbHNlKTsKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImZpbHRlck1ldGhvZCIsIGZ1bmN0aW9uIChmaWx0ZXIsIHJvdykgewogICAgICB2YXIgdmFsID0gcm93W2ZpbHRlci5pZF07CiAgICAgIGlmIChmaWx0ZXIuaWQgPT09ICdkZXN0aW5hdGlvbkJpbkxvY2F0aW9uJykgewogICAgICAgIHZhbCA9IF8uZ2V0KHZhbCwgJ25hbWUnKTsKICAgICAgfQogICAgICByZXR1cm4gXy50b1N0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyLnZhbHVlLnRvTG93ZXJDYXNlKCkpOwogICAgfSk7CiAgICBfdGhpcy5nZXRDb2x1bW5zID0gX3RoaXMuZ2V0Q29sdW1ucy5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIHZhciBjb2x1bW5zID0gX3RoaXMuZ2V0Q29sdW1ucygpOwogICAgdmFyIF9zdG9ja1RyYW5zZmVyID0gX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlcy5zdG9ja1RyYW5zZmVyOwogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIHN0b2NrVHJhbnNmZXI6IF9zdG9ja1RyYW5zZmVyIHx8IHt9LAogICAgICBjb2x1bW5zOiBjb2x1bW5zLAogICAgICBiaW5zOiBbXQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgX2NyZWF0ZUNsYXNzKFN0b2NrVHJhbnNmZXJTZWNvbmRQYWdlLCBbewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICBpZiAodGhpcy5wcm9wcy5zdG9ja1RyYW5zZmVyVHJhbnNsYXRpb25zRmV0Y2hlZCkgewogICAgICAgIHRoaXMuZGF0YUZldGNoZWQgPSB0cnVlOwogICAgICAgIHRoaXMuZmV0Y2hCaW5zKCk7CiAgICAgIH0KICAgICAgdGhpcy5mZXRjaFN0b2NrVHJhbnNmZXIoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykgewogICAgICBpZiAobmV4dFByb3BzLnN0b2NrVHJhbnNmZXJUcmFuc2xhdGlvbnNGZXRjaGVkICYmICF0aGlzLmRhdGFGZXRjaGVkKSB7CiAgICAgICAgdGhpcy5kYXRhRmV0Y2hlZCA9IHRydWU7CiAgICAgICAgdGhpcy5mZXRjaEJpbnMoKTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBjb2x1bW5zIHdoaWNoIGFyZSBwYXNzZWQgdG8gdGhlIHRhYmxlLgogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAiZmV0Y2hTdG9ja1RyYW5zZmVyIiwKICAgIHZhbHVlOgogICAgLyoqCiAgICAgKiBGZXRjaGVzIHN0b2NrIHRyYW5zZmVyIGl0ZW1zIGFuZCBzZXRzIHRoZW0gaW4gcmVkdXggZm9ybSBhbmQgaW4KICAgICAqIHN0YXRlIGFzIGN1cnJlbnQgbGluZSBpdGVtcy4KICAgICAqIEBwdWJsaWMKICAgICAqLwoKICAgIGZ1bmN0aW9uIGZldGNoU3RvY2tUcmFuc2ZlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMucHJvcHMuc2hvd1NwaW5uZXIoKTsKICAgICAgdmFyIHVybCA9ICIvb3BlbmJveGVzL2FwaS9zdG9ja1RyYW5zZmVycy8iLmNvbmNhdCh0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5zdG9ja1RyYW5zZmVySWQpOwogICAgICBhcGlDbGllbnQuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2YXIgc3RvY2tUcmFuc2ZlciA9IHBhcnNlUmVzcG9uc2UocmVzcG9uc2UuZGF0YS5kYXRhKTsKICAgICAgICB2YXIgc3RvY2tUcmFuc2Zlckl0ZW1zID0gZXh0cmFjdFN0b2NrVHJhbnNmZXJJdGVtcyhzdG9ja1RyYW5zZmVyKTsKICAgICAgICBfdGhpczIuc2V0U3RhdGUoewogICAgICAgICAgc3RvY2tUcmFuc2ZlcjogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdG9ja1RyYW5zZmVyKSwge30sIHsKICAgICAgICAgICAgc3RvY2tUcmFuc2Zlckl0ZW1zOiBzdG9ja1RyYW5zZmVySXRlbXMKICAgICAgICAgIH0pCiAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICAgIH0pOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmZXRjaEJpbnMiLAogICAgdmFsdWU6CiAgICAvKioKICAgICAqIEZldGNoZXMgYXZhaWxhYmxlIGJpbiBsb2NhdGlvbnMgZnJvbSBBUEkuCiAgICAgKiBAcHVibGljCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZldGNoQmlucygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgIHRoaXMucHJvcHMuc2hvd1NwaW5uZXIoKTsKICAgICAgdmFyIHVybCA9ICcvb3BlbmJveGVzL2FwaS9pbnRlcm5hbExvY2F0aW9ucyc7CiAgICAgIHZhciBtYXBCaW5zID0gZnVuY3Rpb24gbWFwQmlucyhiaW5zKSB7CiAgICAgICAgcmV0dXJuIF8uY2hhaW4oYmlucykub3JkZXJCeShbJ2xhYmVsJ10sIFsnYXNjJ10pLnZhbHVlKCk7CiAgICAgIH07CiAgICAgIHJldHVybiBhcGlDbGllbnQuZ2V0KHVybCwgewogICAgICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGZ1bmN0aW9uIHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1ldGVycykgewogICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nLnN0cmluZ2lmeShwYXJhbWV0ZXJzKTsKICAgICAgICB9LAogICAgICAgIHBhcmFtczogewogICAgICAgICAgJ2xvY2F0aW9uLmlkJzogdGhpcy5wcm9wcy5sb2NhdGlvbi5pZCwKICAgICAgICAgIGxvY2F0aW9uVHlwZUNvZGU6IFsnQklOX0xPQ0FUSU9OJywgJ0lOVEVSTkFMJ10sCiAgICAgICAgICBpZ25vcmVBY3Rpdml0eUNvZGVzOiBbJ1JFQ0VJVkVfU1RPQ0snXQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2YXIgYmluR3JvdXBzID0gXy5wYXJ0aXRpb24ocmVzcG9uc2UuZGF0YS5kYXRhLCBmdW5jdGlvbiAoYmluKSB7CiAgICAgICAgICByZXR1cm4gYmluLnpvbmVOYW1lOwogICAgICAgIH0pOwogICAgICAgIHZhciBiaW5zV2l0aFpvbmUgPSBfLmNoYWluKGJpbkdyb3Vwc1swXSkuZ3JvdXBCeSgnem9uZU5hbWUnKS5tYXAoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIG5hbWU6IGtleSwKICAgICAgICAgICAgb3B0aW9uczogbWFwQmlucyh2YWx1ZSkKICAgICAgICAgIH07CiAgICAgICAgfSkub3JkZXJCeShbJ25hbWUnXSwgWydhc2MnXSkudmFsdWUoKTsKICAgICAgICB2YXIgYmluc1dpdGhvdXRab25lID0gbWFwQmlucyhiaW5Hcm91cHNbMV0pOwogICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7CiAgICAgICAgICBiaW5zOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGJpbnNXaXRoWm9uZSksIF90b0NvbnN1bWFibGVBcnJheShiaW5zV2l0aG91dFpvbmUpKQogICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczMucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICB9KTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfdGhpczMucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZW5kcyBhbGwgY2hhbmdlcyBtYWRlIGJ5IHVzZXIgaW4gdGhpcyBzdGVwIG9mIHN0b2NrIHRyYW5zZmVyIHRvIEFQSSBhbmQgdXBkYXRlcyBkYXRhLgogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAic2F2ZVN0b2NrVHJhbnNmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVTdG9ja1RyYW5zZmVyKGRhdGEsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwogICAgICB2YXIgdXJsID0gIi9vcGVuYm94ZXMvYXBpL3N0b2NrVHJhbnNmZXJzLyIuY29uY2F0KHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnN0b2NrVHJhbnNmZXJJZCk7CiAgICAgIHZhciBwYXlsb2FkID0gcHJlcGFyZVJlcXVlc3QoZGF0YSwgQVBQUk9WRUQpOwogICAgICBhcGlDbGllbnQucHV0KHVybCwgZmxhdHRlblJlcXVlc3QocGF5bG9hZCkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIHN0b2NrVHJhbnNmZXIgPSBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlLmRhdGEuZGF0YSk7CiAgICAgICAgdmFyIHN0b2NrVHJhbnNmZXJJdGVtcyA9IGV4dHJhY3RTdG9ja1RyYW5zZmVySXRlbXMoc3RvY2tUcmFuc2Zlcik7CiAgICAgICAgX3RoaXM0LnNldFN0YXRlKHsKICAgICAgICAgIHN0b2NrVHJhbnNmZXI6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvY2tUcmFuc2ZlciksIHt9LCB7CiAgICAgICAgICAgIHN0b2NrVHJhbnNmZXJJdGVtczogc3RvY2tUcmFuc2Zlckl0ZW1zCiAgICAgICAgICB9KQogICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzNC5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGNhbGxiYWNrKHN0b2NrVHJhbnNmZXIpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzNC5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjaGFuZ2VTdG9ja1RyYW5zZmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VTdG9ja1RyYW5zZmVyKHN0b2NrVHJhbnNmZXIpIHsKICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc3RvY2tUcmFuc2Zlcjogc3RvY2tUcmFuc2ZlcgogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWxldGVJdGVtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVJdGVtKGl0ZW1JbmRleCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKICAgICAgdGhpcy5wcm9wcy5zaG93U3Bpbm5lcigpOwogICAgICB2YXIgaXRlbVRvRGVsZXRlID0gXy5nZXQodGhpcy5zdGF0ZS5zdG9ja1RyYW5zZmVyLnN0b2NrVHJhbnNmZXJJdGVtcywgIlsiLmNvbmNhdChpdGVtSW5kZXgsICJdIikpOwogICAgICBpZiAoaXRlbVRvRGVsZXRlLmlkKSB7CiAgICAgICAgdmFyIHVybCA9ICIvb3BlbmJveGVzL2FwaS9zdG9ja1RyYW5zZmVySXRlbXMvIi5jb25jYXQoaXRlbVRvRGVsZXRlLmlkKTsKICAgICAgICBhcGlDbGllbnRbImRlbGV0ZSJdKHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIHZhciBzdG9ja1RyYW5zZmVyID0gcGFyc2VSZXNwb25zZShyZXNwb25zZS5kYXRhLmRhdGEpOwogICAgICAgICAgdmFyIHN0b2NrVHJhbnNmZXJJdGVtcyA9IGV4dHJhY3RTdG9ja1RyYW5zZmVySXRlbXMoc3RvY2tUcmFuc2Zlcik7CiAgICAgICAgICBfdGhpczUuc2V0U3RhdGUoewogICAgICAgICAgICBzdG9ja1RyYW5zZmVyOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0b2NrVHJhbnNmZXIpLCB7fSwgewogICAgICAgICAgICAgIHN0b2NrVHJhbnNmZXJJdGVtczogc3RvY2tUcmFuc2Zlckl0ZW1zCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczUucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczUucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgc3RvY2tUcmFuc2ZlciA9IHVwZGF0ZSh0aGlzLnN0YXRlLnN0b2NrVHJhbnNmZXIsIHsKICAgICAgICAgIHN0b2NrVHJhbnNmZXJJdGVtczogewogICAgICAgICAgICAkc3BsaWNlOiBbW2l0ZW1JbmRleCwgMV1dCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdmFyIG9yaWdpbmFsSXRlbSA9IF8uZmluZChzdG9ja1RyYW5zZmVyLnN0b2NrVHJhbnNmZXJJdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLmlkID09PSBpdGVtVG9EZWxldGUucmVmZXJlbmNlSWQ7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHNwbGl0SXRlbXMgPSBfLmZpbHRlcihzdG9ja1RyYW5zZmVyLnN0b2NrVHJhbnNmZXJJdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLnJlZmVyZW5jZUlkID09PSBvcmlnaW5hbEl0ZW0uaWQ7CiAgICAgICAgfSk7CiAgICAgICAgaWYgKHNwbGl0SXRlbXMubGVuZ3RoID09PSAwICYmIG9yaWdpbmFsSXRlbSkgewogICAgICAgICAgdmFyIG9yaWdpbmFsSXRlbUluZGV4ID0gXy5maW5kSW5kZXgoc3RvY2tUcmFuc2Zlci5zdG9ja1RyYW5zZmVySXRlbXMsIG9yaWdpbmFsSXRlbSk7CiAgICAgICAgICBzdG9ja1RyYW5zZmVyID0gdXBkYXRlKHN0b2NrVHJhbnNmZXIsIHsKICAgICAgICAgICAgc3RvY2tUcmFuc2Zlckl0ZW1zOiBfZGVmaW5lUHJvcGVydHkoe30sIG9yaWdpbmFsSXRlbUluZGV4LCB7CiAgICAgICAgICAgICAgc3RhdHVzOiB7CiAgICAgICAgICAgICAgICAkc2V0OiAnUEVORElORycKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICBzdG9ja1RyYW5zZmVyOiBzdG9ja1RyYW5zZmVyCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTYXZlIHN0b2NrIHRyYW5zZmVyIGFuZCBnbyB0byBuZXh0IHBhZ2UuCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJuZXh0UGFnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dFBhZ2UoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwogICAgICB0aGlzLnNhdmVTdG9ja1RyYW5zZmVyKHRoaXMuc3RhdGUuc3RvY2tUcmFuc2ZlciwgZnVuY3Rpb24gKHN0b2NrVHJhbnNmZXIpIHsKICAgICAgICBfdGhpczYucHJvcHMubmV4dFBhZ2UoewogICAgICAgICAgc3RvY2tUcmFuc2Zlcjogc3RvY2tUcmFuc2ZlcgogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcmludFN0b2NrVHJhbnNmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByaW50U3RvY2tUcmFuc2ZlcigpIHsKICAgICAgdmFyIHVybCA9ICIvb3BlbmJveGVzL3N0b2NrVHJhbnNmZXIvcHJpbnQvIi5jb25jYXQodGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuc3RvY2tUcmFuc2ZlcklkKTsKICAgICAgdGhpcy5zYXZlU3RvY2tUcmFuc2Zlcih0aGlzLnN0YXRlLnN0b2NrVHJhbnNmZXIsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogR2VuZXJhdGVzIHN0b2NrIHRyYW5zZmVyIHBkZgogICAgICogQHB1YmxpYwogICAgICovCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcwogIH0sIHsKICAgIGtleTogImdlbmVyYXRlU3RvY2tUcmFuc2ZlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVTdG9ja1RyYW5zZmVyKCkgewogICAgICAvLyBUT0RPIGFkZCBpbiBhbm90aGVyIHRpY2tldAogICAgfQogIH0sIHsKICAgIGtleTogInNwbGl0SXRlbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXRJdGVtKHJvdykgewogICAgICB2YXIgaW5kZXggPSByb3cuaW5kZXgsCiAgICAgICAgb3JpZ2luYWwgPSByb3cub3JpZ2luYWw7CiAgICAgIHZhciBuZXdMaW5lID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvcmlnaW5hbCksIHt9LCB7CiAgICAgICAgcmVmZXJlbmNlSWQ6IG9yaWdpbmFsLmlkID8gb3JpZ2luYWwuaWQgOiBvcmlnaW5hbC5yZWZlcmVuY2VJZCwKICAgICAgICBpZDogbnVsbCwKICAgICAgICBzdGF0dXM6IG51bGwKICAgICAgfSk7CiAgICAgIHZhciBzdG9ja1RyYW5zZmVyID0gdXBkYXRlKHRoaXMuc3RhdGUuc3RvY2tUcmFuc2ZlciwgewogICAgICAgIHN0b2NrVHJhbnNmZXJJdGVtczogX2RlZmluZVByb3BlcnR5KHsKICAgICAgICAgIC8vIElmIHNwbGl0dGluZyBub3QgeWV0IGNhbmNlbGVkIGl0ZW0sIHRoZW4gY2FuY2VsIG9yaWdpbmFsIHJvdyBhbmQgYWRkIHR3byBuZXcgc3BsaXQgbGluZXMKICAgICAgICAgIC8vIGVsc2UgaWYgc3BsaXR0aW5nIGFscmVhZHkgQ0FOQ0VMRUQgbGluZSBhZGQgYSBuZXcgbGluZSBvbmNlCiAgICAgICAgICAkc3BsaWNlOiBvcmlnaW5hbC5zdGF0dXMgIT09IENBTkNFTEVEID8gW1tpbmRleCArIDEsIDAsIG5ld0xpbmVdLCBbaW5kZXggKyAxLCAwLCBuZXdMaW5lXV0gOiBbW2luZGV4ICsgMSwgMCwgbmV3TGluZV1dCiAgICAgICAgfSwgaW5kZXgsIHsKICAgICAgICAgICRzZXQ6IG9yaWdpbmFsLmlkID8gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvcmlnaW5hbCksIHt9LCB7CiAgICAgICAgICAgIHN0YXR1czogQ0FOQ0VMRUQsCiAgICAgICAgICAgIHF1YW50aXR5OiAnJwogICAgICAgICAgfSkgOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9yaWdpbmFsKSwge30sIHsKICAgICAgICAgICAgcXVhbnRpdHk6ICcnCiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgIH0pOwogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICBzdG9ja1RyYW5zZmVyOiBzdG9ja1RyYW5zZmVyCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImF1dG9maWxsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhdXRvZmlsbCgpIHsKICAgICAgdmFyIHN0b2NrVHJhbnNmZXIgPSB0aGlzLnN0YXRlLnN0b2NrVHJhbnNmZXI7CiAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgIHN0b2NrVHJhbnNmZXI6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvY2tUcmFuc2ZlciksIHt9LCB7CiAgICAgICAgICBzdG9ja1RyYW5zZmVySXRlbXM6IF8ubWFwKHN0b2NrVHJhbnNmZXIuc3RvY2tUcmFuc2Zlckl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpdGVtKSwge30sIHsKICAgICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eU5vdFBpY2tlZAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNEaXNhYmxlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNEaXNhYmxlZCgpIHsKICAgICAgdmFyIHN0b2NrVHJhbnNmZXJJdGVtcyA9IHRoaXMuc3RhdGUuc3RvY2tUcmFuc2Zlci5zdG9ja1RyYW5zZmVySXRlbXM7CiAgICAgIHJldHVybiBzdG9ja1RyYW5zZmVySXRlbXMgJiYgISFzdG9ja1RyYW5zZmVySXRlbXMuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHZhciBxdWFudGl0eSA9IGl0ZW0ucXVhbnRpdHksCiAgICAgICAgICBxdWFudGl0eU5vdFBpY2tlZCA9IGl0ZW0ucXVhbnRpdHlOb3RQaWNrZWQsCiAgICAgICAgICBzdGF0dXMgPSBpdGVtLnN0YXR1czsKICAgICAgICBpZiAoc3RhdHVzICE9PSAnQ0FOQ0VMRUQnICYmICghcXVhbnRpdHkgfHwgcXVhbnRpdHkgPiBxdWFudGl0eU5vdFBpY2tlZCB8fCBxdWFudGl0eSA8PSAwKSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHZhciBzcGxpdEl0ZW1zID0gXy5maWx0ZXIoc3RvY2tUcmFuc2Zlckl0ZW1zLCBmdW5jdGlvbiAobGluZUl0ZW0pIHsKICAgICAgICAgIHJldHVybiBsaW5lSXRlbS5yZWZlcmVuY2VJZCAmJiBsaW5lSXRlbS5yZWZlcmVuY2VJZCA9PT0gaXRlbS5yZWZlcmVuY2VJZDsKICAgICAgICB9KTsKICAgICAgICBpZiAoIWl0ZW0uaWQgfHwgc3BsaXRJdGVtcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICB2YXIgcXVhbnRpdHlUb1RyYW5zZmVyID0gXy5yZWR1Y2Uoc3BsaXRJdGVtcywgZnVuY3Rpb24gKHN1bSwgdmFsKSB7CiAgICAgICAgICAgIHJldHVybiBzdW0gKyAodmFsLnF1YW50aXR5ID8gXy50b0ludGVnZXIodmFsLnF1YW50aXR5KSA6IDApOwogICAgICAgICAgfSwgMCk7CiAgICAgICAgICBpZiAocXVhbnRpdHlUb1RyYW5zZmVyID4gcXVhbnRpdHlOb3RQaWNrZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwogICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLAogICAgICAgIGNvbHVtbnMgPSBfdGhpcyRzdGF0ZS5jb2x1bW5zLAogICAgICAgIHBpdm90QnkgPSBfdGhpcyRzdGF0ZS5waXZvdEJ5OwogICAgICB2YXIgZXh0cmFQcm9wcyA9IHsKICAgICAgICBwaXZvdEJ5OiBwaXZvdEJ5CiAgICAgIH07CiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgIGNsYXNzTmFtZTogInN0b2NrLXRyYW5zZmVyIgogICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgIGNsYXNzTmFtZTogImQtZmxleCIKICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICBjbGFzc05hbWU6ICJzdWJtaXQtYnV0dG9ucyIKICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzNy5hdXRvZmlsbChfdGhpczcuc3RhdGUuc3RvY2tUcmFuc2Zlcik7CiAgICAgICAgfSwKICAgICAgICBjbGFzc05hbWU6ICJidG4gYnRuLXByaW1hcnkgYnRuLWZvcm0gYnRuLXhzIgogICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LnBhcnRpYWxSZWNlaXZpbmcuYXV0b2ZpbGxRdWFudGl0aWVzLmxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkF1dG9maWxsIHF1YW50aXRpZXMiCiAgICAgIH0pKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZC1mbGV4IG1iLTMganVzdGlmeS1jb250ZW50LWVuZCBzdWJtaXQtYnV0dG9ucyIKICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzNy5zYXZlU3RvY2tUcmFuc2ZlcihfdGhpczcuc3RhdGUuc3RvY2tUcmFuc2Zlcik7CiAgICAgICAgfSwKICAgICAgICBjbGFzc05hbWU6ICJidG4gYnRuLXN1Y2Nlc3MgYnRuLWZvcm0gYnRuLXhzIiwKICAgICAgICBkaXNhYmxlZDogXy5zb21lKHRoaXMuc3RhdGUuc3RvY2tUcmFuc2Zlci5zdG9ja1RyYW5zZmVySXRlbXMsIGZ1bmN0aW9uIChzdG9ja1RyYW5zZmVySXRlbSkgewogICAgICAgICAgcmV0dXJuIHN0b2NrVHJhbnNmZXJJdGVtLnF1YW50aXR5ID4gc3RvY2tUcmFuc2Zlckl0ZW0ucXVhbnRpdHlBdmFpbGFibGU7CiAgICAgICAgfSkKICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiaSIsIHsKICAgICAgICBjbGFzc05hbWU6ICJmYSBmYS1zYXZlIHByLTIiCiAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LmRlZmF1bHQuYnV0dG9uLnNhdmUubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2F2ZSIKICAgICAgfSkpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICBjbGFzc05hbWU6ICJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJ0bi14cyBwLTEgbWwtMyBtYi0xIiwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzNy5wcmludFN0b2NrVHJhbnNmZXIoKTsKICAgICAgICB9CiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZmEgZmEtcHJpbnQgcHItMiIKICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgIGlkOiAicmVhY3Quc3RvY2tUcmFuc2Zlci5nZW5lcmF0ZVN0b2NrVHJhbnNmZXIubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiR2VuZXJhdGUgU3RvY2sgVHJhbnNmZXIiCiAgICAgIH0pKSkpKSwgdGhpcy5zdGF0ZS5zdG9ja1RyYW5zZmVyLnN0b2NrVHJhbnNmZXJJdGVtcyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdFRyZWVUYWJsZSwgX2V4dGVuZHMoewogICAgICAgIGRhdGE6IHRoaXMuc3RhdGUuc3RvY2tUcmFuc2Zlci5zdG9ja1RyYW5zZmVySXRlbXMsCiAgICAgICAgY29sdW1uczogY29sdW1ucywKICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihyKSB7CiAgICAgICAgICBfdGhpczcuc2VsZWN0VGFibGUgPSByOwogICAgICAgIH0sCiAgICAgICAgY2xhc3NOYW1lOiAiLXN0cmlwZWQgLWhpZ2hsaWdodCIKICAgICAgfSwgZXh0cmFQcm9wcywgewogICAgICAgIGRlZmF1bHRQYWdlU2l6ZTogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsCiAgICAgICAgbWluUm93czogMCwKICAgICAgICBzaG93UGFnaW5hdGlvbkJvdHRvbTogZmFsc2UsCiAgICAgICAgZmlsdGVyYWJsZTogdHJ1ZSwKICAgICAgICBkZWZhdWx0RmlsdGVyTWV0aG9kOiB0aGlzLmZpbHRlck1ldGhvZAogICAgICB9KSkgOiBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgIGNsYXNzTmFtZTogInN1Ym1pdC1idXR0b25zIgogICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiYnV0dG9uIiwgewogICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXM3Lm5leHRQYWdlKCk7CiAgICAgICAgfSwKICAgICAgICBkaXNhYmxlZDogdGhpcy5pc0Rpc2FibGVkKCksCiAgICAgICAgY2xhc3NOYW1lOiAiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLWZvcm0gZmxvYXQtcmlnaHQgYnRuLXhzIgogICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICBpZDogInJlYWN0LmRlZmF1bHQuYnV0dG9uLm5leHQubGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTmV4dCIKICAgICAgfSkpKSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBTdG9ja1RyYW5zZmVyU2Vjb25kUGFnZTsKfShDb21wb25lbnQpOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7CiAgcmV0dXJuIHsKICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlV2l0aERlZmF1bHRNZXNzYWdlKGdldFRyYW5zbGF0ZShzdGF0ZS5sb2NhbGl6ZSkpLAogICAgc3RvY2tUcmFuc2ZlclRyYW5zbGF0aW9uc0ZldGNoZWQ6IHN0YXRlLnNlc3Npb24uZmV0Y2hlZFRyYW5zbGF0aW9ucy5zdG9ja1RyYW5zZmVyCiAgfTsKfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHsKICBzaG93U3Bpbm5lcjogc2hvd1NwaW5uZXIsCiAgaGlkZVNwaW5uZXI6IGhpZGVTcGlubmVyCn0pKFN0b2NrVHJhbnNmZXJTZWNvbmRQYWdlKTsKU3RvY2tUcmFuc2ZlclNlY29uZFBhZ2UucHJvcFR5cGVzID0gewogIC8qKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiBkYXRhIGlzIGxvYWRpbmcgKi8KICBzaG93U3Bpbm5lcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICAvKiogRnVuY3Rpb24gY2FsbGVkIHdoZW4gZGF0YSBoYXMgbG9hZGVkICovCiAgaGlkZVNwaW5uZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgLyoqIEZ1bmN0aW9uIHRha2luZyB1c2VyIHRvIHRoZSBuZXh0IHBhZ2UgKi8KICBuZXh0UGFnZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICAvKiogRnVuY3Rpb24gdGFraW5nIHVzZXIgdG8gdGhlIHByZXZpb3VzIHBhZ2UgKi8KICB0cmFuc2xhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgLyoqIEFsbCBzdG9jayB0cmFuc2ZlcidzIGRhdGEgKi8KICBpbml0aWFsVmFsdWVzOiBQcm9wVHlwZXMuc2hhcGUoewogICAgc3RvY2tUcmFuc2ZlcjogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHt9KSkKICB9KS5pc1JlcXVpcmVkLAogIG1hdGNoOiBQcm9wVHlwZXMuc2hhcGUoewogICAgcGFyYW1zOiBQcm9wVHlwZXMuc2hhcGUoewogICAgICBzdG9ja1RyYW5zZmVySWQ6IFByb3BUeXBlcy5zdHJpbmcKICAgIH0pCiAgfSkuaXNSZXF1aXJlZCwKICAvKiogTG9jYXRpb24gKGN1cnJlbnRseSBjaG9zZW4pLiBUbyBiZSB1c2VkIGluIGludGVybmFsTG9jYXRpb25zIGFuZCBzdG9jayB0cmFuc2ZlciByZXF1ZXN0cy4gKi8KICBsb2NhdGlvbjogUHJvcFR5cGVzLnNoYXBlKHsKICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nCiAgfSkuaXNSZXF1aXJlZCwKICBzdG9ja1RyYW5zZmVyVHJhbnNsYXRpb25zRmV0Y2hlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZAp9Ow=="},null]}