{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/combined-shipments/AddItemsPage.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/combined-shipments/AddItemsPage.jsx","mtime":1698037749000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCAicHJvdG90eXBlIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWQiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQppbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnOwppbXBvcnQgYXJyYXlNdXRhdG9ycyBmcm9tICdmaW5hbC1mb3JtLWFycmF5cyc7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCBmaWxlRG93bmxvYWQgZnJvbSAnanMtZmlsZS1kb3dubG9hZCc7CmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJzsKaW1wb3J0IHsgY29uZmlybUFsZXJ0IH0gZnJvbSAncmVhY3QtY29uZmlybS1hbGVydCc7CmltcG9ydCB7IEZvcm0gfSBmcm9tICdyZWFjdC1maW5hbC1mb3JtJzsKaW1wb3J0IHsgZ2V0VHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtbG9jYWxpemUtcmVkdXgnOwppbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnOwppbXBvcnQgQWxlcnQgZnJvbSAncmVhY3Qtcy1hbGVydCc7CmltcG9ydCB7IGZldGNoVXNlcnMsIGhpZGVTcGlubmVyLCBzaG93U3Bpbm5lciB9IGZyb20gJ2FjdGlvbnMnOwppbXBvcnQgQXJyYXlGaWVsZCBmcm9tICdjb21wb25lbnRzL2Zvcm0tZWxlbWVudHMvQXJyYXlGaWVsZCc7CmltcG9ydCBCdXR0b25GaWVsZCBmcm9tICdjb21wb25lbnRzL2Zvcm0tZWxlbWVudHMvQnV0dG9uRmllbGQnOwppbXBvcnQgRGF0ZUZpZWxkIGZyb20gJ2NvbXBvbmVudHMvZm9ybS1lbGVtZW50cy9EYXRlRmllbGQnOwppbXBvcnQgTGFiZWxGaWVsZCBmcm9tICdjb21wb25lbnRzL2Zvcm0tZWxlbWVudHMvTGFiZWxGaWVsZCc7CmltcG9ydCBQcm9kdWN0U2VsZWN0RmllbGQgZnJvbSAnY29tcG9uZW50cy9mb3JtLWVsZW1lbnRzL1Byb2R1Y3RTZWxlY3RGaWVsZCc7CmltcG9ydCBTZWxlY3RGaWVsZCBmcm9tICdjb21wb25lbnRzL2Zvcm0tZWxlbWVudHMvU2VsZWN0RmllbGQnOwppbXBvcnQgVGV4dEZpZWxkIGZyb20gJ2NvbXBvbmVudHMvZm9ybS1lbGVtZW50cy9UZXh0RmllbGQnOwppbXBvcnQgQ29tYmluZWRTaGlwbWVudEl0ZW1zTW9kYWwgZnJvbSAnY29tcG9uZW50cy9zdG9jay1tb3ZlbWVudC13aXphcmQvbW9kYWxzL0NvbWJpbmVkU2hpcG1lbnRJdGVtc01vZGFsJzsKaW1wb3J0IEFsZXJ0TWVzc2FnZSBmcm9tICd1dGlscy9BbGVydE1lc3NhZ2UnOwppbXBvcnQgYXBpQ2xpZW50IGZyb20gJ3V0aWxzL2FwaUNsaWVudCc7CmltcG9ydCB7IHJlbmRlckZvcm1GaWVsZCB9IGZyb20gJ3V0aWxzL2Zvcm0tdXRpbHMnOwppbXBvcnQgeyBkZWJvdW5jZVByb2R1Y3RzRmV0Y2ggfSBmcm9tICd1dGlscy9vcHRpb24tdXRpbHMnOwppbXBvcnQgVHJhbnNsYXRlLCB7IHRyYW5zbGF0ZVdpdGhEZWZhdWx0TWVzc2FnZSB9IGZyb20gJ3V0aWxzL1RyYW5zbGF0ZSc7CmltcG9ydCAncmVhY3QtY29uZmlybS1hbGVydC9zcmMvcmVhY3QtY29uZmlybS1hbGVydC5jc3MnOwp2YXIgREVMRVRFX0JVVFRPTl9GSUVMRCA9IHsKICB0eXBlOiBCdXR0b25GaWVsZCwKICBsYWJlbDogJ3JlYWN0LmRlZmF1bHQuYnV0dG9uLmRlbGV0ZS5sYWJlbCcsCiAgZGVmYXVsdE1lc3NhZ2U6ICdEZWxldGUnLAogIGZsZXhXaWR0aDogJzEnLAogIGZpZWxkS2V5OiAnJywKICBidXR0b25MYWJlbDogJ3JlYWN0LmRlZmF1bHQuYnV0dG9uLmRlbGV0ZS5sYWJlbCcsCiAgYnV0dG9uRGVmYXVsdE1lc3NhZ2U6ICdEZWxldGUnLAogIGdldER5bmFtaWNBdHRyOiBmdW5jdGlvbiBnZXREeW5hbWljQXR0cihfcmVmKSB7CiAgICB2YXIgZmllbGRWYWx1ZSA9IF9yZWYuZmllbGRWYWx1ZSwKICAgICAgcmVtb3ZlSXRlbSA9IF9yZWYucmVtb3ZlSXRlbSwKICAgICAgcmVtb3ZlUm93ID0gX3JlZi5yZW1vdmVSb3csCiAgICAgIHVwZGF0ZVRvdGFsQ291bnQgPSBfcmVmLnVwZGF0ZVRvdGFsQ291bnQ7CiAgICByZXR1cm4gewogICAgICBvbkNsaWNrOiBmaWVsZFZhbHVlICYmIGZpZWxkVmFsdWUuaWQgPyBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmVtb3ZlSXRlbShmaWVsZFZhbHVlLmlkKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlbW92ZVJvdygpOwogICAgICAgICAgdXBkYXRlVG90YWxDb3VudCgtMSk7CiAgICAgICAgfSk7CiAgICAgIH0gOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdXBkYXRlVG90YWxDb3VudCgtMSk7CiAgICAgICAgcmVtb3ZlUm93KCk7CiAgICAgIH0sCiAgICAgIGRpc2FibGVkOiBmaWVsZFZhbHVlICYmIGZpZWxkVmFsdWUuc3RhdHVzQ29kZSA9PT0gJ1NVQlNUSVRVVEVEJwogICAgfTsKICB9LAogIGF0dHJpYnV0ZXM6IHsKICAgIGNsYXNzTmFtZTogJ2J0biBidG4tb3V0bGluZS1kYW5nZXInCiAgfQp9Owp2YXIgRklFTERTID0gewogIGxpbmVJdGVtczogewogICAgdHlwZTogQXJyYXlGaWVsZCwKICAgIGFycm93c05hdmlnYXRpb246IHRydWUsCiAgICB2aXJ0dWFsaXplZDogdHJ1ZSwKICAgIHRvdGFsQ291bnQ6IGZ1bmN0aW9uIHRvdGFsQ291bnQoX3JlZjIpIHsKICAgICAgdmFyIF90b3RhbENvdW50ID0gX3JlZjIudG90YWxDb3VudDsKICAgICAgcmV0dXJuIF90b3RhbENvdW50OwogICAgfSwKICAgIGlzUm93TG9hZGVkOiBmdW5jdGlvbiBpc1Jvd0xvYWRlZChfcmVmMykgewogICAgICB2YXIgX2lzUm93TG9hZGVkID0gX3JlZjMuaXNSb3dMb2FkZWQ7CiAgICAgIHJldHVybiBfaXNSb3dMb2FkZWQ7CiAgICB9LAogICAgbG9hZE1vcmVSb3dzOiBmdW5jdGlvbiBsb2FkTW9yZVJvd3MoX3JlZjQpIHsKICAgICAgdmFyIF9sb2FkTW9yZVJvd3MgPSBfcmVmNC5sb2FkTW9yZVJvd3M7CiAgICAgIHJldHVybiBfbG9hZE1vcmVSb3dzKCk7CiAgICB9LAogICAgaXNGaXJzdFBhZ2VMb2FkZWQ6IGZ1bmN0aW9uIGlzRmlyc3RQYWdlTG9hZGVkKF9yZWY1KSB7CiAgICAgIHZhciBfaXNGaXJzdFBhZ2VMb2FkZWQgPSBfcmVmNS5pc0ZpcnN0UGFnZUxvYWRlZDsKICAgICAgcmV0dXJuIF9pc0ZpcnN0UGFnZUxvYWRlZDsKICAgIH0sCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlcwogICAgYWRkQnV0dG9uOiBmdW5jdGlvbiBhZGRCdXR0b24oX3JlZjYpIHsKICAgICAgdmFyIHZhbHVlcyA9IF9yZWY2LnZhbHVlcywKICAgICAgICBvblJlc3BvbnNlID0gX3JlZjYub25SZXNwb25zZSwKICAgICAgICBzYXZlSXRlbXMgPSBfcmVmNi5zYXZlSXRlbXMsCiAgICAgICAgaW52YWxpZCA9IF9yZWY2LmludmFsaWQ7CiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21iaW5lZFNoaXBtZW50SXRlbXNNb2RhbCwgewogICAgICAgIHNoaXBtZW50OiB2YWx1ZXMuc3RvY2tNb3ZlbWVudElkLAogICAgICAgIHZlbmRvcjogdmFsdWVzLm9yaWdpbi5pZCwKICAgICAgICBkZXN0aW5hdGlvbjogdmFsdWVzLmRlc3RpbmF0aW9uLmlkLAogICAgICAgIG9uUmVzcG9uc2U6IG9uUmVzcG9uc2UsCiAgICAgICAgYnRuT3BlblRleHQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5hZGRMaW5lcy5sYWJlbCIsCiAgICAgICAgYnRuT3BlbkRlZmF1bHRUZXh0OiAiQWRkIGxpbmVzIiwKICAgICAgICBvbk9wZW46IGZ1bmN0aW9uIG9uT3BlbigpIHsKICAgICAgICAgIHJldHVybiBzYXZlSXRlbXModmFsdWVzLmxpbmVJdGVtcyk7CiAgICAgICAgfSwKICAgICAgICBidG5PcGVuRGlzYWJsZWQ6IGludmFsaWQKICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgaWQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5hZGRMaW5lLmxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkFkZCBsaW5lIgogICAgICB9KSk7CiAgICB9LAogICAgZmllbGRzOiB7CiAgICAgIG9yZGVyTnVtYmVyOiB7CiAgICAgICAgdHlwZTogTGFiZWxGaWVsZCwKICAgICAgICBsYWJlbDogJ3JlYWN0LnN0b2NrTW92ZW1lbnQub3JkZXJOdW1iZXIubGFiZWwnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnT3JkZXIgbnVtYmVyJywKICAgICAgICBmbGV4V2lkdGg6ICcxJywKICAgICAgICBmaWVsZEtleTogJycsCiAgICAgICAgZ2V0RHluYW1pY0F0dHI6IGZ1bmN0aW9uIGdldER5bmFtaWNBdHRyKF9yZWY3KSB7CiAgICAgICAgICB2YXIgZmllbGRWYWx1ZSA9IF9yZWY3LmZpZWxkVmFsdWU7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB1cmw6IGZpZWxkVmFsdWUgJiYgZmllbGRWYWx1ZS5vcmRlcklkID8gIi9vcGVuYm94ZXMvb3JkZXIvc2hvdy8iLmNvbmNhdChmaWVsZFZhbHVlLm9yZGVySWQpIDogJycKICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgICBmb3JtYXRWYWx1ZTogZnVuY3Rpb24gZm9ybWF0VmFsdWUoZmllbGRWYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSAmJiBmaWVsZFZhbHVlLm9yZGVyTnVtYmVyOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgcHJvZHVjdDogewogICAgICAgIHR5cGU6IFByb2R1Y3RTZWxlY3RGaWVsZCwKICAgICAgICBsYWJlbDogJ3JlYWN0LnN0b2NrTW92ZW1lbnQucHJvZHVjdC5sYWJlbCcsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdQcm9kdWN0JywKICAgICAgICBoZWFkZXJBbGlnbjogJ2xlZnQnLAogICAgICAgIGZsZXhXaWR0aDogJzQnLAogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIHNob3dTZWxlY3RlZE9wdGlvbkNvbG9yOiB0cnVlLAogICAgICAgICAgc2hvd1ZhbHVlVG9vbHRpcDogdHJ1ZSwKICAgICAgICAgIGRpc2FibGVkOiB0cnVlCiAgICAgICAgfQogICAgICB9LAogICAgICBsb3ROdW1iZXI6IHsKICAgICAgICB0eXBlOiBUZXh0RmllbGQsCiAgICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LmxvdC5sYWJlbCcsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMb3QnLAogICAgICAgIGZsZXhXaWR0aDogJzEnLAogICAgICAgIGdldER5bmFtaWNBdHRyOiBmdW5jdGlvbiBnZXREeW5hbWljQXR0cihfcmVmOCkgewogICAgICAgICAgdmFyIHJvd0luZGV4ID0gX3JlZjgucm93SW5kZXgsCiAgICAgICAgICAgIHZhbHVlcyA9IF9yZWY4LnZhbHVlcywKICAgICAgICAgICAgdXBkYXRlUm93ID0gX3JlZjgudXBkYXRlUm93OwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVJvdyh2YWx1ZXMsIHJvd0luZGV4KTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGV4cGlyYXRpb25EYXRlOiB7CiAgICAgICAgdHlwZTogRGF0ZUZpZWxkLAogICAgICAgIGxhYmVsOiAncmVhY3Quc3RvY2tNb3ZlbWVudC5leHBpcnkubGFiZWwnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXhwaXJ5JywKICAgICAgICBmbGV4V2lkdGg6ICcxLjUnLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIGRhdGVGb3JtYXQ6ICdNTS9ERC9ZWVlZJywKICAgICAgICAgIGF1dG9Db21wbGV0ZTogJ29mZicsCiAgICAgICAgICBwbGFjZWhvbGRlclRleHQ6ICdNTS9ERC9ZWVlZJwogICAgICAgIH0sCiAgICAgICAgZ2V0RHluYW1pY0F0dHI6IGZ1bmN0aW9uIGdldER5bmFtaWNBdHRyKF9yZWY5KSB7CiAgICAgICAgICB2YXIgcm93SW5kZXggPSBfcmVmOS5yb3dJbmRleCwKICAgICAgICAgICAgdmFsdWVzID0gX3JlZjkudmFsdWVzLAogICAgICAgICAgICB1cGRhdGVSb3cgPSBfcmVmOS51cGRhdGVSb3c7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUm93KHZhbHVlcywgcm93SW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgcXVhbnRpdHlSZXF1ZXN0ZWQ6IHsKICAgICAgICB0eXBlOiBUZXh0RmllbGQsCiAgICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LnF1YW50aXR5LmxhYmVsJywKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1F0eScsCiAgICAgICAgZmxleFdpZHRoOiAnMScsCiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgdHlwZTogJ251bWJlcicsCiAgICAgICAgICBzaG93RXJyb3I6IHRydWUKICAgICAgICB9LAogICAgICAgIGdldER5bmFtaWNBdHRyOiBmdW5jdGlvbiBnZXREeW5hbWljQXR0cihfcmVmMTApIHsKICAgICAgICAgIHZhciByb3dJbmRleCA9IF9yZWYxMC5yb3dJbmRleCwKICAgICAgICAgICAgdmFsdWVzID0gX3JlZjEwLnZhbHVlcywKICAgICAgICAgICAgdXBkYXRlUm93ID0gX3JlZjEwLnVwZGF0ZVJvdzsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKCkgewogICAgICAgICAgICAgIHJldHVybiB1cGRhdGVSb3codmFsdWVzLCByb3dJbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9LAogICAgICBwYWxsZXROYW1lOiB7CiAgICAgICAgdHlwZTogVGV4dEZpZWxkLAogICAgICAgIGxhYmVsOiAncmVhY3Quc3RvY2tNb3ZlbWVudC5wYWNrTGV2ZWwxLmxhYmVsJywKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1BhY2sgbGV2ZWwgMScsCiAgICAgICAgZmxleFdpZHRoOiAnMScsCiAgICAgICAgZ2V0RHluYW1pY0F0dHI6IGZ1bmN0aW9uIGdldER5bmFtaWNBdHRyKF9yZWYxMSkgewogICAgICAgICAgdmFyIHJvd0luZGV4ID0gX3JlZjExLnJvd0luZGV4LAogICAgICAgICAgICByb3dDb3VudCA9IF9yZWYxMS5yb3dDb3VudCwKICAgICAgICAgICAgdmFsdWVzID0gX3JlZjExLnZhbHVlcywKICAgICAgICAgICAgdXBkYXRlUm93ID0gX3JlZjExLnVwZGF0ZVJvdzsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGF1dG9Gb2N1czogcm93SW5kZXggPT09IHJvd0NvdW50IC0gMSwKICAgICAgICAgICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVJvdyh2YWx1ZXMsIHJvd0luZGV4KTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJveE5hbWU6IHsKICAgICAgICB0eXBlOiBUZXh0RmllbGQsCiAgICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LnBhY2tMZXZlbDIubGFiZWwnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUGFjayBsZXZlbCAyJywKICAgICAgICBmbGV4V2lkdGg6ICcxJywKICAgICAgICBnZXREeW5hbWljQXR0cjogZnVuY3Rpb24gZ2V0RHluYW1pY0F0dHIoX3JlZjEyKSB7CiAgICAgICAgICB2YXIgcm93SW5kZXggPSBfcmVmMTIucm93SW5kZXgsCiAgICAgICAgICAgIHZhbHVlcyA9IF9yZWYxMi52YWx1ZXMsCiAgICAgICAgICAgIHVwZGF0ZVJvdyA9IF9yZWYxMi51cGRhdGVSb3c7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUm93KHZhbHVlcywgcm93SW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgcmVjaXBpZW50OiB7CiAgICAgICAgdHlwZTogU2VsZWN0RmllbGQsCiAgICAgICAgbGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LnJlY2lwaWVudC5sYWJlbCcsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSZWNpcGllbnQnLAogICAgICAgIGZsZXhXaWR0aDogJzEuNScsCiAgICAgICAgZ2V0RHluYW1pY0F0dHI6IGZ1bmN0aW9uIGdldER5bmFtaWNBdHRyKF9yZWYxMykgewogICAgICAgICAgdmFyIHJlY2lwaWVudHMgPSBfcmVmMTMucmVjaXBpZW50cywKICAgICAgICAgICAgcm93SW5kZXggPSBfcmVmMTMucm93SW5kZXgsCiAgICAgICAgICAgIHZhbHVlcyA9IF9yZWYxMy52YWx1ZXMsCiAgICAgICAgICAgIHVwZGF0ZVJvdyA9IF9yZWYxMy51cGRhdGVSb3c7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBvcHRpb25zOiByZWNpcGllbnRzLAogICAgICAgICAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUm93KHZhbHVlcywgcm93SW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgbGFiZWxLZXk6ICduYW1lJywKICAgICAgICAgIG9wZW5PbkNsaWNrOiBmYWxzZQogICAgICAgIH0KICAgICAgfSwKICAgICAgc3BsaXQ6IHsKICAgICAgICB0eXBlOiBCdXR0b25GaWVsZCwKICAgICAgICBsYWJlbDogJ3JlYWN0LnN0b2NrTW92ZW1lbnQuc3BsaXRMaW5lLmxhYmVsJywKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NwbGl0JywKICAgICAgICBmbGV4V2lkdGg6ICcxJywKICAgICAgICBmaWVsZEtleTogJycsCiAgICAgICAgYnV0dG9uTGFiZWw6ICdyZWFjdC5zdG9ja01vdmVtZW50LnNwbGl0TGluZS5sYWJlbCcsCiAgICAgICAgYnV0dG9uRGVmYXVsdE1lc3NhZ2U6ICdTcGxpdCBsaW5lJywKICAgICAgICBnZXREeW5hbWljQXR0cjogZnVuY3Rpb24gZ2V0RHluYW1pY0F0dHIoX3JlZjE0KSB7CiAgICAgICAgICB2YXIgZmllbGRWYWx1ZSA9IF9yZWYxNC5maWVsZFZhbHVlLAogICAgICAgICAgICBhZGRSb3cgPSBfcmVmMTQuYWRkUm93LAogICAgICAgICAgICByb3dJbmRleCA9IF9yZWYxNC5yb3dJbmRleCwKICAgICAgICAgICAgdXBkYXRlVG90YWxDb3VudCA9IF9yZWYxNC51cGRhdGVUb3RhbENvdW50OwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICB1cGRhdGVUb3RhbENvdW50KDEpOwogICAgICAgICAgICAgIGFkZFJvdyh7CiAgICAgICAgICAgICAgICBwcm9kdWN0OiBmaWVsZFZhbHVlLnByb2R1Y3QsCiAgICAgICAgICAgICAgICByZWNpcGllbnQ6IGZpZWxkVmFsdWUucmVjaXBpZW50LAogICAgICAgICAgICAgICAgc29ydE9yZGVyOiBmaWVsZFZhbHVlLnNvcnRPcmRlciArIDEsCiAgICAgICAgICAgICAgICBvcmRlckl0ZW1JZDogZmllbGRWYWx1ZS5vcmRlckl0ZW1JZCwKICAgICAgICAgICAgICAgIHJlZmVyZW5jZUlkOiBmaWVsZFZhbHVlLm9yZGVySXRlbUlkLAogICAgICAgICAgICAgICAgb3JkZXJOdW1iZXI6IGZpZWxkVmFsdWUub3JkZXJOdW1iZXIsCiAgICAgICAgICAgICAgICBwYWNrU2l6ZTogZmllbGRWYWx1ZS5wYWNrU2l6ZSwKICAgICAgICAgICAgICAgIHF1YW50aXR5QXZhaWxhYmxlOiBmaWVsZFZhbHVlLnF1YW50aXR5QXZhaWxhYmxlCiAgICAgICAgICAgICAgfSwgcm93SW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgY2xhc3NOYW1lOiAnYnRuIGJ0bi1vdXRsaW5lLXN1Y2Nlc3MnCiAgICAgICAgfQogICAgICB9LAogICAgICBkZWxldGVCdXR0b246IERFTEVURV9CVVRUT05fRklFTEQKICAgIH0KICB9Cn07CnZhciBMT1RfQU5EX0VYUElSWV9FUlJPUiA9ICdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLmxvdEFuZEV4cGlyeUNvbnRyb2wubGFiZWwnOwoKLyogZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFsiZXJyb3IiLHsgImV4Y2VwdE1ldGhvZHMiOiBbImdldExpbmVJdGVtc1RvQmVTYXZlZCJdIH1dICovCi8qKgogKiBUaGUgc2Vjb25kIHN0ZXAgb2Ygc3RvY2sgbW92ZW1lbnQgd2hlcmUgdXNlciBjYW4gYWRkIGl0ZW1zIHRvIHN0b2NrIGxpc3QuCiAqIFRoaXMgY29tcG9uZW50IHN1cHBvcnRzIHRocmVlIGRpZmZlcmVudCBjYXNlczogd2l0aCBvciB3aXRob3V0IHN0b2NrbGlzdAogKiB3aGVuIG1vdmVtZW50IGlzIGZyb20gYSBkZXBvdCBhbmQgd2hlbiBtb3ZlbWVudCBpcyBmcm9tIGEgdmVuZG9yLgogKi8KdmFyIEFkZEl0ZW1zUGFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhBZGRJdGVtc1BhZ2UsIF9Db21wb25lbnQpOwogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQWRkSXRlbXNQYWdlKTsKICBmdW5jdGlvbiBBZGRJdGVtc1BhZ2UocHJvcHMpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBZGRJdGVtc1BhZ2UpOwogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7CiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJkYXRhRmV0Y2hlZCIsIGZhbHNlKTsKICAgIF90aGlzLnN0YXRlID0gewogICAgICB2YWx1ZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlcyksIHt9LCB7CiAgICAgICAgbGluZUl0ZW1zOiBbXQogICAgICB9KSwKICAgICAgdG90YWxDb3VudDogMCwKICAgICAgaXNGaXJzdFBhZ2VMb2FkZWQ6IGZhbHNlLAogICAgICBzaG93QWxlcnQ6IGZhbHNlLAogICAgICBhbGVydE1lc3NhZ2U6ICcnCiAgICB9OwogICAgX3RoaXMucHJvcHMuc2hvd1NwaW5uZXIoKTsKICAgIF90aGlzLmNvbmZpcm1TYXZlID0gX3RoaXMuY29uZmlybVNhdmUuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7CiAgICBfdGhpcy52YWxpZGF0ZSA9IF90aGlzLnZhbGlkYXRlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOwogICAgX3RoaXMudmFsaWRhdGVXaXRoQWxlcnRNZXNzYWdlID0gX3RoaXMudmFsaWRhdGVXaXRoQWxlcnRNZXNzYWdlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOwogICAgX3RoaXMuaXNWYWxpZEZvclNhdmUgPSBfdGhpcy5pc1ZhbGlkRm9yU2F2ZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIF90aGlzLmlzUm93TG9hZGVkID0gX3RoaXMuaXNSb3dMb2FkZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7CiAgICBfdGhpcy5sb2FkTW9yZVJvd3MgPSBfdGhpcy5sb2FkTW9yZVJvd3MuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7CiAgICBfdGhpcy51cGRhdGVUb3RhbENvdW50ID0gX3RoaXMudXBkYXRlVG90YWxDb3VudC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIF90aGlzLnVwZGF0ZVJvdyA9IF90aGlzLnVwZGF0ZVJvdy5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIF90aGlzLnJlbW92ZUl0ZW0gPSBfdGhpcy5yZW1vdmVJdGVtLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOwogICAgX3RoaXMuZmV0Y2hMaW5lSXRlbXMgPSBfdGhpcy5mZXRjaExpbmVJdGVtcy5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIF90aGlzLnNhdmVSZXF1aXNpdGlvbkl0ZW1zSW5DdXJyZW50U3RlcCA9IF90aGlzLnNhdmVSZXF1aXNpdGlvbkl0ZW1zSW5DdXJyZW50U3RlcC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIF90aGlzLmltcG9ydFRlbXBsYXRlID0gX3RoaXMuaW1wb3J0VGVtcGxhdGUuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7CiAgICBfdGhpcy50b2dnbGVEcm9wZG93biA9IF90aGlzLnRvZ2dsZURyb3Bkb3duLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOwogICAgX3RoaXMuZGVib3VuY2VkUHJvZHVjdHNGZXRjaCA9IGRlYm91bmNlUHJvZHVjdHNGZXRjaChfdGhpcy5wcm9wcy5kZWJvdW5jZVRpbWUsIF90aGlzLnByb3BzLm1pblNlYXJjaExlbmd0aCwgX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlcy5vcmlnaW4uaWQpOwogICAgcmV0dXJuIF90aGlzOwogIH0KICBfY3JlYXRlQ2xhc3MoQWRkSXRlbXNQYWdlLCBbewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICBpZiAodGhpcy5wcm9wcy5zdG9ja01vdmVtZW50VHJhbnNsYXRpb25zRmV0Y2hlZCkgewogICAgICAgIHRoaXMuZGF0YUZldGNoZWQgPSB0cnVlOwogICAgICAgIHRoaXMuZmV0Y2hBbGxEYXRhKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykgewogICAgICBpZiAobmV4dFByb3BzLnN0b2NrTW92ZW1lbnRUcmFuc2xhdGlvbnNGZXRjaGVkICYmICF0aGlzLmRhdGFGZXRjaGVkKSB7CiAgICAgICAgdGhpcy5kYXRhRmV0Y2hlZCA9IHRydWU7CiAgICAgICAgdGhpcy5mZXRjaEFsbERhdGEoKTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBuZXcgc3RvY2sgbW92ZW1lbnQncyBpdGVtcyBhbmQgaXRlbXMgdG8gYmUKICAgICAqIHVwZGF0ZWQgKGNvbXBhcmluZyB0byBwcmV2aW91cyBzdGF0ZSBvZiBsaW5lIGl0ZW1zKS4KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsaW5lSXRlbXMKICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogImdldExpbmVJdGVtc1RvQmVTYXZlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGluZUl0ZW1zVG9CZVNhdmVkKGxpbmVJdGVtcykgewogICAgICB2YXIgaXRlbXMgPSBBZGRJdGVtc1BhZ2UudXBkYXRlU29ydE9yZGVyKGxpbmVJdGVtcyk7CiAgICAgIHJldHVybiBfLm1hcChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgaWQ6IGl0ZW0uaWQgfHwgbnVsbCwKICAgICAgICAgICdwcm9kdWN0LmlkJzogaXRlbS5wcm9kdWN0LmlkLAogICAgICAgICAgcXVhbnRpdHlSZXF1ZXN0ZWQ6IGl0ZW0ucXVhbnRpdHlSZXF1ZXN0ZWQsCiAgICAgICAgICBwYWxsZXROYW1lOiBpdGVtLnBhbGxldE5hbWUsCiAgICAgICAgICBib3hOYW1lOiBpdGVtLmJveE5hbWUsCiAgICAgICAgICBsb3ROdW1iZXI6IGl0ZW0ubG90TnVtYmVyLAogICAgICAgICAgZXhwaXJhdGlvbkRhdGU6IGl0ZW0uZXhwaXJhdGlvbkRhdGUsCiAgICAgICAgICAncmVjaXBpZW50LmlkJzogXy5pc09iamVjdChpdGVtLnJlY2lwaWVudCkgPyBpdGVtLnJlY2lwaWVudC5pZCB8fCAnJyA6IGl0ZW0ucmVjaXBpZW50IHx8ICcnLAogICAgICAgICAgc29ydE9yZGVyOiBpdGVtLnNvcnRPcmRlciwKICAgICAgICAgIG9yZGVySXRlbUlkOiBpdGVtLm9yZGVySXRlbUlkCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0TGluZUl0ZW1zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMaW5lSXRlbXMocmVzcG9uc2UsIHN0YXJ0SW5kZXgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhOwogICAgICB2YXIgbGluZUl0ZW1zRGF0YSA9IF8ubWFwKGRhdGEsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2YWwpLCB7fSwgewogICAgICAgICAgZGlzYWJsZWQ6IHRydWUsCiAgICAgICAgICByZWZlcmVuY2VJZDogdmFsLm9yZGVySXRlbUlkCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICB2YWx1ZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5zdGF0ZS52YWx1ZXMpLCB7fSwgewogICAgICAgICAgbGluZUl0ZW1zOiB0aGlzLnByb3BzLmlzUGFnaW5hdGVkICYmICFfLmlzTnVsbChzdGFydEluZGV4KSA/IF8udW5pcUJ5KF8uY29uY2F0KHRoaXMuc3RhdGUudmFsdWVzLmxpbmVJdGVtcywgbGluZUl0ZW1zRGF0YSksICdpZCcpIDogbGluZUl0ZW1zRGF0YQogICAgICAgIH0pCiAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoIV8uaXNOdWxsKHN0YXJ0SW5kZXgpICYmIF90aGlzMi5zdGF0ZS52YWx1ZXMubGluZUl0ZW1zLmxlbmd0aCAhPT0gX3RoaXMyLnN0YXRlLnRvdGFsQ291bnQpIHsKICAgICAgICAgIF90aGlzMi5sb2FkTW9yZVJvd3MoewogICAgICAgICAgICBzdGFydEluZGV4OiBzdGFydEluZGV4ICsgX3RoaXMyLnByb3BzLnBhZ2VTaXplCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgX3RoaXMyLnByb3BzLmhpZGVTcGlubmVyKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInVwZGF0ZVRvdGFsQ291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRvdGFsQ291bnQodmFsdWUpIHsKICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgdG90YWxDb3VudDogdGhpcy5zdGF0ZS50b3RhbENvdW50ICsgdmFsdWUKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidXBkYXRlUm93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVSb3codmFsdWVzLCBpbmRleCkgewogICAgICB2YXIgaXRlbSA9IHZhbHVlcy5saW5lSXRlbXNbaW5kZXhdOwogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICB2YWx1ZXM6IHVwZGF0ZSh2YWx1ZXMsIHsKICAgICAgICAgIGxpbmVJdGVtczogX2RlZmluZVByb3BlcnR5KHt9LCBpbmRleCwgewogICAgICAgICAgICAkc2V0OiBpdGVtCiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInZhbGlkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZXMsIGlnbm9yZUxvdEFuZEV4cGlyeSkgewogICAgICB2YXIgZXJyb3JzID0ge307CiAgICAgIGVycm9ycy5saW5lSXRlbXMgPSBbXTsKICAgICAgdmFyIGRhdGUgPSBtb21lbnQodGhpcy5wcm9wcy5taW5pbXVtRXhwaXJhdGlvbkRhdGUsICdNTS9ERC9ZWVlZJyk7CiAgICAgIF8uZm9yRWFjaCh2YWx1ZXMubGluZUl0ZW1zLCBmdW5jdGlvbiAoaXRlbSwga2V5KSB7CiAgICAgICAgaWYgKCFfLmlzTmlsKGl0ZW0ucHJvZHVjdCkgJiYgKCFpdGVtLnF1YW50aXR5UmVxdWVzdGVkIHx8IGl0ZW0ucXVhbnRpdHlSZXF1ZXN0ZWQgPD0gMCkpIHsKICAgICAgICAgIGVycm9ycy5saW5lSXRlbXNba2V5XSA9IHsKICAgICAgICAgICAgcXVhbnRpdHlSZXF1ZXN0ZWQ6ICdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLmVudGVyUXVhbnRpdHkubGFiZWwnCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBpZiAoXy50b0ludGVnZXIoaXRlbS5xdWFudGl0eVJlcXVlc3RlZCkgJSBpdGVtLnBhY2tTaXplICE9PSAwKSB7CiAgICAgICAgICBlcnJvcnMubGluZUl0ZW1zW2tleV0gPSB7CiAgICAgICAgICAgIHF1YW50aXR5UmVxdWVzdGVkOiAncmVhY3Quc3RvY2tNb3ZlbWVudC5lcnJvci5tdWx0aXBsZU9mUGFja1NpemUubGFiZWwnCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBpZiAoIV8uaXNFbXB0eShpdGVtLmJveE5hbWUpICYmIF8uaXNFbXB0eShpdGVtLnBhbGxldE5hbWUpKSB7CiAgICAgICAgICBlcnJvcnMubGluZUl0ZW1zW2tleV0gPSB7CiAgICAgICAgICAgIGJveE5hbWU6ICdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLmJveFdpdGhvdXRQYWxsZXQubGFiZWwnCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICB2YXIgZGF0ZVJlcXVlc3RlZCA9IG1vbWVudChpdGVtLmV4cGlyYXRpb25EYXRlLCAnTU0vREQvWVlZWScpOwogICAgICAgIGlmIChkYXRlLmRpZmYoZGF0ZVJlcXVlc3RlZCkgPiAwKSB7CiAgICAgICAgICBlcnJvcnMubGluZUl0ZW1zW2tleV0gPSB7CiAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiAncmVhY3Quc3RvY2tNb3ZlbWVudC5lcnJvci5pbnZhbGlkRGF0ZS5sYWJlbCcKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGlmIChtb21lbnQoKS5zdGFydE9mKCdkYXknKS5kaWZmKGRhdGVSZXF1ZXN0ZWQpID4gMCkgewogICAgICAgICAgZXJyb3JzLmxpbmVJdGVtc1trZXldID0gewogICAgICAgICAgICBleHBpcmF0aW9uRGF0ZTogJ3JlYWN0LnN0b2NrTW92ZW1lbnQuZXJyb3IucGFzdERhdGUubGFiZWwnCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICB2YXIgc3BsaXRJdGVtcyA9IF8uZmlsdGVyKHZhbHVlcy5saW5lSXRlbXMsIGZ1bmN0aW9uIChsaW5lSXRlbSkgewogICAgICAgICAgcmV0dXJuIGxpbmVJdGVtLnJlZmVyZW5jZUlkID09PSBpdGVtLnJlZmVyZW5jZUlkOwogICAgICAgIH0pOwogICAgICAgIGlmICghaXRlbS5pZCB8fCBzcGxpdEl0ZW1zLmxlbmd0aCA+IDEpIHsKICAgICAgICAgIHZhciByZXF1ZXN0ZWRRdWFudGl0eSA9IF8ucmVkdWNlKHNwbGl0SXRlbXMsIGZ1bmN0aW9uIChzdW0sIHZhbCkgewogICAgICAgICAgICByZXR1cm4gc3VtICsgKHZhbC5xdWFudGl0eVJlcXVlc3RlZCA/IF8udG9JbnRlZ2VyKHZhbC5xdWFudGl0eVJlcXVlc3RlZCkgOiAwKTsKICAgICAgICAgIH0sIDApOwogICAgICAgICAgaWYgKHJlcXVlc3RlZFF1YW50aXR5ID4gaXRlbS5xdWFudGl0eUF2YWlsYWJsZSkgewogICAgICAgICAgICBfLmZvckVhY2godmFsdWVzLmxpbmVJdGVtcywgZnVuY3Rpb24gKGxpbmVJdGVtLCBsaW5lSXRlbUtleSkgewogICAgICAgICAgICAgIF8uZm9yRWFjaChzcGxpdEl0ZW1zLCBmdW5jdGlvbiAoc3BsaXRJdGVtKSB7CiAgICAgICAgICAgICAgICBpZiAobGluZUl0ZW0gPT09IHNwbGl0SXRlbSkgewogICAgICAgICAgICAgICAgICBlcnJvcnMubGluZUl0ZW1zW2xpbmVJdGVtS2V5XSA9IHsKICAgICAgICAgICAgICAgICAgICBxdWFudGl0eVJlcXVlc3RlZDogJ3JlYWN0LnN0b2NrTW92ZW1lbnQuZXJyb3IuaGlnaGVyU3BsaXRRdWFudGl0eS5sYWJlbCcKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChzcGxpdEl0ZW1zLmxlbmd0aCA9PT0gMSAmJiBpdGVtICYmIGl0ZW0ucXVhbnRpdHlBdmFpbGFibGUgPCBfLnRvSW50ZWdlcihpdGVtLnF1YW50aXR5UmVxdWVzdGVkKSkgewogICAgICAgICAgZXJyb3JzLmxpbmVJdGVtc1trZXldID0gewogICAgICAgICAgICBxdWFudGl0eVJlcXVlc3RlZDogJ3JlYWN0LnN0b2NrTW92ZW1lbnQuZXJyb3IuaGlnaGVyUXVhbnRpdHkubGFiZWwnCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBpZiAoIWlnbm9yZUxvdEFuZEV4cGlyeSkgewogICAgICAgICAgaWYgKGl0ZW0uZXhwaXJhdGlvbkRhdGUgJiYgKF8uaXNOaWwoaXRlbS5sb3ROdW1iZXIpIHx8IF8uaXNFbXB0eShpdGVtLmxvdE51bWJlcikpKSB7CiAgICAgICAgICAgIGVycm9ycy5saW5lSXRlbXNba2V5XSA9IHsKICAgICAgICAgICAgICBsb3ROdW1iZXI6ICdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLmV4cGlyeVdpdGhvdXRMb3QubGFiZWwnCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIV8uaXNOaWwoaXRlbS5wcm9kdWN0KSAmJiBpdGVtLnByb2R1Y3QubG90QW5kRXhwaXJ5Q29udHJvbCkgewogICAgICAgICAgICBpZiAoIWl0ZW0uZXhwaXJhdGlvbkRhdGUgJiYgKF8uaXNOaWwoaXRlbS5sb3ROdW1iZXIpIHx8IF8uaXNFbXB0eShpdGVtLmxvdE51bWJlcikpKSB7CiAgICAgICAgICAgICAgZXJyb3JzLmxpbmVJdGVtc1trZXldID0gewogICAgICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGU6IExPVF9BTkRfRVhQSVJZX0VSUk9SLAogICAgICAgICAgICAgICAgbG90TnVtYmVyOiBMT1RfQU5EX0VYUElSWV9FUlJPUgogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0uZXhwaXJhdGlvbkRhdGUpIHsKICAgICAgICAgICAgICBlcnJvcnMubGluZUl0ZW1zW2tleV0gPSB7CiAgICAgICAgICAgICAgICBleHBpcmF0aW9uRGF0ZTogTE9UX0FORF9FWFBJUllfRVJST1IKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgaWYgKF8uaXNOaWwoaXRlbS5sb3ROdW1iZXIpIHx8IF8uaXNFbXB0eShpdGVtLmxvdE51bWJlcikpIHsKICAgICAgICAgICAgICBlcnJvcnMubGluZUl0ZW1zW2tleV0gPSB7CiAgICAgICAgICAgICAgICBsb3ROdW1iZXI6IExPVF9BTkRfRVhQSVJZX0VSUk9SCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBlcnJvcnM7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsaWRhdGVXaXRoQWxlcnRNZXNzYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVdpdGhBbGVydE1lc3NhZ2UodmFsdWVzKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB2YXIgZXJyb3JzID0gdGhpcy52YWxpZGF0ZSh2YWx1ZXMpOwogICAgICB2YXIgYWxlcnRNZXNzYWdlID0gJyc7CiAgICAgIF8uZm9yRWFjaChlcnJvcnMubGluZUl0ZW1zLCBmdW5jdGlvbiAoZXJyb3IsIGluZGV4KSB7CiAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICB2YXIgcHJvZHVjdENvZGUgPSB2YWx1ZXMubGluZUl0ZW1zW2luZGV4XS5wcm9kdWN0Q29kZTsKICAgICAgICAgIGlmICghYWxlcnRNZXNzYWdlKSB7CiAgICAgICAgICAgIGFsZXJ0TWVzc2FnZSA9ICIiLmNvbmNhdChfdGhpczMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9ycy5mb2xsb3dpbmdSb3dzQ29udGFpblZhbGlkYXRpb25FcnJvci5sYWJlbCcsICdGb2xsb3dpbmcgcm93cyBjb250YWluIHZhbGlkYXRpb24gZXJyb3JzOiBSb3cnKSwgIiAiKS5jb25jYXQoaW5kZXggKyAxLCAiOiAiKS5jb25jYXQocHJvZHVjdENvZGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnRNZXNzYWdlICs9ICIsIFJvdyAiLmNvbmNhdChpbmRleCArIDEsICI6ICIpLmNvbmNhdChwcm9kdWN0Q29kZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdmFyIHNob3dBbGVydCA9IHRoaXMuc3RhdGUuc2hvd0FsZXJ0OwogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICBhbGVydE1lc3NhZ2U6IGFsZXJ0TWVzc2FnZSwKICAgICAgICBzaG93QWxlcnQ6IHNob3dBbGVydCAmJiAhYWxlcnRNZXNzYWdlID8gZmFsc2UgOiBzaG93QWxlcnQKICAgICAgfSk7CiAgICAgIHJldHVybiBlcnJvcnM7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNWYWxpZEZvclNhdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVmFsaWRGb3JTYXZlKHZhbHVlcykgewogICAgICB2YXIgZXJyb3JzID0gdGhpcy52YWxpZGF0ZSh2YWx1ZXMsIHRydWUpOwogICAgICByZXR1cm4gIWVycm9ycy5saW5lSXRlbXMgfHwgZXJyb3JzLmxpbmVJdGVtcy5ldmVyeShfLmlzRW1wdHkpOwogICAgfQoKICAgIC8qKgogICAgICogU2hvd3Mgc2F2ZSBjb25maXJtYXRpb24gZGlhbG9nLgogICAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25Db25maXJtCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJjb25maXJtU2F2ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29uZmlybVNhdmUob25Db25maXJtKSB7CiAgICAgIGNvbmZpcm1BbGVydCh7CiAgICAgICAgdGl0bGU6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50Lm1lc3NhZ2UuY29uZmlybVNhdmUubGFiZWwnLCAnQ29uZmlybSBzYXZlJyksCiAgICAgICAgbWVzc2FnZTogdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LnN0b2NrTW92ZW1lbnQuY29uZmlybVNhdmUubWVzc2FnZScsICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gc2F2ZT8gVGhlcmUgYXJlIHNvbWUgbGluZXMgd2l0aCBlbXB0eSBvciB6ZXJvIHF1YW50aXR5LCB0aG9zZSBsaW5lcyB3aWxsIGJlIGRlbGV0ZWQuJyksCiAgICAgICAgYnV0dG9uczogW3sKICAgICAgICAgIGxhYmVsOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGVmYXVsdC55ZXMubGFiZWwnLCAnWWVzJyksCiAgICAgICAgICBvbkNsaWNrOiBvbkNvbmZpcm0KICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LmRlZmF1bHQubm8ubGFiZWwnLCAnTm8nKQogICAgICAgIH1dCiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogU2hvd3MgSW52ZW50b3J5IGl0ZW0gZXhwaXJhdGlvbiBkYXRlIHVwZGF0ZSBjb25maXJtYXRpb24gZGlhbG9nLgogICAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25Db25maXJtCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJjb25maXJtSW52ZW50b3J5SXRlbUV4cGlyYXRpb25EYXRlVXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb25maXJtSW52ZW50b3J5SXRlbUV4cGlyYXRpb25EYXRlVXBkYXRlKG9uQ29uZmlybSkgewogICAgICBjb25maXJtQWxlcnQoewogICAgICAgIHRpdGxlOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tNb3ZlbWVudC5tZXNzYWdlLmNvbmZpcm1TYXZlLmxhYmVsJywgJ0NvbmZpcm0gc2F2ZScpLAogICAgICAgIG1lc3NhZ2U6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmNvbmZpcm1FeHBpcnlEYXRlVXBkYXRlLm1lc3NhZ2UnLCAnVGhpcyB3aWxsIHVwZGF0ZSB0aGUgZXhwaXJ5IGRhdGUgYWNyb3NzIGFsbCBkZXBvdHMgaW4gdGhlIHN5c3RlbS4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHByb2NlZWQ/JyksCiAgICAgICAgYnV0dG9uczogW3sKICAgICAgICAgIGxhYmVsOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGVmYXVsdC55ZXMubGFiZWwnLCAnWWVzJyksCiAgICAgICAgICBvbkNsaWNrOiBvbkNvbmZpcm0KICAgICAgICB9LCB7CiAgICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LmRlZmF1bHQubm8ubGFiZWwnLCAnTm8nKQogICAgICAgIH1dCiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhbGwgcmVxdWlyZWQgZGF0YS4KICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogImZldGNoQWxsRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hBbGxEYXRhKCkgewogICAgICB0aGlzLnByb3BzLmZldGNoVXNlcnMoKTsKICAgICAgdGhpcy5mZXRjaEFkZEl0ZW1zUGFnZURhdGEoKTsKICAgICAgaWYgKCF0aGlzLnByb3BzLmlzUGFnaW5hdGVkKSB7CiAgICAgICAgdGhpcy5mZXRjaExpbmVJdGVtcygpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBGZXRjaGVzIDJuZCBzdGVwIGRhdGEgZnJvbSBjdXJyZW50IHN0b2NrIG1vdmVtZW50LgogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAiZmV0Y2hMaW5lSXRlbXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoTGluZUl0ZW1zKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgdmFyIHVybCA9ICIvb3BlbmJveGVzL2FwaS9zdG9ja01vdmVtZW50cy8iLmNvbmNhdCh0aGlzLnN0YXRlLnZhbHVlcy5zdG9ja01vdmVtZW50SWQsICIvc3RvY2tNb3ZlbWVudEl0ZW1zP3N0ZXBOdW1iZXI9MiIpOwogICAgICByZXR1cm4gYXBpQ2xpZW50LmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM0LnNldFN0YXRlKHsKICAgICAgICAgIHRvdGFsQ291bnQ6IHJlc3BvbnNlLmRhdGEuZGF0YS5sZW5ndGgKICAgICAgICB9KTsKICAgICAgICBfdGhpczQuc2V0TGluZUl0ZW1zKHJlc3BvbnNlLCBudWxsKTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycikgewogICAgICAgIHJldHVybiBlcnI7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogRmV0Y2hlcyBzdG9jayBtb3ZlbWVudCdzIGxpbmUgaXRlbXMgYW5kIHNldHMgdGhlbSBpbiByZWR1eCBmb3JtIGFuZCBpbgogICAgICogc3RhdGUgYXMgY3VycmVudCBsaW5lIGl0ZW1zLgogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAiZmV0Y2hBZGRJdGVtc1BhZ2VEYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEFkZEl0ZW1zUGFnZURhdGEoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICB0aGlzLnByb3BzLnNob3dTcGlubmVyKCk7CiAgICAgIHZhciB1cmwgPSAiL29wZW5ib3hlcy9hcGkvc3RvY2tNb3ZlbWVudHMvIi5jb25jYXQodGhpcy5zdGF0ZS52YWx1ZXMuc3RvY2tNb3ZlbWVudElkKTsKICAgICAgYXBpQ2xpZW50LmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICB2YXIgaGFzTWFuYWdlSW52ZW50b3J5ID0gcmVzcC5kYXRhLmRhdGEuaGFzTWFuYWdlSW52ZW50b3J5OwogICAgICAgIHZhciBzdGF0dXNDb2RlID0gcmVzcC5kYXRhLmRhdGEuc3RhdHVzQ29kZTsKICAgICAgICB2YXIgdG90YWxDb3VudCA9IHJlc3AuZGF0YS50b3RhbENvdW50OwogICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7CiAgICAgICAgICB2YWx1ZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXM1LnN0YXRlLnZhbHVlcyksIHt9LCB7CiAgICAgICAgICAgIGhhc01hbmFnZUludmVudG9yeTogaGFzTWFuYWdlSW52ZW50b3J5LAogICAgICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlCiAgICAgICAgICB9KSwKICAgICAgICAgIHRvdGFsQ291bnQ6IHRvdGFsQ291bnQKICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXM1LnByb3BzLmhpZGVTcGlubmVyKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImlzUm93TG9hZGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Jvd0xvYWRlZChfcmVmMTUpIHsKICAgICAgdmFyIGluZGV4ID0gX3JlZjE1LmluZGV4OwogICAgICByZXR1cm4gISF0aGlzLnN0YXRlLnZhbHVlcy5saW5lSXRlbXNbaW5kZXhdOwogICAgfQogIH0sIHsKICAgIGtleTogImxvYWRNb3JlUm93cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZE1vcmVSb3dzKF9yZWYxNikgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKICAgICAgdmFyIHN0YXJ0SW5kZXggPSBfcmVmMTYuc3RhcnRJbmRleDsKICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaXNGaXJzdFBhZ2VMb2FkZWQ6IHRydWUKICAgICAgfSk7CiAgICAgIHZhciB1cmwgPSAiL29wZW5ib3hlcy9hcGkvc3RvY2tNb3ZlbWVudHMvIi5jb25jYXQodGhpcy5zdGF0ZS52YWx1ZXMuc3RvY2tNb3ZlbWVudElkLCAiL3N0b2NrTW92ZW1lbnRJdGVtcz9vZmZzZXQ9IikuY29uY2F0KHN0YXJ0SW5kZXgsICImbWF4PSIpLmNvbmNhdCh0aGlzLnByb3BzLnBhZ2VTaXplLCAiJnN0ZXBOdW1iZXI9MiIpOwogICAgICBhcGlDbGllbnQuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczYuc2V0TGluZUl0ZW1zKHJlc3BvbnNlLCBzdGFydEluZGV4KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTYXZlcyBjdXJyZW50IHN0b2NrIG1vdmVtZW50IHByb2dyZXNzIChsaW5lIGl0ZW1zKSBhbmQgZ29lcyB0byB0aGUgbmV4dCBzdG9jayBtb3ZlbWVudCBzdGVwLgogICAgICogQHBhcmFtIHtvYmplY3R9IGZvcm1WYWx1ZXMKICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogIm5leHRQYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0UGFnZShmb3JtVmFsdWVzKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwogICAgICB2YXIgZXJyb3JzID0gdGhpcy52YWxpZGF0ZVdpdGhBbGVydE1lc3NhZ2UoZm9ybVZhbHVlcykubGluZUl0ZW1zOwogICAgICBpZiAoZXJyb3JzLmxlbmd0aCkgewogICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgc2hvd0FsZXJ0OiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBsaW5lSXRlbXMgPSBfLmZpbHRlcihmb3JtVmFsdWVzLmxpbmVJdGVtcywgZnVuY3Rpb24gKHZhbCkgewogICAgICAgIHJldHVybiAhXy5pc0VtcHR5KHZhbCkgJiYgdmFsLnByb2R1Y3Q7CiAgICAgIH0pOwogICAgICBpZiAoXy5zb21lKGxpbmVJdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gIWl0ZW0ucXVhbnRpdHlSZXF1ZXN0ZWQgfHwgaXRlbS5xdWFudGl0eVJlcXVlc3RlZCA9PT0gJzAnOwogICAgICB9KSkgewogICAgICAgIHRoaXMuY29uZmlybVNhdmUoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzNy5zYXZlQW5kVHJhbnNpdGlvblRvTmV4dFN0ZXAoZm9ybVZhbHVlcywgbGluZUl0ZW1zKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNhdmVBbmRUcmFuc2l0aW9uVG9OZXh0U3RlcChmb3JtVmFsdWVzLCBsaW5lSXRlbXMpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTYXZlcyBjdXJyZW50IHN0b2NrIG1vdmVtZW50IHByb2dyZXNzIChsaW5lIGl0ZW1zKSBhbmQgZ29lcyB0byB0aGUgbmV4dCBzdG9jayBtb3ZlbWVudCBzdGVwLgogICAgICogQHBhcmFtIHtvYmplY3R9IGZvcm1WYWx1ZXMKICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsaW5lSXRlbXMKICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogInNhdmVBbmRUcmFuc2l0aW9uVG9OZXh0U3RlcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZUFuZFRyYW5zaXRpb25Ub05leHRTdGVwKGZvcm1WYWx1ZXMsIGxpbmVJdGVtcykgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKICAgICAgaWYgKF8uc29tZShsaW5lSXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uaW52ZW50b3J5SXRlbSAmJiBpdGVtLmV4cGlyYXRpb25EYXRlICE9PSBpdGVtLmludmVudG9yeUl0ZW0uZXhwaXJhdGlvbkRhdGU7CiAgICAgIH0pKSB7CiAgICAgICAgaWYgKF8uc29tZShsaW5lSXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gaXRlbS5pbnZlbnRvcnlJdGVtICYmIGl0ZW0uaW52ZW50b3J5SXRlbS5xdWFudGl0eSAmJiBpdGVtLmludmVudG9yeUl0ZW0ucXVhbnRpdHkgIT09ICcwJzsKICAgICAgICB9KSkgewogICAgICAgICAgdGhpcy5jb25maXJtSW52ZW50b3J5SXRlbUV4cGlyYXRpb25EYXRlVXBkYXRlKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzOC5zYXZlUmVxdWlzaXRpb25JdGVtc0FuZFRyYW5zaXRpb25Ub05leHRTdGVwKGZvcm1WYWx1ZXMsIGxpbmVJdGVtcyk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5zYXZlUmVxdWlzaXRpb25JdGVtc0FuZFRyYW5zaXRpb25Ub05leHRTdGVwKGZvcm1WYWx1ZXMsIGxpbmVJdGVtcyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2F2ZVJlcXVpc2l0aW9uSXRlbXNBbmRUcmFuc2l0aW9uVG9OZXh0U3RlcChmb3JtVmFsdWVzLCBsaW5lSXRlbXMpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTYXZlcyBsaXN0IG9mIHN0b2NrIG1vdmVtZW50IGl0ZW1zIHdpdGggcG9zdCBtZXRob2QuCiAgICAgKiBAcGFyYW0ge29iamVjdH0gbGluZUl0ZW1zCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJzYXZlUmVxdWlzaXRpb25JdGVtcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZVJlcXVpc2l0aW9uSXRlbXMobGluZUl0ZW1zKSB7CiAgICAgIHZhciBpdGVtc1RvU2F2ZSA9IHRoaXMuZ2V0TGluZUl0ZW1zVG9CZVNhdmVkKGxpbmVJdGVtcyk7CiAgICAgIHZhciB1cGRhdGVJdGVtc1VybCA9ICIvb3BlbmJveGVzL2FwaS9zdG9ja01vdmVtZW50cy8iLmNvbmNhdCh0aGlzLnN0YXRlLnZhbHVlcy5zdG9ja01vdmVtZW50SWQsICIvdXBkYXRlSXRlbXMiKTsKICAgICAgdmFyIHBheWxvYWQgPSB7CiAgICAgICAgaWQ6IHRoaXMuc3RhdGUudmFsdWVzLnN0b2NrTW92ZW1lbnRJZCwKICAgICAgICBsaW5lSXRlbXM6IGl0ZW1zVG9TYXZlCiAgICAgIH07CiAgICAgIGlmIChwYXlsb2FkLmxpbmVJdGVtcy5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gYXBpQ2xpZW50LnBvc3QodXBkYXRlSXRlbXNVcmwsIHBheWxvYWQpWyJjYXRjaCJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3JlYWN0LnN0b2NrTW92ZW1lbnQuZXJyb3Iuc2F2ZVJlcXVpc2l0aW9uSXRlbXMubGFiZWwnKSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgfQoKICAgIC8qKgogICAgICogU2F2ZXMgbGlzdCBvZiBzdG9jayBtb3ZlbWVudCBpdGVtcyBhbmQgdHJhbnNpdGlvbiB0byBuZXh0IHN0ZXAuCiAgICAgKiBAcGFyYW0ge29iamVjdH0gZm9ybVZhbHVlcwogICAgICogQHBhcmFtIHtvYmplY3R9IGxpbmVJdGVtcwogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAic2F2ZVJlcXVpc2l0aW9uSXRlbXNBbmRUcmFuc2l0aW9uVG9OZXh0U3RlcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZVJlcXVpc2l0aW9uSXRlbXNBbmRUcmFuc2l0aW9uVG9OZXh0U3RlcChmb3JtVmFsdWVzLCBsaW5lSXRlbXMpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CiAgICAgIHRoaXMucHJvcHMuc2hvd1NwaW5uZXIoKTsKICAgICAgdGhpcy5zYXZlUmVxdWlzaXRpb25JdGVtcyhsaW5lSXRlbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICB2YXIgdmFsdWVzID0gZm9ybVZhbHVlczsKICAgICAgICBpZiAocmVzcCkgewogICAgICAgICAgdmFsdWVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmb3JtVmFsdWVzKSwge30sIHsKICAgICAgICAgICAgbGluZUl0ZW1zOiBfLm1hcChyZXNwLmRhdGEuZGF0YS5saW5lSXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbSksIHt9LCB7CiAgICAgICAgICAgICAgICByZWZlcmVuY2VJZDogaXRlbS5vcmRlckl0ZW1JZAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIF90aGlzOS50cmFuc2l0aW9uVG9OZXh0U3RlcCgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM5LnByb3BzLm5leHRQYWdlKHZhbHVlcyk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzOS5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICAgIH0pOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzOS5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFNhdmVzIGxpc3Qgb2YgcmVxdWlzaXRpb24gaXRlbXMgaW4gY3VycmVudCBzdGVwICh3aXRob3V0IHN0ZXAgY2hhbmdlKS4gVXNlZCB0byBleHBvcnQgdGVtcGxhdGUuCiAgICAgKiBAcGFyYW0ge29iamVjdH0gaXRlbUNhbmRpZGF0ZXNUb1NhdmUKICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogInNhdmVSZXF1aXNpdGlvbkl0ZW1zSW5DdXJyZW50U3RlcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZVJlcXVpc2l0aW9uSXRlbXNJbkN1cnJlbnRTdGVwKGl0ZW1DYW5kaWRhdGVzVG9TYXZlKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKICAgICAgdmFyIGl0ZW1zVG9TYXZlID0gdGhpcy5nZXRMaW5lSXRlbXNUb0JlU2F2ZWQoaXRlbUNhbmRpZGF0ZXNUb1NhdmUpOwogICAgICB2YXIgdXBkYXRlSXRlbXNVcmwgPSAiL29wZW5ib3hlcy9hcGkvc3RvY2tNb3ZlbWVudHMvIi5jb25jYXQodGhpcy5zdGF0ZS52YWx1ZXMuc3RvY2tNb3ZlbWVudElkLCAiL3VwZGF0ZUl0ZW1zIik7CiAgICAgIHZhciBwYXlsb2FkID0gewogICAgICAgIGlkOiB0aGlzLnN0YXRlLnZhbHVlcy5zdG9ja01vdmVtZW50SWQsCiAgICAgICAgbGluZUl0ZW1zOiBpdGVtc1RvU2F2ZQogICAgICB9OwogICAgICBpZiAocGF5bG9hZC5saW5lSXRlbXMubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIGFwaUNsaWVudC5wb3N0KHVwZGF0ZUl0ZW1zVXJsLCBwYXlsb2FkKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgICB2YXIgbGluZUl0ZW1zID0gcmVzcC5kYXRhLmRhdGEubGluZUl0ZW1zOwogICAgICAgICAgdmFyIGxpbmVJdGVtc0JhY2tlbmREYXRhID0gXy5tYXAoXy5zb3J0QnkobGluZUl0ZW1zLCBbJ3NvcnRPcmRlciddKSwgZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2YWwpLCB7fSwgewogICAgICAgICAgICAgIHJlZmVyZW5jZUlkOiB2YWwub3JkZXJJdGVtSWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIF90aGlzMTAuc2V0U3RhdGUoewogICAgICAgICAgICB2YWx1ZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMxMC5zdGF0ZS52YWx1ZXMpLCB7fSwgewogICAgICAgICAgICAgIGxpbmVJdGVtczogbGluZUl0ZW1zQmFja2VuZERhdGEKICAgICAgICAgICAgfSkKICAgICAgICAgIH0pOwogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoX3RoaXMxMC5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LnN0b2NrTW92ZW1lbnQuZXJyb3Iuc2F2ZVJlcXVpc2l0aW9uSXRlbXMubGFiZWwnLCAnQ291bGQgbm90IHNhdmUgcmVxdWlzaXRpb24gaXRlbXMnKSkpOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFNhdmVzIGxpc3Qgb2YgcmVxdWlzaXRpb24gaXRlbXMgaW4gY3VycmVudCBzdGVwICh3aXRob3V0IHN0ZXAgY2hhbmdlKS4KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmb3JtVmFsdWVzCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJzYXZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKGZvcm1WYWx1ZXMpIHsKICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwogICAgICB2YXIgbGluZUl0ZW1zID0gXy5maWx0ZXIoZm9ybVZhbHVlcy5saW5lSXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuICFfLmlzRW1wdHkoaXRlbSk7CiAgICAgIH0pOwogICAgICBpZiAobGluZUl0ZW1zLmxlbmd0aCA+IDApIHsKICAgICAgICBpZiAoXy5zb21lKGxpbmVJdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiAhaXRlbS5xdWFudGl0eVJlcXVlc3RlZCB8fCBpdGVtLnF1YW50aXR5UmVxdWVzdGVkID09PSAnMCc7CiAgICAgICAgfSkpIHsKICAgICAgICAgIHRoaXMuY29uZmlybVNhdmUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gX3RoaXMxMS5zYXZlSXRlbXMobGluZUl0ZW1zKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnNhdmVJdGVtcyhsaW5lSXRlbXMpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBBbGVydC5lcnJvcih0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tNb3ZlbWVudC5lcnJvci5ub1NoaXBtZW50SXRlbXMubGFiZWwnLCAnQ2Fubm90IHNhdmUgc2hpcG1lbnQgZnJvbSBQTyB3aXRoIG5vIGl0ZW1zLicpLCB7CiAgICAgICAgICB0aW1lb3V0OiAyMDAwCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNhdmVzIGNoYW5nZXMgbWFkZSBieSB1c2VyIGluIHRoaXMgc3RlcCBhbmQgcmVkaXJlY3RzIHRvIHRoZSBzaGlwbWVudCB2aWV3IHBhZ2UKICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmb3JtVmFsdWVzCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJzYXZlQW5kRXhpdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZUFuZEV4aXQoZm9ybVZhbHVlcykgewogICAgICBpZiAoZm9ybVZhbHVlcy5saW5lSXRlbXMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBlcnJvcnMgPSB0aGlzLnZhbGlkYXRlV2l0aEFsZXJ0TWVzc2FnZShmb3JtVmFsdWVzKS5saW5lSXRlbXM7CiAgICAgICAgaWYgKCFlcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgICB0aGlzLnNhdmVSZXF1aXNpdGlvbkl0ZW1zSW5DdXJyZW50U3RlcChmb3JtVmFsdWVzLmxpbmVJdGVtcykudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICIvb3BlbmJveGVzL3N0b2NrTW92ZW1lbnQvc2hvdy8iLmNvbmNhdChmb3JtVmFsdWVzLnN0b2NrTW92ZW1lbnRJZCk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uZmlybUFsZXJ0KHsKICAgICAgICAgICAgdGl0bGU6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmNvbmZpcm1FeGl0LmxhYmVsJywgJ0NvbmZpcm0gc2F2ZScpLAogICAgICAgICAgICBtZXNzYWdlOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tNb3ZlbWVudC5jb25maXJtRXhpdC5tZXNzYWdlJywgJ1ZhbGlkYXRpb24gZXJyb3JzIG9jY3VycmVkLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZXhpdCBhbmQgbG9zZSB1bnNhdmVkIGRhdGE/JyksCiAgICAgICAgICAgIGJ1dHRvbnM6IFt7CiAgICAgICAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5kZWZhdWx0Lnllcy5sYWJlbCcsICdZZXMnKSwKICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gIi9vcGVuYm94ZXMvc3RvY2tNb3ZlbWVudC9zaG93LyIuY29uY2F0KGZvcm1WYWx1ZXMuc3RvY2tNb3ZlbWVudElkKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LmRlZmF1bHQubm8ubGFiZWwnLCAnTm8nKQogICAgICAgICAgICB9XQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIEFsZXJ0LmVycm9yKHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLm5vU2hpcG1lbnRJdGVtcy5sYWJlbCcsICdDYW5ub3Qgc2F2ZSBzaGlwbWVudCBmcm9tIFBPIHdpdGggbm8gaXRlbXMuJyksIHsKICAgICAgICAgIHRpbWVvdXQ6IDIwMDAKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2F2ZXMgbGlzdCBvZiByZXF1aXNpdGlvbiBpdGVtcyBpbiBjdXJyZW50IHN0ZXAgKHdpdGhvdXQgc3RlcCBjaGFuZ2UpLgogICAgICogQHBhcmFtIHtvYmplY3R9IGxpbmVJdGVtcwogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAic2F2ZUl0ZW1zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlSXRlbXMobGluZUl0ZW1zKSB7CiAgICAgIHZhciBfdGhpczEyID0gdGhpczsKICAgICAgdGhpcy5wcm9wcy5zaG93U3Bpbm5lcigpOwogICAgICB0aGlzLnNhdmVSZXF1aXNpdGlvbkl0ZW1zSW5DdXJyZW50U3RlcChsaW5lSXRlbXMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMTIucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICBBbGVydC5zdWNjZXNzKF90aGlzMTIucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmFsZXJ0LnNhdmVTdWNjZXNzLmxhYmVsJywgJ0NoYW5nZXMgc2F2ZWQgc3VjY2Vzc2Z1bGx5JyksIHsKICAgICAgICAgIHRpbWVvdXQ6IDMwMDAKICAgICAgICB9KTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfdGhpczEyLnByb3BzLmhpZGVTcGlubmVyKCk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlcyBjaG9zZW4gaXRlbSBmcm9tIGl0ZW1zIGxpc3QuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaXRlbUlkCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVJdGVtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJdGVtKGl0ZW1JZCkgewogICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CiAgICAgIHZhciByZW1vdmVJdGVtc1VybCA9ICIvb3BlbmJveGVzL2FwaS9zdG9ja01vdmVtZW50SXRlbXMvIi5jb25jYXQoaXRlbUlkLCAiL3JlbW92ZUl0ZW0iKTsKICAgICAgdGhpcy5wcm9wcy5zaG93U3Bpbm5lcigpOwogICAgICByZXR1cm4gYXBpQ2xpZW50WyJkZWxldGUiXShyZW1vdmVJdGVtc1VybCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMTMucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMTMucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLmRlbGV0ZVJlcXVpc2l0aW9uSXRlbS5sYWJlbCcpKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZW1vdmVzIGFsbCBpdGVtcyBmcm9tIHJlcXVpc2l0aW9uJ3MgaXRlbXMgbGlzdC4KICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogInJlbW92ZUFsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsKCkgewogICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7CiAgICAgIHZhciByZW1vdmVJdGVtc1VybCA9ICIvb3BlbmJveGVzL2FwaS9zdG9ja01vdmVtZW50cy8iLmNvbmNhdCh0aGlzLnN0YXRlLnZhbHVlcy5zdG9ja01vdmVtZW50SWQsICIvcmVtb3ZlQWxsSXRlbXMiKTsKICAgICAgdGhpcy5wcm9wcy5zaG93U3Bpbm5lcigpOwogICAgICByZXR1cm4gYXBpQ2xpZW50WyJkZWxldGUiXShyZW1vdmVJdGVtc1VybCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMxNC5zZXRTdGF0ZSh7CiAgICAgICAgICB0b3RhbENvdW50OiAwLAogICAgICAgICAgdmFsdWVzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzMTQuc3RhdGUudmFsdWVzKSwge30sIHsKICAgICAgICAgICAgbGluZUl0ZW1zOiBbXQogICAgICAgICAgfSkKICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMxNC5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICAgIH0pOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMxNC5mZXRjaExpbmVJdGVtcygpOwogICAgICAgIF90aGlzMTQucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdyZWFjdC5zdG9ja01vdmVtZW50LmVycm9yLmRlbGV0ZVJlcXVpc2l0aW9uSXRlbS5sYWJlbCcpKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWZldGNoIHRoZSBkYXRhLCBhbGwgbm90IHNhdmVkIGNoYW5nZXMgd2lsbCBiZSBsb3N0LgogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAicmVmcmVzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHsKICAgICAgdmFyIF90aGlzMTUgPSB0aGlzOwogICAgICBjb25maXJtQWxlcnQoewogICAgICAgIHRpdGxlOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tNb3ZlbWVudC5tZXNzYWdlLmNvbmZpcm1SZWZyZXNoLmxhYmVsJywgJ0NvbmZpcm0gcmVmcmVzaCcpLAogICAgICAgIG1lc3NhZ2U6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmNvbmZpcm1SZWZyZXNoLm1lc3NhZ2UnLCAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlZnJlc2g/IFlvdXIgcHJvZ3Jlc3Mgc2luY2UgbGFzdCBzYXZlIHdpbGwgYmUgbG9zdC4nKSwKICAgICAgICBidXR0b25zOiBbewogICAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5kZWZhdWx0Lnllcy5sYWJlbCcsICdZZXMnKSwKICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczE1LmZldGNoQWxsRGF0YSgpOwogICAgICAgICAgfQogICAgICAgIH0sIHsKICAgICAgICAgIGxhYmVsOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGVmYXVsdC5uby5sYWJlbCcsICdObycpCiAgICAgICAgfV0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUcmFuc2l0aW9uIHRvIG5leHQgc3RvY2sgbW92ZW1lbnQgc3RhdHVzOgogICAgICogLSAnQ0hFQ0tJTkcnIGlmIG9yaWdpbiB0eXBlIGlzIHN1cHBsaWVyLgogICAgICogLSAnVkVSSUZZSU5HJyBpZiBvcmlnaW4gdHlwZSBpcyBvdGhlciB0aGFuIHN1cHBsaWVyLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cwogICAgICogQHB1YmxpYwogICAgICovCiAgfSwgewogICAga2V5OiAidHJhbnNpdGlvblRvTmV4dFN0ZXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zaXRpb25Ub05leHRTdGVwKCkgewogICAgICB2YXIgdXJsID0gIi9vcGVuYm94ZXMvYXBpL3N0b2NrTW92ZW1lbnRzLyIuY29uY2F0KHRoaXMuc3RhdGUudmFsdWVzLnN0b2NrTW92ZW1lbnRJZCwgIi9zdGF0dXMiKTsKICAgICAgdmFyIHBheWxvYWQgPSB7CiAgICAgICAgc3RhdHVzOiAnQ0hFQ0tJTkcnCiAgICAgIH07CiAgICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlcy5zdGF0dXNDb2RlID09PSAnQ1JFQVRFRCcpIHsKICAgICAgICByZXR1cm4gYXBpQ2xpZW50LnBvc3QodXJsLCBwYXlsb2FkKTsKICAgICAgfQogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTYXZlcyBjaGFuZ2VzIG1hZGUgYnkgdXNlciBpbiB0aGlzIHN0ZXAgYW5kIGdvIGJhY2sgdG8gcHJldmlvdXMgcGFnZQogICAgICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcwogICAgICogQHBhcmFtIHtib29sZWFufSBpbnZhbGlkCiAgICAgKiBAcHVibGljCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJwcmV2aW91c1BhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXZpb3VzUGFnZSh2YWx1ZXMsIGludmFsaWQpIHsKICAgICAgdmFyIF90aGlzMTYgPSB0aGlzOwogICAgICBpZiAoIWludmFsaWQpIHsKICAgICAgICB0aGlzLnNhdmVSZXF1aXNpdGlvbkl0ZW1zSW5DdXJyZW50U3RlcCh2YWx1ZXMubGluZUl0ZW1zKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczE2LnByb3BzLnByZXZpb3VzUGFnZSh2YWx1ZXMpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbmZpcm1BbGVydCh7CiAgICAgICAgICB0aXRsZTogdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LnN0b2NrTW92ZW1lbnQuY29uZmlybVByZXZpb3VzUGFnZS5sYWJlbCcsICdWYWxpZGF0aW9uIGVycm9yJyksCiAgICAgICAgICBtZXNzYWdlOiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3Quc3RvY2tNb3ZlbWVudC5jb25maXJtUHJldmlvdXNQYWdlLm1lc3NhZ2UubGFiZWwnLCAnQ2Fubm90IHNhdmUgZHVlIHRvIHZhbGlkYXRpb24gZXJyb3Igb24gcGFnZScpLAogICAgICAgICAgYnV0dG9uczogW3sKICAgICAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5zdG9ja01vdmVtZW50LmNvbmZpcm1QcmV2aW91c1BhZ2UuY29ycmVjdEVycm9yLmxhYmVsJywgJ0NvcnJlY3QgZXJyb3InKQogICAgICAgICAgfSwgewogICAgICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy50cmFuc2xhdGUoJ3JlYWN0LnN0b2NrTW92ZW1lbnQuY29uZmlybVByZXZpb3VzUGFnZS5jb250aW51ZS5sYWJlbCcsICdDb250aW51ZSAobG9zZSB1bnNhdmVkIHdvcmspJyksCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTYucHJvcHMucHJldmlvdXNQYWdlKHZhbHVlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH1dCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEltcG9ydHMgY2hvc2VuIGZpbGUgdG8gYmFja2VuZCBhbmQgdGhlbiBmZXRjaGVzIGxpbmUgaXRlbXMuCiAgICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQKICAgICAqIEBwdWJsaWMKICAgICAqLwogIH0sIHsKICAgIGtleTogImltcG9ydFRlbXBsYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbXBvcnRUZW1wbGF0ZShldmVudCkgewogICAgICB2YXIgX3RoaXMxNyA9IHRoaXM7CiAgICAgIHRoaXMucHJvcHMuc2hvd1NwaW5uZXIoKTsKICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgIHZhciBmaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdOwogICAgICB2YXIgc3RvY2tNb3ZlbWVudElkID0gdGhpcy5zdGF0ZS52YWx1ZXMuc3RvY2tNb3ZlbWVudElkOwogICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltcG9ydEZpbGUnLCBmaWxlLnNsaWNlKDAsIGZpbGUuc2l6ZSwgJ3RleHQvY3N2JykpOwogICAgICB2YXIgY29uZmlnID0gewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScKICAgICAgICB9CiAgICAgIH07CiAgICAgIHZhciB1cmwgPSAiL29wZW5ib3hlcy9hcGkvY29tYmluZWRTaGlwbWVudEl0ZW1zL2ltcG9ydFRlbXBsYXRlLyIuY29uY2F0KHN0b2NrTW92ZW1lbnRJZCk7CiAgICAgIHJldHVybiBhcGlDbGllbnQucG9zdCh1cmwsIGZvcm1EYXRhLCBjb25maWcpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMTcuZmV0Y2hMaW5lSXRlbXMoKTsKICAgICAgICBpZiAoXy5pc05pbChfLmxhc3QoX3RoaXMxNy5zdGF0ZS52YWx1ZXMubGluZUl0ZW1zKS5wcm9kdWN0KSkgewogICAgICAgICAgX3RoaXMxNy5zZXRTdGF0ZSh7CiAgICAgICAgICAgIHZhbHVlczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpczE3LnN0YXRlLnZhbHVlcyksIHt9LCB7CiAgICAgICAgICAgICAgbGluZUl0ZW1zOiBbXQogICAgICAgICAgICB9KQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMxNy5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJleHBvcnRUZW1wbGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0VGVtcGxhdGUoYmxhbmspIHsKICAgICAgdmFyIF90aGlzMTggPSB0aGlzOwogICAgICB2YXIgdXJsID0gIi9vcGVuYm94ZXMvYXBpL2NvbWJpbmVkU2hpcG1lbnRJdGVtcy9leHBvcnRUZW1wbGF0ZT92ZW5kb3I9Ii5jb25jYXQodGhpcy5zdGF0ZS52YWx1ZXMub3JpZ2luLmlkLCAiJmRlc3RpbmF0aW9uPSIpLmNvbmNhdCh0aGlzLnN0YXRlLnZhbHVlcy5kZXN0aW5hdGlvbi5pZCkuY29uY2F0KGJsYW5rID8gJyZibGFuaz10cnVlJyA6ICcnKTsKICAgICAgYXBpQ2xpZW50LmdldCh1cmwsIHsKICAgICAgICByZXNwb25zZVR5cGU6ICdibG9iJwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGZpbGVEb3dubG9hZChyZXNwb25zZS5kYXRhLCAnT3JkZXItaXRlbXMtdGVtcGxhdGUuY3N2JywgJ3RleHQvY3N2Jyk7CiAgICAgICAgX3RoaXMxOC5wcm9wcy5oaWRlU3Bpbm5lcigpOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMTgucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUb2dnbGUgdGhlIGRvd25sb2FkYWJsZSBmaWxlcwogICAgICovCiAgfSwgewogICAga2V5OiAidG9nZ2xlRHJvcGRvd24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZURyb3Bkb3duKCkgewogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICBpc0Ryb3Bkb3duVmlzaWJsZTogIXRoaXMuc3RhdGUuaXNEcm9wZG93blZpc2libGUKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczE5ID0gdGhpczsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICBzaG93QWxlcnQgPSBfdGhpcyRzdGF0ZS5zaG93QWxlcnQsCiAgICAgICAgYWxlcnRNZXNzYWdlID0gX3RoaXMkc3RhdGUuYWxlcnRNZXNzYWdlOwogICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybSwgewogICAgICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdCgpIHt9LAogICAgICAgIHZhbGlkYXRlOiB0aGlzLnZhbGlkYXRlLAogICAgICAgIG11dGF0b3JzOiBfb2JqZWN0U3ByZWFkKHt9LCBhcnJheU11dGF0b3JzKSwKICAgICAgICBpbml0aWFsVmFsdWVzOiB0aGlzLnN0YXRlLnZhbHVlcywKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfcmVmMTcpIHsKICAgICAgICAgIHZhciBoYW5kbGVTdWJtaXQgPSBfcmVmMTcuaGFuZGxlU3VibWl0LAogICAgICAgICAgICB2YWx1ZXMgPSBfcmVmMTcudmFsdWVzLAogICAgICAgICAgICBpbnZhbGlkID0gX3JlZjE3LmludmFsaWQ7CiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiAiZC1mbGV4IGZsZXgtY29sdW1uIgogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQWxlcnRNZXNzYWdlLCB7CiAgICAgICAgICAgIHNob3c6IHNob3dBbGVydCwKICAgICAgICAgICAgbWVzc2FnZTogYWxlcnRNZXNzYWdlLAogICAgICAgICAgICBkYW5nZXI6IHRydWUKICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiAiYnV0dG9ucy1jb250YWluZXIiCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgibGFiZWwiLCB7CiAgICAgICAgICAgIGh0bWxGb3I6ICJjc3ZJbnB1dCIsCiAgICAgICAgICAgIGNsYXNzTmFtZTogImZsb2F0LXJpZ2h0IG1iLTEgYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBhbGlnbi1zZWxmLWVuZCBtbC0xIGJ0bi14cyIKICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImZhIGZhLWRvd25sb2FkIHByLTIiCiAgICAgICAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgICAgIGlkOiAicmVhY3QuZGVmYXVsdC5idXR0b24uaW1wb3J0VGVtcGxhdGUubGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkltcG9ydCB0ZW1wbGF0ZSIKICAgICAgICAgIH0pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImlucHV0IiwgewogICAgICAgICAgICBpZDogImNzdklucHV0IiwKICAgICAgICAgICAgdHlwZTogImZpbGUiLAogICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbkNoYW5nZTogX3RoaXMxOS5pbXBvcnRUZW1wbGF0ZSwKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkgewogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbgogICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IG51bGw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFjY2VwdDogIi5jc3YiCiAgICAgICAgICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImRyb3Bkb3duIgogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgIG9uQ2xpY2s6IF90aGlzMTkudG9nZ2xlRHJvcGRvd24sCiAgICAgICAgICAgIGNsYXNzTmFtZTogImRyb3Bkb3duLWJ1dHRvbiBmbG9hdC1yaWdodCBtYi0xIGJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgYWxpZ24tc2VsZi1lbmQgYnRuLXhzIgogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiaSIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiAiZmEgZmEtc2lnbi1vdXQgcHItMiIKICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5kb3dubG9hZC5sYWJlbCIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRG93bmxvYWQiCiAgICAgICAgICB9KSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJkcm9wZG93bi1jb250ZW50IHByaW50LWJ1dHRvbnMtY29udGFpbmVyIGNvbC1tZC0zIGZsZXgtZ3Jvdy0xIFxuICAgICAgICAgICAgICAgICAgICAgICAgIi5jb25jYXQoX3RoaXMxOS5zdGF0ZS5pc0Ryb3Bkb3duVmlzaWJsZSA/ICd2aXNpYmxlJyA6ICcnKQogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImEiLCB7CiAgICAgICAgICAgIGhyZWY6ICIjIiwKICAgICAgICAgICAgY2xhc3NOYW1lOiAicHktMSBtYi0xIGJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkiLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIF90aGlzMTkuZXhwb3J0VGVtcGxhdGUoZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJpIiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJwci0yIGZhIGZhLWRvd25sb2FkIgogICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgICAgICBpZDogInJlYWN0LmNvbWJpbmVkU2hpcG1lbnRzLmF2YWlsYWJsZUl0ZW1zLmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBdmFpbGFibGUgb3JkZXIgaXRlbXMiCiAgICAgICAgICB9KSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiYSIsIHsKICAgICAgICAgICAgaHJlZjogIiMiLAogICAgICAgICAgICBjbGFzc05hbWU6ICJweS0xIG1iLTEgYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSIsCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgICAgX3RoaXMxOS5leHBvcnRUZW1wbGF0ZSh0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiaSIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiAicHItMiBmYSBmYS1kb3dubG9hZCIKICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5jb21iaW5lZFNoaXBtZW50cy5ibGFua1RlbXBsYXRlLmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJCbGFuayBpbXBvcnQgdGVtcGxhdGUiCiAgICAgICAgICB9KSkpKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJidXR0b24iLCB7CiAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHJldHVybiBfdGhpczE5LnJlZnJlc2goKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xhc3NOYW1lOiAiZmxvYXQtcmlnaHQgbWItMSBidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGFsaWduLXNlbGYtZW5kIG1sLTEgYnRuLXhzIgogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiaSIsIHsKICAgICAgICAgICAgY2xhc3NOYW1lOiAiZmEgZmEtcmVmcmVzaCBwci0yIgogICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zbGF0ZSwgewogICAgICAgICAgICBpZDogInJlYWN0LmRlZmF1bHQuYnV0dG9uLnJlZnJlc2gubGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlJlbG9hZCIKICAgICAgICAgIH0pKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJidXR0b24iLCB7CiAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICBkaXNhYmxlZDogIV90aGlzMTkuaXNWYWxpZEZvclNhdmUodmFsdWVzKSwKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxOS5zYXZlKHZhbHVlcyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYXNzTmFtZTogImZsb2F0LXJpZ2h0IG1iLTEgYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBhbGlnbi1zZWxmLWVuZCBtbC0xIGJ0bi14cyIKICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImZhIGZhLXNhdmUgcHItMiIKICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5zYXZlLmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTYXZlIgogICAgICAgICAgfSkpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgIGRpc2FibGVkOiAhX3RoaXMxOS5pc1ZhbGlkRm9yU2F2ZSh2YWx1ZXMpLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHJldHVybiBfdGhpczE5LnNhdmVBbmRFeGl0KHZhbHVlcyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYXNzTmFtZTogImZsb2F0LXJpZ2h0IG1iLTEgYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBhbGlnbi1zZWxmLWVuZCBtbC0xIGJ0bi14cyIKICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImZhIGZhLXNpZ24tb3V0IHByLTIiCiAgICAgICAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNsYXRlLCB7CiAgICAgICAgICAgIGlkOiAicmVhY3QuZGVmYXVsdC5idXR0b24uc2F2ZUFuZEV4aXQubGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNhdmUgYW5kIGV4aXQiCiAgICAgICAgICB9KSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiYnV0dG9uIiwgewogICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgZGlzYWJsZWQ6IGludmFsaWQsCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTkucmVtb3ZlQWxsKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYXNzTmFtZTogImZsb2F0LXJpZ2h0IG1iLTEgYnRuIGJ0bi1vdXRsaW5lLWRhbmdlciBhbGlnbi1zZWxmLWVuZCBidG4teHMiCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJpIiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJmYSBmYS1yZW1vdmUgcHItMiIKICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5kZWxldGVBbGwubGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkRlbGV0ZSBhbGwiCiAgICAgICAgICB9KSkpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImZvcm0iLCB7CiAgICAgICAgICAgIG9uU3VibWl0OiBoYW5kbGVTdWJtaXQKICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogInRhYmxlLWZvcm0iCiAgICAgICAgICB9LCBfLm1hcChGSUVMRFMsIGZ1bmN0aW9uIChmaWVsZENvbmZpZywgZmllbGROYW1lKSB7CiAgICAgICAgICAgIHJldHVybiByZW5kZXJGb3JtRmllbGQoZmllbGRDb25maWcsIGZpZWxkTmFtZSwgewogICAgICAgICAgICAgIHN0b2NrbGlzdDogdmFsdWVzLnN0b2NrbGlzdCwKICAgICAgICAgICAgICByZWNpcGllbnRzOiBfdGhpczE5LnByb3BzLnJlY2lwaWVudHMsCiAgICAgICAgICAgICAgZGVib3VuY2VkUHJvZHVjdHNGZXRjaDogX3RoaXMxOS5kZWJvdW5jZWRQcm9kdWN0c0ZldGNoLAogICAgICAgICAgICAgIHRvdGFsQ291bnQ6IF90aGlzMTkuc3RhdGUudG90YWxDb3VudCwKICAgICAgICAgICAgICBsb2FkTW9yZVJvd3M6IF90aGlzMTkubG9hZE1vcmVSb3dzLAogICAgICAgICAgICAgIGlzUm93TG9hZGVkOiBfdGhpczE5LmlzUm93TG9hZGVkLAogICAgICAgICAgICAgIHVwZGF0ZVRvdGFsQ291bnQ6IF90aGlzMTkudXBkYXRlVG90YWxDb3VudCwKICAgICAgICAgICAgICBpc1BhZ2luYXRlZDogX3RoaXMxOS5wcm9wcy5pc1BhZ2luYXRlZCwKICAgICAgICAgICAgICBpc0Zyb21PcmRlcjogX3RoaXMxOS5zdGF0ZS52YWx1ZXMuaXNGcm9tT3JkZXIsCiAgICAgICAgICAgICAgdXBkYXRlUm93OiBfdGhpczE5LnVwZGF0ZVJvdywKICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlcywKICAgICAgICAgICAgICBpc0ZpcnN0UGFnZUxvYWRlZDogX3RoaXMxOS5zdGF0ZS5pc0ZpcnN0UGFnZUxvYWRlZCwKICAgICAgICAgICAgICByZW1vdmVJdGVtOiBfdGhpczE5LnJlbW92ZUl0ZW0sCiAgICAgICAgICAgICAgb25SZXNwb25zZTogX3RoaXMxOS5mZXRjaExpbmVJdGVtcywKICAgICAgICAgICAgICBzYXZlSXRlbXM6IF90aGlzMTkuc2F2ZVJlcXVpc2l0aW9uSXRlbXNJbkN1cnJlbnRTdGVwLAogICAgICAgICAgICAgIGludmFsaWQ6IGludmFsaWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogInN1Ym1pdC1idXR0b25zIgogICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsKICAgICAgICAgICAgdHlwZTogInN1Ym1pdCIsCiAgICAgICAgICAgIGRpc2FibGVkOiBpbnZhbGlkLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHJldHVybiBfdGhpczE5LnByZXZpb3VzUGFnZSh2YWx1ZXMsIGludmFsaWQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGFzc05hbWU6ICJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tZm9ybSBidG4teHMiCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5wcmV2aW91cy5sYWJlbCIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUHJldmlvdXMiCiAgICAgICAgICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJidXR0b24iLCB7CiAgICAgICAgICAgIHR5cGU6ICJzdWJtaXQiLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHJldHVybiBfdGhpczE5Lm5leHRQYWdlKHZhbHVlcyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYXNzTmFtZTogImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1mb3JtIGZsb2F0LXJpZ2h0IGJ0bi14cyIsCiAgICAgICAgICAgIGRpc2FibGVkOiAhXy5zb21lKHZhbHVlcy5saW5lSXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuICFfLmlzRW1wdHkoaXRlbSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5kZWZhdWx0LmJ1dHRvbi5uZXh0LmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJOZXh0IgogICAgICAgICAgfSkpKSkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJ1cGRhdGVTb3J0T3JkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNvcnRPcmRlcihsaW5lSXRlbXMpIHsKICAgICAgcmV0dXJuIF8ubWFwKGxpbmVJdGVtcywgZnVuY3Rpb24gKGl0ZW0sIHJvd0luZGV4KSB7CiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbSksIHt9LCB7CiAgICAgICAgICBzb3J0T3JkZXI6IGl0ZW0uc29ydE9yZGVyIC0gaXRlbS5zb3J0T3JkZXIgJSAxMDAgKyByb3dJbmRleCArIDEKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBBZGRJdGVtc1BhZ2U7Cn0oQ29tcG9uZW50KTsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkgewogIHJldHVybiB7CiAgICByZWNpcGllbnRzOiBzdGF0ZS51c2Vycy5kYXRhLAogICAgdHJhbnNsYXRlOiB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UoZ2V0VHJhbnNsYXRlKHN0YXRlLmxvY2FsaXplKSksCiAgICBzdG9ja01vdmVtZW50VHJhbnNsYXRpb25zRmV0Y2hlZDogc3RhdGUuc2Vzc2lvbi5mZXRjaGVkVHJhbnNsYXRpb25zLnN0b2NrTW92ZW1lbnQsCiAgICBkZWJvdW5jZVRpbWU6IHN0YXRlLnNlc3Npb24uc2VhcmNoQ29uZmlnLmRlYm91bmNlVGltZSwKICAgIG1pblNlYXJjaExlbmd0aDogc3RhdGUuc2Vzc2lvbi5zZWFyY2hDb25maWcubWluU2VhcmNoTGVuZ3RoLAogICAgbWluaW11bUV4cGlyYXRpb25EYXRlOiBzdGF0ZS5zZXNzaW9uLm1pbmltdW1FeHBpcmF0aW9uRGF0ZSwKICAgIGhhc1BhY2tpbmdTdXBwb3J0OiBzdGF0ZS5zZXNzaW9uLmN1cnJlbnRMb2NhdGlvbi5oYXNQYWNraW5nU3VwcG9ydCwKICAgIGlzUGFnaW5hdGVkOiBzdGF0ZS5zZXNzaW9uLmlzUGFnaW5hdGVkLAogICAgcGFnZVNpemU6IHN0YXRlLnNlc3Npb24ucGFnZVNpemUKICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgewogIHNob3dTcGlubmVyOiBzaG93U3Bpbm5lciwKICBoaWRlU3Bpbm5lcjogaGlkZVNwaW5uZXIsCiAgZmV0Y2hVc2VyczogZmV0Y2hVc2Vycwp9KShBZGRJdGVtc1BhZ2UpOwpBZGRJdGVtc1BhZ2UucHJvcFR5cGVzID0gewogIC8qKiBJbml0aWFsIGNvbXBvbmVudCdzIGRhdGEgKi8KICBpbml0aWFsVmFsdWVzOiBQcm9wVHlwZXMuc2hhcGUoewogICAgb3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoewogICAgICBpZDogUHJvcFR5cGVzLnN0cmluZwogICAgfSksCiAgICBoYXNNYW5hZ2VJbnZlbnRvcnk6IFByb3BUeXBlcy5ib29sCiAgfSkuaXNSZXF1aXJlZCwKICAvKioKICAgKiBGdW5jdGlvbiBjYWxsZWQgd2l0aCB0aGUgZm9ybSBkYXRhIHdoZW4gdGhlIGhhbmRsZVN1Ym1pdCgpCiAgICogaXMgZmlyZWQgZnJvbSB3aXRoaW4gdGhlIGZvcm0gY29tcG9uZW50LgogICAqLwogIG5leHRQYWdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLAogIC8qKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiBkYXRhIGlzIGxvYWRpbmcgKi8KICBzaG93U3Bpbm5lcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICAvKiogRnVuY3Rpb24gY2FsbGVkIHdoZW4gZGF0YSBoYXMgbG9hZGVkICovCiAgaGlkZVNwaW5uZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgLyoqIEZ1bmN0aW9uIGZldGNoaW5nIHVzZXJzICovCiAgZmV0Y2hVc2VyczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICAvKiogQXJyYXkgb2YgYXZhaWxhYmxlIHJlY2lwaWVudHMgICovCiAgcmVjaXBpZW50czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHt9KSkuaXNSZXF1aXJlZCwKICB0cmFuc2xhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgc3RvY2tNb3ZlbWVudFRyYW5zbGF0aW9uc0ZldGNoZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsCiAgZGVib3VuY2VUaW1lOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsCiAgbWluU2VhcmNoTGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsCiAgbWluaW11bUV4cGlyYXRpb25EYXRlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsCiAgLyoqIFJldHVybiB0cnVlIGlmIHBhZ2luYXRpb24gaXMgZW5hYmxlZCAqLwogIGlzUGFnaW5hdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLAogIC8qKiBGdW5jdGlvbiByZXR1cm5pbmcgdXNlciB0byB0aGUgcHJldmlvdXMgcGFnZSAqLwogIHByZXZpb3VzUGFnZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICBwYWdlU2l6ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkCn07"},null]}