{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/form-elements/TableBodyVirtualized.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/form-elements/TableBodyVirtualized.jsx","mtime":1698037747000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgInByb3RvdHlwZSIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQppbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnOwppbXBvcnQgXyBmcm9tICdsb2Rhc2gnOwppbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnOwppbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICdyZWFjdC1sb2NhbGl6ZS1yZWR1eCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCB7IEF1dG9TaXplciwgSW5maW5pdGVMb2FkZXIsIExpc3QgfSBmcm9tICdyZWFjdC12aXJ0dWFsaXplZCc7CmltcG9ydCBUYWJsZVJvdyBmcm9tICdjb21wb25lbnRzL2Zvcm0tZWxlbWVudHMvVGFibGVSb3cnOwppbXBvcnQgeyB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UgfSBmcm9tICd1dGlscy9UcmFuc2xhdGUnOwp2YXIgUk9XX0hFSUdIVCA9IDI4Owp2YXIgVGFibGVCb2R5VmlydHVhbGl6ZWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoVGFibGVCb2R5VmlydHVhbGl6ZWQsIF9Db21wb25lbnQpOwogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGFibGVCb2R5VmlydHVhbGl6ZWQpOwogIGZ1bmN0aW9uIFRhYmxlQm9keVZpcnR1YWxpemVkKHByb3BzKSB7CiAgICB2YXIgX3RoaXM7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVCb2R5VmlydHVhbGl6ZWQpOwogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7CiAgICBfdGhpcy5yb3dSZW5kZXJlciA9IF90aGlzLnJvd1JlbmRlcmVyLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOwogICAgX3RoaXMuZ2V0Um93SGVpZ2h0ID0gX3RoaXMuZ2V0Um93SGVpZ2h0LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOwogICAgX3RoaXMuYmluZExpc3RSZWYgPSBfdGhpcy5iaW5kTGlzdFJlZi5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIF90aGlzLmdldEhlaWdodCA9IF90aGlzLmdldEhlaWdodC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIHJldHVybiBfdGhpczsKICB9CiAgX2NyZWF0ZUNsYXNzKFRhYmxlQm9keVZpcnR1YWxpemVkLCBbewogICAga2V5OiAiY29tcG9uZW50RGlkVXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7CiAgICAgIGlmICh0aGlzLmxpc3QpIHsKICAgICAgICB0aGlzLmxpc3QucmVjb21wdXRlUm93SGVpZ2h0cygpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0SGVpZ2h0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIZWlnaHQoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgX3RoaXMkcHJvcHMkZmllbGRzQ29uID0gX3RoaXMkcHJvcHMuZmllbGRzQ29uZmlnLAogICAgICAgIHN1YmZpZWxkS2V5ID0gX3RoaXMkcHJvcHMkZmllbGRzQ29uLnN1YmZpZWxkS2V5LAogICAgICAgIGdldER5bmFtaWNSb3dBdHRyID0gX3RoaXMkcHJvcHMkZmllbGRzQ29uLmdldER5bmFtaWNSb3dBdHRyLAogICAgICAgIGZpZWxkcyA9IF90aGlzJHByb3BzLmZpZWxkcywKICAgICAgICBwcm9wZXJ0aWVzID0gX3RoaXMkcHJvcHMucHJvcGVydGllczsKICAgICAgdmFyIGhlaWdodCA9IDA7CiAgICAgIHZhciBtYXhUYWJsZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCA8IDkwMCA/CiAgICAgIC8vIDAuMzUgKiB3aW5kb3cuaW5uZXJIZWlnaHQgPSAzNXZoIGZyb20gdGFibGUtY29udGVudCBjbGFzcyBpbiBTdG9ja01vdmVtZW50LnNjc3MKICAgICAgMC4zNSAqIHdpbmRvdy5pbm5lckhlaWdodCA6IDAuNDAgKiB3aW5kb3cuaW5uZXJIZWlnaHQ7CiAgICAgIGlmICghc3ViZmllbGRLZXkpIHsKICAgICAgICBoZWlnaHQgPSBmaWVsZHMudmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZpZWxkKSB7CiAgICAgICAgICB2YXIgZHluYW1pY0F0dHIgPSBnZXREeW5hbWljUm93QXR0ciA/IGdldER5bmFtaWNSb3dBdHRyKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcGVydGllcyksIHt9LCB7CiAgICAgICAgICAgIHJvd1ZhbHVlczogZmllbGQKICAgICAgICAgIH0pKSA6IHt9OwogICAgICAgICAgLy8gSWYgYSByb3cgaXMgc3VwcG9zZWQgdG8gYmUgaGlkZGVuIG9yIHRoZSBoZWlnaHQgaXMgYWxyZWFkeSBoaWdoZXIgdGhhbiBtYXggaGVpZ2h0LAogICAgICAgICAgLy8gcmV0dXJuIHRoaXMgaGVpZ2h0IHdpdGhvdXQgaW5jcmVhc2luZyBpdAogICAgICAgICAgaWYgKGR5bmFtaWNBdHRyLmhpZGVSb3cgfHwgYWNjID4gbWF4VGFibGVIZWlnaHQpIHsKICAgICAgICAgICAgcmV0dXJuIGFjYzsKICAgICAgICAgIH0KICAgICAgICAgIC8vIElmIGEgcm93IGlzIG5vdCBoaWRkZW4gYW5kIGhlaWdodCBoYXMgbm90IHlldCByZWFjaGVkIG1heGltdW0sCiAgICAgICAgICAvLyBpbmNyZWFzZSBpdCBieSB0aGUgcm93IGhlaWdodAogICAgICAgICAgcmV0dXJuIGFjYyArIFJPV19IRUlHSFQ7CiAgICAgICAgfSwgaGVpZ2h0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfLmZvckVhY2goZmllbGRzLnZhbHVlLCBmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICAgIHZhciBkeW5hbWljQXR0ciA9IGdldER5bmFtaWNSb3dBdHRyID8gZ2V0RHluYW1pY1Jvd0F0dHIoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wZXJ0aWVzKSwge30sIHsKICAgICAgICAgICAgcm93VmFsdWVzOiBmaWVsZAogICAgICAgICAgfSkpIDoge307CiAgICAgICAgICB2YXIgc3ViZmllbGRzID0gZmllbGRbc3ViZmllbGRLZXldOwogICAgICAgICAgaWYgKGR5bmFtaWNBdHRyLmhpZGVSb3cpIHsKICAgICAgICAgICAgcmV0dXJuOyAvLyBMb2Rhc2gncyBmb3JFYWNoIHZlcnNpb24gb2YgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoIWhlaWdodCkgewogICAgICAgICAgICBoZWlnaHQgPSBST1dfSEVJR0hUICogKHN1YmZpZWxkcy5sZW5ndGggKyAxKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0ICsgUk9XX0hFSUdIVCAqIChzdWJmaWVsZHMubGVuZ3RoICsgMSkgPiBtYXhUYWJsZUhlaWdodCkgewogICAgICAgICAgICBoZWlnaHQgPSBtYXhUYWJsZUhlaWdodDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGhlaWdodCArPSBST1dfSEVJR0hUICogKHN1YmZpZWxkcy5sZW5ndGggKyAxKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gaGVpZ2h0IHx8IFJPV19IRUlHSFQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Um93SGVpZ2h0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSb3dIZWlnaHQoX3JlZikgewogICAgICB2YXIgX2ZpZWxkcyR2YWx1ZTsKICAgICAgdmFyIGluZGV4ID0gX3JlZi5pbmRleDsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgX3RoaXMkcHJvcHMyJGZpZWxkc0NvID0gX3RoaXMkcHJvcHMyLmZpZWxkc0NvbmZpZywKICAgICAgICBzdWJmaWVsZEtleSA9IF90aGlzJHByb3BzMiRmaWVsZHNDby5zdWJmaWVsZEtleSwKICAgICAgICBnZXREeW5hbWljUm93QXR0ciA9IF90aGlzJHByb3BzMiRmaWVsZHNDby5nZXREeW5hbWljUm93QXR0ciwKICAgICAgICBmaWVsZHMgPSBfdGhpcyRwcm9wczIuZmllbGRzLAogICAgICAgIHByb3BlcnRpZXMgPSBfdGhpcyRwcm9wczIucHJvcGVydGllczsKICAgICAgdmFyIHJvd1ZhbHVlcyA9IGZpZWxkcyA9PT0gbnVsbCB8fCBmaWVsZHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZmllbGRzJHZhbHVlID0gZmllbGRzLnZhbHVlKSA9PT0gbnVsbCB8fCBfZmllbGRzJHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZmllbGRzJHZhbHVlW2luZGV4XTsKICAgICAgdmFyIGR5bmFtaWNBdHRyID0gZ2V0RHluYW1pY1Jvd0F0dHIgJiYgcm93VmFsdWVzID8gZ2V0RHluYW1pY1Jvd0F0dHIoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wZXJ0aWVzKSwge30sIHsKICAgICAgICBpbmRleDogaW5kZXgsCiAgICAgICAgcm93VmFsdWVzOiByb3dWYWx1ZXMKICAgICAgfSkpIDoge307CiAgICAgIGlmIChkeW5hbWljQXR0ci5oaWRlUm93KSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgaWYgKCFzdWJmaWVsZEtleSkgewogICAgICAgIHJldHVybiBST1dfSEVJR0hUOwogICAgICB9CiAgICAgIHZhciBzdWJmaWVsZHMgPSByb3dWYWx1ZXMgPyByb3dWYWx1ZXNbc3ViZmllbGRLZXldIDogbnVsbDsKICAgICAgaWYgKCFzdWJmaWVsZHMpIHsKICAgICAgICByZXR1cm4gUk9XX0hFSUdIVDsKICAgICAgfQogICAgICBpZiAoZHluYW1pY0F0dHIuaGlkZVN1YmZpZWxkcykgewogICAgICAgIHJldHVybiBST1dfSEVJR0hUOwogICAgICB9CiAgICAgIHJldHVybiBST1dfSEVJR0hUICogKHN1YmZpZWxkcy5sZW5ndGggKyAxKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyb3dSZW5kZXJlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcm93UmVuZGVyZXIoX3JlZjIpIHsKICAgICAgdmFyIGtleSA9IF9yZWYyLmtleSwKICAgICAgICBpbmRleCA9IF9yZWYyLmluZGV4LAogICAgICAgIHN0eWxlID0gX3JlZjIuc3R5bGU7CiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLAogICAgICAgIGZpZWxkc0NvbmZpZyA9IF90aGlzJHByb3BzMy5maWVsZHNDb25maWcsCiAgICAgICAgcHJvcGVydGllcyA9IF90aGlzJHByb3BzMy5wcm9wZXJ0aWVzLAogICAgICAgIGZpZWxkcyA9IF90aGlzJHByb3BzMy5maWVsZHMsCiAgICAgICAgX3RoaXMkcHJvcHMzJHRhYmxlUmVmID0gX3RoaXMkcHJvcHMzLnRhYmxlUmVmLAogICAgICAgIHRhYmxlUmVmID0gX3RoaXMkcHJvcHMzJHRhYmxlUmVmID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF90aGlzJHByb3BzMyR0YWJsZVJlZiwKICAgICAgICBfdGhpcyRwcm9wczMkYWRkUm93ID0gX3RoaXMkcHJvcHMzLmFkZFJvdywKICAgICAgICBhZGRSb3cgPSBfdGhpcyRwcm9wczMkYWRkUm93ID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgcm93ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgICAgIHJldHVybiBmaWVsZHMucHVzaChyb3cpOwogICAgICAgIH0gOiBfdGhpcyRwcm9wczMkYWRkUm93OwogICAgICB2YXIgZmllbGQgPSAiIi5jb25jYXQoZmllbGRzLm5hbWUsICJbIikuY29uY2F0KGluZGV4LCAiXSIpOwogICAgICB2YXIgUm93Q29tcG9uZW50ID0gZmllbGRzQ29uZmlnLnJvd0NvbXBvbmVudCB8fCBUYWJsZVJvdzsKICAgICAgdmFyIHRvdGFsQ291bnQgPSBwcm9wZXJ0aWVzLnRvdGFsQ291bnQ7CiAgICAgIGlmIChmaWVsZHMudmFsdWVbaW5kZXhdKSB7CiAgICAgICAgdmFyIGR5bmFtaWNSb3dBdHRyID0gZmllbGRzQ29uZmlnLmdldER5bmFtaWNSb3dBdHRyID8gZmllbGRzQ29uZmlnLmdldER5bmFtaWNSb3dBdHRyKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcGVydGllcyksIHt9LCB7CiAgICAgICAgICByb3dWYWx1ZXM6IGZpZWxkcy52YWx1ZVtpbmRleF0KICAgICAgICB9KSkgOiB7fTsKICAgICAgICBpZiAoZHluYW1pY1Jvd0F0dHIuaGlkZVJvdykgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICBzdHlsZTogc3R5bGUKICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3dDb21wb25lbnQsIHsKICAgICAgICAgIGZpZWxkOiBmaWVsZCwKICAgICAgICAgIGluZGV4OiBpbmRleCwKICAgICAgICAgIHByb3BlcnRpZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcGVydGllcyksIHt9LCB7CiAgICAgICAgICAgIHJvd0NvdW50OiB0b3RhbENvdW50CiAgICAgICAgICB9KSwKICAgICAgICAgIGFkZFJvdzogYWRkUm93LAogICAgICAgICAgZmllbGRzQ29uZmlnOiBmaWVsZHNDb25maWcsCiAgICAgICAgICByZW1vdmVSb3c6IGZ1bmN0aW9uIHJlbW92ZVJvdygpIHsKICAgICAgICAgICAgcmV0dXJuIGZpZWxkcy5yZW1vdmUoaW5kZXgpOwogICAgICAgICAgfSwKICAgICAgICAgIHJvd1ZhbHVlczogZmllbGRzLnZhbHVlW2luZGV4XSwKICAgICAgICAgIHJvd1JlZjogZnVuY3Rpb24gcm93UmVmKGVsLCBmaWVsZE5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIHRhYmxlUmVmKGVsLCBmaWVsZE5hbWUsIGluZGV4KTsKICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgIH0KICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAga2V5OiBrZXksCiAgICAgICAgc3R5bGU6IHN0eWxlCiAgICAgIH0sIHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5kZWZhdWx0LmxvYWRpbmcubGFiZWwnLCAnTG9hZGluZy4uLicpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJiaW5kTGlzdFJlZiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZExpc3RSZWYocmVmKSB7CiAgICAgIHRoaXMubGlzdCA9IHJlZjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuCiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLAogICAgICAgIHByb3BlcnRpZXMgPSBfdGhpcyRwcm9wczQucHJvcGVydGllcywKICAgICAgICBwYWdlU2l6ZSA9IF90aGlzJHByb3BzNC5wYWdlU2l6ZTsKICAgICAgdmFyIHRvdGFsQ291bnQgPSBwcm9wZXJ0aWVzLnRvdGFsQ291bnQsCiAgICAgICAgbG9hZE1vcmVSb3dzID0gcHJvcGVydGllcy5sb2FkTW9yZVJvd3MsCiAgICAgICAgaXNSb3dMb2FkZWQgPSBwcm9wZXJ0aWVzLmlzUm93TG9hZGVkLAogICAgICAgIGlzRmlyc3RQYWdlTG9hZGVkID0gcHJvcGVydGllcy5pc0ZpcnN0UGFnZUxvYWRlZDsKICAgICAgdmFyIGxvYWRQYWdlID0gaXNGaXJzdFBhZ2VMb2FkZWQgPyBmdW5jdGlvbiAoKSB7fSA6IGxvYWRNb3JlUm93czsKICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbmZpbml0ZUxvYWRlciwgewogICAgICAgIGxvYWRNb3JlUm93czogbG9hZFBhZ2UsCiAgICAgICAgaXNSb3dMb2FkZWQ6IGlzUm93TG9hZGVkLAogICAgICAgIHJvd0NvdW50OiB0b3RhbENvdW50LAogICAgICAgIG1pbmltdW1CYXRjaFNpemU6IHBhZ2VTaXplCiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgIHZhciBvblJvd3NSZW5kZXJlZCA9IF9yZWYzLm9uUm93c1JlbmRlcmVkOwogICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvU2l6ZXIsIHsKICAgICAgICAgIGRpc2FibGVIZWlnaHQ6IHRydWUKICAgICAgICB9LCBmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICAgIHZhciB3aWR0aCA9IF9yZWY0LndpZHRoOwogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3QsIHsKICAgICAgICAgICAgcmVmOiBfdGhpczIuYmluZExpc3RSZWYsCiAgICAgICAgICAgIGhlaWdodDogX3RoaXMyLmdldEhlaWdodCgpLAogICAgICAgICAgICBvblJvd3NSZW5kZXJlZDogb25Sb3dzUmVuZGVyZWQsCiAgICAgICAgICAgIHJvd0NvdW50OiB0b3RhbENvdW50LAogICAgICAgICAgICByb3dIZWlnaHQ6IF90aGlzMi5nZXRSb3dIZWlnaHQsCiAgICAgICAgICAgIHJvd1JlbmRlcmVyOiBfdGhpczIucm93UmVuZGVyZXIsCiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICAgICAgcHJvcHM6IHByb3BlcnRpZXMKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBUYWJsZUJvZHlWaXJ0dWFsaXplZDsKfShDb21wb25lbnQpOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7CiAgcmV0dXJuIHsKICAgIHBhZ2VTaXplOiBzdGF0ZS5zZXNzaW9uLnBhZ2VTaXplLAogICAgdHJhbnNsYXRlOiB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UoZ2V0VHJhbnNsYXRlKHN0YXRlLmxvY2FsaXplKSkKICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywge30pKFRhYmxlQm9keVZpcnR1YWxpemVkKTsKVGFibGVCb2R5VmlydHVhbGl6ZWQucHJvcFR5cGVzID0gewogIGZpZWxkc0NvbmZpZzogUHJvcFR5cGVzLnNoYXBlKHsKICAgIGdldER5bmFtaWNBdHRyOiBQcm9wVHlwZXMuZnVuYwogIH0pLmlzUmVxdWlyZWQsCiAgZmllbGRzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe30pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe30pKV0pLmlzUmVxdWlyZWQsCiAgcHJvcGVydGllczogUHJvcFR5cGVzLnNoYXBlKHt9KS5pc1JlcXVpcmVkLAogIGFkZFJvdzogUHJvcFR5cGVzLmZ1bmMsCiAgdGFibGVSZWY6IFByb3BUeXBlcy5mdW5jLAogIHBhZ2VTaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsCiAgdHJhbnNsYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkCn07ClRhYmxlQm9keVZpcnR1YWxpemVkLmRlZmF1bHRQcm9wcyA9IHsKICBhZGRSb3c6IHVuZGVmaW5lZCwKICB0YWJsZVJlZjogdW5kZWZpbmVkCn07"},null]}