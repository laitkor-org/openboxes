{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/returns/inbound/InboundReturnsWizard.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/returns/inbound/InboundReturnsWizard.jsx","mtime":1698037749000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCAicHJvdG90eXBlIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWQiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQppbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnOwppbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnOwppbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICdyZWFjdC1sb2NhbGl6ZS1yZWR1eCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCB7IGZldGNoVHJhbnNsYXRpb25zLCBoaWRlU3Bpbm5lciwgc2hvd1NwaW5uZXIgfSBmcm9tICdhY3Rpb25zJzsKaW1wb3J0IEFkZEl0ZW1zUGFnZSBmcm9tICdjb21wb25lbnRzL3JldHVybnMvaW5ib3VuZC9BZGRJdGVtc1BhZ2UnOwppbXBvcnQgQ3JlYXRlSW5ib3VuZFJldHVybiBmcm9tICdjb21wb25lbnRzL3JldHVybnMvaW5ib3VuZC9DcmVhdGVJbmJvdW5kUmV0dXJuJzsKaW1wb3J0IFNlbmRJbmJvdW5kUmV0dXJuIGZyb20gJ2NvbXBvbmVudHMvcmV0dXJucy9pbmJvdW5kL1NlbmRJbmJvdW5kUmV0dXJuJzsKaW1wb3J0IFdpemFyZCBmcm9tICdjb21wb25lbnRzL3dpemFyZC9XaXphcmQnOwppbXBvcnQgYXBpQ2xpZW50LCB7IHBhcnNlUmVzcG9uc2UgfSBmcm9tICd1dGlscy9hcGlDbGllbnQnOwppbXBvcnQgeyB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UgfSBmcm9tICd1dGlscy9UcmFuc2xhdGUnOwppbXBvcnQgJ2NvbXBvbmVudHMvc3RvY2stbW92ZW1lbnQtd2l6YXJkL1N0b2NrTW92ZW1lbnQuc2Nzcyc7CnZhciBJbmJvdW5kUmV0dXJucyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhJbmJvdW5kUmV0dXJucywgX0NvbXBvbmVudCk7CiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJbmJvdW5kUmV0dXJucyk7CiAgZnVuY3Rpb24gSW5ib3VuZFJldHVybnMocHJvcHMpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmJvdW5kUmV0dXJucyk7CiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTsKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImRhdGFGZXRjaGVkIiwgZmFsc2UpOwogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIHZhbHVlczogX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlcywKICAgICAgY3VycmVudFBhZ2U6IDEKICAgIH07CiAgICBfdGhpcy51cGRhdGVXaXphcmRWYWx1ZXMgPSBfdGhpcy51cGRhdGVXaXphcmRWYWx1ZXMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIF9jcmVhdGVDbGFzcyhJbmJvdW5kUmV0dXJucywgW3sKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdGhpcy5wcm9wcy5mZXRjaFRyYW5zbGF0aW9ucygnJywgJ2luYm91bmRSZXR1cm5zJyk7CiAgICAgIHRoaXMucHJvcHMuZmV0Y2hUcmFuc2xhdGlvbnMoJycsICdzdG9ja01vdmVtZW50Jyk7CiAgICAgIGlmICh0aGlzLnByb3BzLmluYm91bmRSZXR1cm5zVHJhbnNsYXRpb25zRmV0Y2hlZCkgewogICAgICAgIHRoaXMuZGF0YUZldGNoZWQgPSB0cnVlOwogICAgICAgIHRoaXMuZmV0Y2hJbml0aWFsVmFsdWVzKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykgewogICAgICBpZiAodGhpcy5wcm9wcy5sb2NhbGUgJiYgdGhpcy5wcm9wcy5sb2NhbGUgIT09IG5leHRQcm9wcy5sb2NhbGUpIHsKICAgICAgICB0aGlzLnByb3BzLmZldGNoVHJhbnNsYXRpb25zKG5leHRQcm9wcy5sb2NhbGUsICdpbmJvdW5kUmV0dXJucycpOwogICAgICAgIHRoaXMucHJvcHMuZmV0Y2hUcmFuc2xhdGlvbnMobmV4dFByb3BzLmxvY2FsZSwgJ3N0b2NrTW92ZW1lbnQnKTsKICAgICAgfQogICAgICBpZiAobmV4dFByb3BzLmluYm91bmRSZXR1cm5zVHJhbnNsYXRpb25zRmV0Y2hlZCAmJiAhdGhpcy5kYXRhRmV0Y2hlZCkgewogICAgICAgIHRoaXMuZGF0YUZldGNoZWQgPSB0cnVlOwogICAgICAgIHRoaXMuZmV0Y2hJbml0aWFsVmFsdWVzKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGVwTGlzdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIFt0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuaW5ib3VuZFJldHVybnMuY3JlYXRlLmxhYmVsJywgJ0NyZWF0ZScpLCB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuaW5ib3VuZFJldHVybnMuYWRkSXRlbXMubGFiZWwnLCAnQWRkIGl0ZW1zJyksIHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5pbmJvdW5kUmV0dXJucy5zZW5kLmxhYmVsJywgJ1NlbmQnKV07CiAgICB9CiAgfSwgewogICAga2V5OiAid2l6YXJkVGl0bGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLnN0YXRlLnZhbHVlczsKICAgICAgaWYgKCF2YWx1ZXMuc3RvY2tUcmFuc2Zlck51bWJlciB8fCAhdmFsdWVzLm9yaWdpbiB8fCAhdmFsdWVzLmRlc3RpbmF0aW9uKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CiAgICAgIHJldHVybiBbewogICAgICAgIHRleHQ6ICdJbmJvdW5kIFJldHVybicsCiAgICAgICAgY29sb3I6ICcjMDAwMDAwJywKICAgICAgICBkZWxpbWV0ZXI6ICcgfCAnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiB2YWx1ZXMuc3RvY2tUcmFuc2Zlck51bWJlciwKICAgICAgICBjb2xvcjogJyMwMDAwMDAnLAogICAgICAgIGRlbGltZXRlcjogJyAtICcKICAgICAgfSwgewogICAgICAgIHRleHQ6IHZhbHVlcy5vcmlnaW4ubmFtZSwKICAgICAgICBjb2xvcjogJyMwMDRkNDAnLAogICAgICAgIGRlbGltZXRlcjogJyB0byAnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiB2YWx1ZXMuZGVzdGluYXRpb24ubmFtZSwKICAgICAgICBjb2xvcjogJyMwMTU3OWInLAogICAgICAgIGRlbGltZXRlcjogJycKICAgICAgfV07CiAgICB9CiAgfSwgewogICAga2V5OiAiZmV0Y2hJbml0aWFsVmFsdWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEluaXRpYWxWYWx1ZXMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwogICAgICBpZiAodGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuaW5ib3VuZFJldHVybklkKSB7CiAgICAgICAgdGhpcy5wcm9wcy5zaG93U3Bpbm5lcigpOwogICAgICAgIHZhciB1cmwgPSAiL29wZW5ib3hlcy9hcGkvc3RvY2tUcmFuc2ZlcnMvIi5jb25jYXQodGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuaW5ib3VuZFJldHVybklkKTsKICAgICAgICBhcGlDbGllbnQuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIHZhciBpbmJvdW5kUmV0dXJuID0gcGFyc2VSZXNwb25zZShyZXNwb25zZS5kYXRhLmRhdGEpOwogICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsKICAgICAgICAgICAgdmFsdWVzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGluYm91bmRSZXR1cm4pLCB7fSwgewogICAgICAgICAgICAgIG9yaWdpbjogewogICAgICAgICAgICAgICAgaWQ6IGluYm91bmRSZXR1cm4ub3JpZ2luLmlkLAogICAgICAgICAgICAgICAgbmFtZTogaW5ib3VuZFJldHVybi5vcmlnaW4ubmFtZSwKICAgICAgICAgICAgICAgIGxhYmVsOiBpbmJvdW5kUmV0dXJuLm9yaWdpbi5uYW1lCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogewogICAgICAgICAgICAgICAgaWQ6IGluYm91bmRSZXR1cm4uZGVzdGluYXRpb24uaWQsCiAgICAgICAgICAgICAgICBuYW1lOiBpbmJvdW5kUmV0dXJuLmRlc3RpbmF0aW9uLm5hbWUsCiAgICAgICAgICAgICAgICBsYWJlbDogaW5ib3VuZFJldHVybi5kZXN0aW5hdGlvbi5uYW1lCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgY3VycmVudFBhZ2U6IGluYm91bmRSZXR1cm4uc3RhdHVzID09PSAnUEVORElORycgPyAyIDogMwogICAgICAgICAgfSk7CiAgICAgICAgICBfdGhpczIucHJvcHMuaGlkZVNwaW5uZXIoKTsKICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnByb3BzLmhpZGVTcGlubmVyKCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVXaXphcmRWYWx1ZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdpemFyZFZhbHVlcyhjdXJyZW50UGFnZSwgdmFsdWVzKSB7CiAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZSwKICAgICAgICB2YWx1ZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdmFsdWVzKSwge30sIHsKICAgICAgICAgIG9yaWdpbjogewogICAgICAgICAgICBpZDogdmFsdWVzLm9yaWdpbi5pZCwKICAgICAgICAgICAgbmFtZTogdmFsdWVzLm9yaWdpbi5uYW1lLAogICAgICAgICAgICBsYWJlbDogdmFsdWVzLm9yaWdpbi5uYW1lCiAgICAgICAgICB9LAogICAgICAgICAgZGVzdGluYXRpb246IHsKICAgICAgICAgICAgaWQ6IHZhbHVlcy5kZXN0aW5hdGlvbi5pZCwKICAgICAgICAgICAgbmFtZTogdmFsdWVzLmRlc3RpbmF0aW9uLm5hbWUsCiAgICAgICAgICAgIGxhYmVsOiB2YWx1ZXMuZGVzdGluYXRpb24ubmFtZQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLAogICAgICAgIHZhbHVlcyA9IF90aGlzJHN0YXRlLnZhbHVlcywKICAgICAgICBjdXJyZW50UGFnZSA9IF90aGlzJHN0YXRlLmN1cnJlbnRQYWdlOwogICAgICB2YXIgcGFnZUxpc3QgPSBbQ3JlYXRlSW5ib3VuZFJldHVybiwgQWRkSXRlbXNQYWdlLCBTZW5kSW5ib3VuZFJldHVybl07CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wcy5sb2NhdGlvbiwKICAgICAgICBoaXN0b3J5ID0gX3RoaXMkcHJvcHMuaGlzdG9yeSwKICAgICAgICBtYXRjaCA9IF90aGlzJHByb3BzLm1hdGNoOwogICAgICB2YXIgbG9jYXRpb25JZCA9IGxvY2F0aW9uLmlkOwogICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV2l6YXJkLCB7CiAgICAgICAgcGFnZUxpc3Q6IHBhZ2VMaXN0LAogICAgICAgIHN0ZXBMaXN0OiB0aGlzLnN0ZXBMaXN0LAogICAgICAgIGluaXRpYWxWYWx1ZXM6IHZhbHVlcywKICAgICAgICB0aXRsZTogdGhpcy53aXphcmRUaXRsZSwKICAgICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2UsCiAgICAgICAgcHJldlBhZ2U6IGN1cnJlbnRQYWdlID09PSAxID8gMSA6IGN1cnJlbnRQYWdlIC0gMSwKICAgICAgICBhZGRpdGlvbmFsUHJvcHM6IHsKICAgICAgICAgIGxvY2F0aW9uSWQ6IGxvY2F0aW9uSWQsCiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sCiAgICAgICAgICBoaXN0b3J5OiBoaXN0b3J5LAogICAgICAgICAgbWF0Y2g6IG1hdGNoCiAgICAgICAgfSwKICAgICAgICB1cGRhdGVXaXphcmRWYWx1ZXM6IHRoaXMudXBkYXRlV2l6YXJkVmFsdWVzCiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gSW5ib3VuZFJldHVybnM7Cn0oQ29tcG9uZW50KTsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkgewogIHJldHVybiB7CiAgICBsb2NhbGU6IHN0YXRlLnNlc3Npb24uYWN0aXZlTGFuZ3VhZ2UsCiAgICBsb2NhdGlvbjogc3RhdGUuc2Vzc2lvbi5jdXJyZW50TG9jYXRpb24sCiAgICBpbmJvdW5kUmV0dXJuc1RyYW5zbGF0aW9uc0ZldGNoZWQ6IHN0YXRlLnNlc3Npb24uZmV0Y2hlZFRyYW5zbGF0aW9ucy5pbmJvdW5kUmV0dXJucywKICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlV2l0aERlZmF1bHRNZXNzYWdlKGdldFRyYW5zbGF0ZShzdGF0ZS5sb2NhbGl6ZSkpCiAgfTsKfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHsKICBzaG93U3Bpbm5lcjogc2hvd1NwaW5uZXIsCiAgaGlkZVNwaW5uZXI6IGhpZGVTcGlubmVyLAogIGZldGNoVHJhbnNsYXRpb25zOiBmZXRjaFRyYW5zbGF0aW9ucwp9KShJbmJvdW5kUmV0dXJucyk7CkluYm91bmRSZXR1cm5zLnByb3BUeXBlcyA9IHsKICBtYXRjaDogUHJvcFR5cGVzLnNoYXBlKHsKICAgIHBhcmFtczogUHJvcFR5cGVzLnNoYXBlKHsKICAgICAgaW5ib3VuZFJldHVybklkOiBQcm9wVHlwZXMuc3RyaW5nCiAgICB9KQogIH0pLmlzUmVxdWlyZWQsCiAgc2hvd1NwaW5uZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgaGlkZVNwaW5uZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgbG9jYWxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsCiAgaW5ib3VuZFJldHVybnNUcmFuc2xhdGlvbnNGZXRjaGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLAogIGZldGNoVHJhbnNsYXRpb25zOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLAogIHRyYW5zbGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICBpbml0aWFsVmFsdWVzOiBQcm9wVHlwZXMuc2hhcGUoewogICAgc2hpcG1lbnRTdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcKICB9KSwKICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoewogICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMKICB9KS5pc1JlcXVpcmVkLAogIGxvY2F0aW9uOiBQcm9wVHlwZXMuc2hhcGUoewogICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZywKICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLAogICAgbG9jYXRpb25UeXBlOiBQcm9wVHlwZXMuc2hhcGUoewogICAgICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZywKICAgICAgbG9jYXRpb25UeXBlQ29kZTogUHJvcFR5cGVzLnN0cmluZwogICAgfSkKICB9KS5pc1JlcXVpcmVkCn07CkluYm91bmRSZXR1cm5zLmRlZmF1bHRQcm9wcyA9IHsKICBpbml0aWFsVmFsdWVzOiB7fQp9Ow=="},null]}