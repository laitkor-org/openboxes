{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/Layout/NavbarIcons.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/Layout/NavbarIcons.jsx","mtime":1698037747000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}