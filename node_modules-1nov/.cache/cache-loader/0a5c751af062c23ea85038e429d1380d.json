{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/dashboard/GraphCard.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/dashboard/GraphCard.jsx","mtime":1698037747000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCAicHJvdG90eXBlIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWQiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQovKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqLwovKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqLwppbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnOwppbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnOwppbXBvcnQgeyBCYXIsIERvdWdobnV0LCBIb3Jpem9udGFsQmFyLCBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJzsKaW1wb3J0IHsgZ2V0VHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtbG9jYWxpemUtcmVkdXgnOwppbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnOwppbXBvcnQgeyBTb3J0YWJsZUVsZW1lbnQgfSBmcm9tICdyZWFjdC1zb3J0YWJsZS1ob2MnOwppbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAncmVhY3QtdGlwcHknOwppbXBvcnQgRHJhZ0hhbmRsZSBmcm9tICdjb21wb25lbnRzL2Rhc2hib2FyZC9EcmFnSGFuZGxlJzsKaW1wb3J0IExvYWRpbmdDYXJkIGZyb20gJ2NvbXBvbmVudHMvZGFzaGJvYXJkL0xvYWRpbmdDYXJkJzsKaW1wb3J0IE51bWJlcnMgZnJvbSAnY29tcG9uZW50cy9kYXNoYm9hcmQvTnVtYmVycyc7CmltcG9ydCBOdW1iZXJzUkFHIGZyb20gJ2NvbXBvbmVudHMvZGFzaGJvYXJkL051bWJlcnNSQUcnOwppbXBvcnQgTnVtYmVyc1RhYmxlQ2FyZCBmcm9tICdjb21wb25lbnRzL2Rhc2hib2FyZC9OdW1iZXJzVGFibGVDYXJkJzsKaW1wb3J0IFRhYmxlQ2FyZCBmcm9tICdjb21wb25lbnRzL2Rhc2hib2FyZC9UYWJsZUNhcmQnOwppbXBvcnQgeyB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UgfSBmcm9tICd1dGlscy9UcmFuc2xhdGUnOwoKLy8gVE9ETzogT0JQSUgtNDM4NCBSZWZhY3RvciBGaWx0ZXJDb21wb25lbnQgdG8gYmUgbW9yZSBnZW5lcmljLgovLyBJdCBzaG91bGQgYmUgYnVpbHQgZnJvbSBjb25maWcgaW5zdGVhZCBvZiBiZWluZyBoYXJkY29kZWQgKGFuZCBtb3ZlIGl0IG91dCB0byBzZXBhcmF0ZSBmaWxlKQp2YXIgRmlsdGVyQ29tcG9uZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEZpbHRlckNvbXBvbmVudCwgX0NvbXBvbmVudCk7CiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGaWx0ZXJDb21wb25lbnQpOwogIGZ1bmN0aW9uIEZpbHRlckNvbXBvbmVudChwcm9wcykgewogICAgdmFyIF90aGlzOwogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbHRlckNvbXBvbmVudCk7CiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTsKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImhhbmRsZUNoYW5nZSIsIGZ1bmN0aW9uIChlbGVtZW50LCBjYXJkSWQsIGxvYWRJbmRpY2F0b3IpIHsKICAgICAgdmFyIGRyb3Bkb3duID0gZWxlbWVudC50YXJnZXQ7CiAgICAgIHZhciBwYXJhbXMgPSAnJzsKICAgICAgdmFyIHRpbWVGcmFtZSA9IF90aGlzLnN0YXRlLnRpbWVGcmFtZSB8fCBudWxsOwogICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5zdGF0ZS5sb2NhdGlvblNlbGVjdGVkIHx8IG51bGw7CiAgICAgIGlmIChkcm9wZG93bi5pZCA9PT0gJ2xvY2F0aW9uU2VsZWN0b3InKSB7CiAgICAgICAgcGFyYW1zID0gdGltZUZyYW1lICE9PSBudWxsID8gInF1ZXJ5U2l6ZT0iLmNvbmNhdCh0aW1lRnJhbWUsICImIikgOiBwYXJhbXM7CiAgICAgICAgcGFyYW1zID0gIiIuY29uY2F0KHBhcmFtcywgImRlc3RpbmF0aW9uTG9jYXRpb249IikuY29uY2F0KGRyb3Bkb3duLnZhbHVlKTsKICAgICAgICB2YXIgbG9jYXRpb25TZWxlY3RlZCA9IF90aGlzLnByb3BzLmFsbExvY2F0aW9ucy5maW5kKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHZhbHVlLmlkID09PSBkcm9wZG93bi52YWx1ZTsKICAgICAgICB9KTsKICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICBsb2NhdGlvblNlbGVjdGVkOiBsb2NhdGlvblNlbGVjdGVkCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKGVsZW1lbnQudGFyZ2V0LmlkID09PSAndGltZUZyYW1lU2VsZWN0b3InKSB7CiAgICAgICAgcGFyYW1zID0gInF1ZXJ5U2l6ZT0iLmNvbmNhdChkcm9wZG93bi52YWx1ZSk7CiAgICAgICAgcGFyYW1zID0gbG9jYXRpb24gIT09IG51bGwgPyAiIi5jb25jYXQocGFyYW1zLCAiJmRlc3RpbmF0aW9uTG9jYXRpb249IikuY29uY2F0KGxvY2F0aW9uLmlkKSA6IHBhcmFtczsKICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICB0aW1lRnJhbWU6IGRyb3Bkb3duLnZhbHVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKGVsZW1lbnQudGFyZ2V0LmlkID09PSAneWVhclR5cGVTZWxlY3RvcicgJiYgX3RoaXMucHJvcHMueWVhclR5cGVGaWx0ZXIpIHsKICAgICAgICBwYXJhbXMgPSAiIi5jb25jYXQoX3RoaXMucHJvcHMueWVhclR5cGVGaWx0ZXIucGFyYW1ldGVyIHx8ICdxdWVyeVNpemUnLCAiPSIpLmNvbmNhdChkcm9wZG93bi52YWx1ZSk7CiAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgeWVhclR5cGU6IGRyb3Bkb3duLnZhbHVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKHBhcmFtcyAhPT0gJycpIHsKICAgICAgICBsb2FkSW5kaWNhdG9yKF90aGlzLnByb3BzLndpZGdldElkLCBwYXJhbXMpOwogICAgICB9CiAgICAgIGRyb3Bkb3duLnNpemUgPSAxOwogICAgfSk7CiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgdGltZUZyYW1lOiA2LAogICAgICBsb2NhdGlvblNlbGVjdGVkOiAnJywKICAgICAgeWVhclR5cGU6ICcnCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KICBfY3JlYXRlQ2xhc3MoRmlsdGVyQ29tcG9uZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwogICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICBjbGFzc05hbWU6ICJkYXRhLWZpbHRlciIKICAgICAgfSwgdGhpcy5wcm9wcy5sb2NhdGlvbkZpbHRlciAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic2VsZWN0IiwgewogICAgICAgIGNsYXNzTmFtZTogImxvY2F0aW9uLWZpbHRlciBjdXN0b20tc2VsZWN0IiwKICAgICAgICBzaXplOiAiMSIsCiAgICAgICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cyhlKSB7CiAgICAgICAgICBlLnRhcmdldC5zaXplID0gMzsKICAgICAgICB9LAogICAgICAgIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKGUpIHsKICAgICAgICAgIGUudGFyZ2V0LnNpemUgPSAxOwogICAgICAgIH0sCiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2hhbmdlKGUsIF90aGlzMi5wcm9wcy5jYXJkSWQsIF90aGlzMi5wcm9wcy5sb2FkSW5kaWNhdG9yKTsKICAgICAgICB9LAogICAgICAgIGRpc2FibGVkOiAhdGhpcy5wcm9wcy5sb2NhdGlvbkZpbHRlciwKICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5sb2NhdGlvblNlbGVjdGVkLmlkLAogICAgICAgIGlkOiAibG9jYXRpb25TZWxlY3RvciIKICAgICAgfSwgdGhpcy5wcm9wcy5hbGxMb2NhdGlvbnMubWFwKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZS5uYW1lLmNvZGUgJiYgdmFsdWUubmFtZS5tZXNzYWdlKSB7CiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIsIHsKICAgICAgICAgICAga2V5OiB2YWx1ZS5pZCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlLmlkCiAgICAgICAgICB9LCBfdGhpczIucHJvcHMudHJhbnNsYXRlKHZhbHVlLm5hbWUuY29kZSwgdmFsdWUubmFtZS5tZXNzYWdlKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgib3B0aW9uIiwgewogICAgICAgICAga2V5OiB2YWx1ZS5pZCwKICAgICAgICAgIHZhbHVlOiB2YWx1ZS5pZAogICAgICAgIH0sICIgIiwgdmFsdWUubmFtZSk7CiAgICAgIH0pKSwgdGhpcy5wcm9wcy50aW1lRmlsdGVyICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzZWxlY3QiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAidGltZS1maWx0ZXIgY3VzdG9tLXNlbGVjdCIsCiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2hhbmdlKGUsIF90aGlzMi5wcm9wcy5jYXJkSWQsIF90aGlzMi5wcm9wcy5sb2FkSW5kaWNhdG9yKTsKICAgICAgICB9LAogICAgICAgIGRpc2FibGVkOiAhdGhpcy5wcm9wcy50aW1lRmlsdGVyLAogICAgICAgIGRlZmF1bHRWYWx1ZTogdGhpcy5zdGF0ZS50aW1lRnJhbWUsCiAgICAgICAgaWQ6ICJ0aW1lRnJhbWVTZWxlY3RvciIKICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIsIHsKICAgICAgICB2YWx1ZTogIjEiCiAgICAgIH0sIHRoaXMucHJvcHMudHJhbnNsYXRlKHRoaXMucHJvcHMubGFiZWxbMF0sIHRoaXMucHJvcHMubGFiZWxbMV0sIHsKICAgICAgICBudW1iZXI6ICcnLAogICAgICAgIHRpbWVVbml0OiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGFzaGJvYXJkLnRpbWVGaWx0ZXIubW9udGgubGFiZWwnLCAnTW9udGgnKQogICAgICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJvcHRpb24iLCB7CiAgICAgICAgdmFsdWU6ICIzIgogICAgICB9LCB0aGlzLnByb3BzLnRyYW5zbGF0ZSh0aGlzLnByb3BzLmxhYmVsWzBdLCB0aGlzLnByb3BzLmxhYmVsWzFdLCB7CiAgICAgICAgbnVtYmVyOiAzLAogICAgICAgIHRpbWVVbml0OiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGFzaGJvYXJkLnRpbWVGaWx0ZXIubW9udGhzLmxhYmVsJywgJ01vbnRocycpCiAgICAgIH0pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIsIHsKICAgICAgICB2YWx1ZTogIjYiCiAgICAgIH0sIHRoaXMucHJvcHMudHJhbnNsYXRlKHRoaXMucHJvcHMubGFiZWxbMF0sIHRoaXMucHJvcHMubGFiZWxbMV0sIHsKICAgICAgICBudW1iZXI6IDYsCiAgICAgICAgdGltZVVuaXQ6IHRoaXMucHJvcHMudHJhbnNsYXRlKCdyZWFjdC5kYXNoYm9hcmQudGltZUZpbHRlci5tb250aHMubGFiZWwnLCAnTW9udGhzJykKICAgICAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgib3B0aW9uIiwgewogICAgICAgIHZhbHVlOiAiMTIiCiAgICAgIH0sIHRoaXMucHJvcHMudHJhbnNsYXRlKHRoaXMucHJvcHMubGFiZWxbMF0sIHRoaXMucHJvcHMubGFiZWxbMV0sIHsKICAgICAgICBudW1iZXI6ICcnLAogICAgICAgIHRpbWVVbml0OiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGFzaGJvYXJkLnRpbWVGaWx0ZXIueWVhci5sYWJlbCcsICdZZWFyJykKICAgICAgfSkpLCB0aGlzLnByb3BzLnRpbWVMaW1pdCA9PT0gMjQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIsIHsKICAgICAgICB2YWx1ZTogIjI0IgogICAgICB9LCB0aGlzLnByb3BzLnRyYW5zbGF0ZSh0aGlzLnByb3BzLmxhYmVsWzBdLCB0aGlzLnByb3BzLmxhYmVsWzFdLCB7CiAgICAgICAgbnVtYmVyOiAyLAogICAgICAgIHRpbWVVbml0OiB0aGlzLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QuZGFzaGJvYXJkLnRpbWVGaWx0ZXIueWVhcnMubGFiZWwnLCAnWWVhcnMnKQogICAgICB9KSkpLCB0aGlzLnByb3BzLnllYXJUeXBlRmlsdGVyICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzZWxlY3QiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAidGltZS1maWx0ZXIgY3VzdG9tLXNlbGVjdCIsCiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2hhbmdlKGUsIF90aGlzMi5wcm9wcy5jYXJkSWQsIF90aGlzMi5wcm9wcy5sb2FkSW5kaWNhdG9yKTsKICAgICAgICB9LAogICAgICAgIGRpc2FibGVkOiAhdGhpcy5wcm9wcy55ZWFyVHlwZUZpbHRlciwKICAgICAgICBkZWZhdWx0VmFsdWU6IHRoaXMuc3RhdGUueWVhclR5cGUgfHwgdGhpcy5wcm9wcy55ZWFyVHlwZUZpbHRlci5kZWZhdWx0VmFsdWUsCiAgICAgICAgaWQ6ICJ5ZWFyVHlwZVNlbGVjdG9yIgogICAgICB9LCB0aGlzLnByb3BzLnllYXJUeXBlRmlsdGVyLm9wdGlvbnMgJiYgdGhpcy5wcm9wcy55ZWFyVHlwZUZpbHRlci5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJvcHRpb24iLCB7CiAgICAgICAgICB2YWx1ZTogb3B0aW9uLnZhbHVlCiAgICAgICAgfSwgX3RoaXMyLnByb3BzLnRyYW5zbGF0ZShvcHRpb24ubGFiZWwsIG9wdGlvbi5sYWJlbCkpOwogICAgICB9KSkpOwogICAgfQogIH1dKTsKICByZXR1cm4gRmlsdGVyQ29tcG9uZW50Owp9KENvbXBvbmVudCk7CnZhciBoYW5kbGVDaGFydENsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2hhcnRDbGljayhlbGVtZW50cykgewogIHZhciBsaW5rID0gZWxlbWVudHNbMF0uX2NoYXJ0LmRhdGEuZGF0YXNldHNbMF0ubGlua3NbZWxlbWVudHNbMF0uX2luZGV4XTsKICBpZiAobGluayAmJiBsaW5rICE9PSAnJykgewogICAgd2luZG93LmxvY2F0aW9uID0gbGluazsKICB9Cn07CnZhciBHcmFwaENhcmQgPSBTb3J0YWJsZUVsZW1lbnQoZnVuY3Rpb24gKF9yZWYpIHsKICB2YXIgY2FyZElkID0gX3JlZi5jYXJkSWQsCiAgICB3aWRnZXRJZCA9IF9yZWYud2lkZ2V0SWQsCiAgICBjYXJkVGl0bGUgPSBfcmVmLmNhcmRUaXRsZSwKICAgIGNhcmRUeXBlID0gX3JlZi5jYXJkVHlwZSwKICAgIGNhcmRMaW5rID0gX3JlZi5jYXJkTGluaywKICAgIGNhcmRJbmZvID0gX3JlZi5jYXJkSW5mbywKICAgIGRhdGEgPSBfcmVmLmRhdGEsCiAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLAogICAgbG9hZEluZGljYXRvciA9IF9yZWYubG9hZEluZGljYXRvciwKICAgIF9yZWYkdGltZUZpbHRlciA9IF9yZWYudGltZUZpbHRlciwKICAgIHRpbWVGaWx0ZXIgPSBfcmVmJHRpbWVGaWx0ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiR0aW1lRmlsdGVyLAogICAgX3JlZiR5ZWFyVHlwZUZpbHRlciA9IF9yZWYueWVhclR5cGVGaWx0ZXIsCiAgICB5ZWFyVHlwZUZpbHRlciA9IF9yZWYkeWVhclR5cGVGaWx0ZXIgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJHllYXJUeXBlRmlsdGVyLAogICAgX3JlZiR0aW1lTGltaXQgPSBfcmVmLnRpbWVMaW1pdCwKICAgIHRpbWVMaW1pdCA9IF9yZWYkdGltZUxpbWl0ID09PSB2b2lkIDAgPyAyNCA6IF9yZWYkdGltZUxpbWl0LAogICAgX3JlZiRsb2NhdGlvbkZpbHRlciA9IF9yZWYubG9jYXRpb25GaWx0ZXIsCiAgICBsb2NhdGlvbkZpbHRlciA9IF9yZWYkbG9jYXRpb25GaWx0ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRsb2NhdGlvbkZpbHRlciwKICAgIGFsbExvY2F0aW9ucyA9IF9yZWYuYWxsTG9jYXRpb25zLAogICAgX3JlZiRzaXplID0gX3JlZi5zaXplLAogICAgc2l6ZSA9IF9yZWYkc2l6ZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYkc2l6ZSwKICAgIHRyYW5zbGF0ZSA9IF9yZWYudHJhbnNsYXRlLAogICAgaGlkZURyYWdoYW5kbGUgPSBfcmVmLmhpZGVEcmFnaGFuZGxlOwogIHZhciBncmFwaDsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGVtcGxhdGUtY3VybHktaW4tc3RyaW5nCiAgdmFyIGxhYmVsID0gWydyZWFjdC5kYXNoYm9hcmQudGltZUZpbHRlci5sYXN0LmxhYmVsJywgJ2xhc3QgJHswfSAkezF9J107CiAgdmFyIHRyYW5zbGF0ZURhdGFMYWJlbHMgPSBmdW5jdGlvbiB0cmFuc2xhdGVEYXRhTGFiZWxzKGxpc3RMYWJlbHMpIHsKICAgIHZhciBsaXN0VHJhbnNsYXRlZCA9IGxpc3RMYWJlbHMubWFwKGZ1bmN0aW9uIChsYWJlbFRvVHJhbnNsYXRlKSB7CiAgICAgIHJldHVybiB0cmFuc2xhdGUobGFiZWxUb1RyYW5zbGF0ZS5jb2RlLCBsYWJlbFRvVHJhbnNsYXRlLm1lc3NhZ2UpOwogICAgfSk7CiAgICByZXR1cm4gbGlzdFRyYW5zbGF0ZWQ7CiAgfTsKICBpZiAoY2FyZFR5cGUgPT09ICdsaW5lJykgewogICAgaWYgKGRhdGEubGFiZWxzKSB7CiAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBsaXN0IG9mIGxhYmVscyBzZW50IGlzIGNvbXBvc2VkIGJ5IGNvZGUgZGFucyBtZXNzYWdlCiAgICAgIGlmIChkYXRhLmxhYmVsc1swXS5jb2RlICYmIGRhdGEubGFiZWxzWzBdLm1lc3NhZ2UpIHsKICAgICAgICBkYXRhLmxhYmVscyA9IHRyYW5zbGF0ZURhdGFMYWJlbHMoZGF0YS5sYWJlbHMpOwogICAgICB9CiAgICB9CiAgICBncmFwaCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmUsIHsKICAgICAgZGF0YTogZGF0YSwKICAgICAgb3B0aW9uczogb3B0aW9ucywKICAgICAgb25FbGVtZW50c0NsaWNrOiBmdW5jdGlvbiBvbkVsZW1lbnRzQ2xpY2soZWxlbWVudHMpIHsKICAgICAgICByZXR1cm4gaGFuZGxlQ2hhcnRDbGljayhlbGVtZW50cyk7CiAgICAgIH0KICAgIH0pOwogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZwogICAgbGFiZWwgPSBbJ3JlYWN0LmRhc2hib2FyZC50aW1lRmlsdGVyLm5leHQubGFiZWwnLCAnbmV4dCAkezB9ICR7MX0nXTsKICB9IGVsc2UgaWYgKGNhcmRUeXBlID09PSAnYmFyJykgewogICAgZ3JhcGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCYXIsIHsKICAgICAgZGF0YTogZGF0YSwKICAgICAgb3B0aW9uczogb3B0aW9ucwogICAgfSk7CiAgfSBlbHNlIGlmIChjYXJkVHlwZSA9PT0gJ2RvdWdobnV0JykgewogICAgZ3JhcGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEb3VnaG51dCwgewogICAgICBkYXRhOiBkYXRhLAogICAgICBvcHRpb25zOiBvcHRpb25zCiAgICB9KTsKICB9IGVsc2UgaWYgKGNhcmRUeXBlID09PSAnaG9yaXpvbnRhbEJhcicpIHsKICAgIGdyYXBoID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSG9yaXpvbnRhbEJhciwgewogICAgICBkYXRhOiBkYXRhLAogICAgICBvcHRpb25zOiBvcHRpb25zLAogICAgICBvbkVsZW1lbnRzQ2xpY2s6IGZ1bmN0aW9uIG9uRWxlbWVudHNDbGljayhlbGVtZW50cykgewogICAgICAgIHJldHVybiBoYW5kbGVDaGFydENsaWNrKGVsZW1lbnRzKTsKICAgICAgfQogICAgfSk7CiAgfSBlbHNlIGlmIChjYXJkVHlwZSA9PT0gJ251bWJlcnMnKSB7CiAgICBncmFwaCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE51bWJlcnMsIHsKICAgICAgZGF0YTogZGF0YSwKICAgICAgb3B0aW9uczogb3B0aW9ucwogICAgfSk7CiAgfSBlbHNlIGlmIChjYXJkVHlwZSA9PT0gJ251bWJlcnNDdXN0b21Db2xvcnMnKSB7CiAgICBncmFwaCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE51bWJlcnNSQUcsIHsKICAgICAgZGF0YTogZGF0YQogICAgfSk7CiAgfSBlbHNlIGlmIChjYXJkVHlwZSA9PT0gJ3RhYmxlJykgewogICAgZ3JhcGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNhcmQsIHsKICAgICAgZGF0YTogZGF0YQogICAgfSk7CiAgfSBlbHNlIGlmIChjYXJkVHlwZSA9PT0gJ251bWJlclRhYmxlJykgewogICAgZ3JhcGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOdW1iZXJzVGFibGVDYXJkLCB7CiAgICAgIGRhdGE6IGRhdGEsCiAgICAgIG9wdGlvbnM6IG9wdGlvbnMKICAgIH0pOwogIH0gZWxzZSBpZiAoY2FyZFR5cGUgPT09ICdsb2FkaW5nJykgewogICAgZ3JhcGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nQ2FyZCwgbnVsbCk7CiAgfSBlbHNlIGlmIChjYXJkVHlwZSA9PT0gJ2Vycm9yJykgewogICAgZ3JhcGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiYnV0dG9uIiwgewogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgIHJldHVybiBsb2FkSW5kaWNhdG9yKHdpZGdldElkKTsKICAgICAgfQogICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgIGNsYXNzTmFtZTogImZhIGZhLXJlcGVhdCIKICAgIH0pKTsKICB9CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICBjbGFzc05hbWU6ICJncmFwaC1jYXJkICIuY29uY2F0KHNpemUgPT09ICdiaWcnID8gJ2JpZy1zaXplJyA6ICcnLCAiICIpLmNvbmNhdChjYXJkVHlwZSA9PT0gJ2Vycm9yJyA/ICdlcnJvci1jYXJkJyA6ICcnKQogIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICBjbGFzc05hbWU6ICJoZWFkZXItY2FyZCIKICB9LCBjYXJkTGluayA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJhIiwgewogICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgaHJlZjogY2FyZExpbmsuY29kZSwKICAgIGNsYXNzTmFtZTogInRpdGxlLWxpbmsiCiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCB7CiAgICBjbGFzc05hbWU6ICJ0aXRsZS1saW5rIgogIH0sIHRyYW5zbGF0ZShjYXJkVGl0bGUsIGNhcmRUaXRsZSkpKSA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgY2xhc3NOYW1lOiAidGl0bGUtbGluayIKICB9LCB0cmFuc2xhdGUoY2FyZFRpdGxlLCBjYXJkVGl0bGUpKSwgY2FyZEluZm8gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiAiZ3JhcGgtaW5mb3MiCiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcCwgewogICAgaHRtbDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCB0cmFuc2xhdGUoY2FyZEluZm8sIGNhcmRJbmZvKSksCiAgICB0aGVtZTogInRyYW5zcGFyZW50IiwKICAgIGFycm93OiAidHJ1ZSIKICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiaSIsIHsKICAgIGNsYXNzTmFtZTogImZhIGZhLWluZm8tY2lyY2xlIgogIH0pKSkgOiBudWxsLCAhaGlkZURyYWdoYW5kbGUgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRHJhZ0hhbmRsZSwgbnVsbCkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiAiY29udGVudC1jYXJkIgogIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpbHRlckNvbXBvbmVudCwgewogICAgY2FyZElkOiBjYXJkSWQsCiAgICB3aWRnZXRJZDogd2lkZ2V0SWQsCiAgICBsb2FkSW5kaWNhdG9yOiBsb2FkSW5kaWNhdG9yLAogICAgbG9jYXRpb25GaWx0ZXI6IGxvY2F0aW9uRmlsdGVyLAogICAgdGltZUxpbWl0OiB0aW1lTGltaXQsCiAgICB0aW1lRmlsdGVyOiB0aW1lRmlsdGVyLAogICAgeWVhclR5cGVGaWx0ZXI6IHllYXJUeXBlRmlsdGVyLAogICAgbGFiZWw6IGxhYmVsLAogICAgZGF0YTogZGF0YS5sZW5ndGggPT09IDAgPyBudWxsIDogZGF0YSwKICAgIGFsbExvY2F0aW9uczogYWxsTG9jYXRpb25zLAogICAgdHJhbnNsYXRlOiB0cmFuc2xhdGUKICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgIGNsYXNzTmFtZTogImdyYXBoLWNvbnRhaW5lciIKICB9LCBncmFwaCkpKTsKfSk7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHsKICByZXR1cm4gewogICAgdHJhbnNsYXRlOiB0cmFuc2xhdGVXaXRoRGVmYXVsdE1lc3NhZ2UoZ2V0VHJhbnNsYXRlKHN0YXRlLmxvY2FsaXplKSkKICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoR3JhcGhDYXJkKTsKR3JhcGhDYXJkLnByb3BUeXBlcyA9IHsKICBjYXJkVGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwKICBjYXJkVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLAogIGNhcmRJbmZvOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsCiAgdGltZUxpbWl0OiBQcm9wVHlwZXMubnVtYmVyLAogIGxvYWRJbmRpY2F0b3I6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsCiAgdHJhbnNsYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkCn07CkZpbHRlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSB7CiAgdGltZUZpbHRlcjogZmFsc2UsCiAgbG9jYXRpb25GaWx0ZXI6IGZhbHNlLAogIHllYXJUeXBlRmlsdGVyOiBudWxsCn07CkZpbHRlckNvbXBvbmVudC5wcm9wVHlwZXMgPSB7CiAgbG9jYXRpb25GaWx0ZXI6IFByb3BUeXBlcy5ib29sLAogIHRpbWVGaWx0ZXI6IFByb3BUeXBlcy5ib29sLAogIHllYXJUeXBlRmlsdGVyOiBQcm9wVHlwZXMuc2hhcGUoewogICAgcGFyYW1ldGVyOiBQcm9wVHlwZXMuc3RyaW5nLAogICAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLAogICAgb3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHt9KSkKICB9KSwKICB0aW1lTGltaXQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCwKICBsYWJlbDogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkKS5pc1JlcXVpcmVkLAogIGNhcmRJZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLAogIHdpZGdldElkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsCiAgbG9hZEluZGljYXRvcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICBhbGxMb2NhdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7fSkpLmlzUmVxdWlyZWQsCiAgdHJhbnNsYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkCn07"},null]}