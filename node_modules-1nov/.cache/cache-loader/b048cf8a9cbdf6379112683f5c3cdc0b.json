{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/locations-configuration/ZoneTable.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/locations-configuration/ZoneTable.jsx","mtime":1698037748000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgInByb3RvdHlwZSIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQppbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnOwppbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnOwppbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICdyZWFjdC1sb2NhbGl6ZS1yZWR1eCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCBSZWFjdFRhYmxlIGZyb20gJ3JlYWN0LXRhYmxlJzsKaW1wb3J0IE1vZGFsV3JhcHBlciBmcm9tICdjb21wb25lbnRzL2Zvcm0tZWxlbWVudHMvTW9kYWxXcmFwcGVyJzsKaW1wb3J0IGFwaUNsaWVudCBmcm9tICd1dGlscy9hcGlDbGllbnQnOwppbXBvcnQgVHJhbnNsYXRlLCB7IHRyYW5zbGF0ZVdpdGhEZWZhdWx0TWVzc2FnZSB9IGZyb20gJ3V0aWxzL1RyYW5zbGF0ZSc7CmltcG9ydCAnY29tcG9uZW50cy9sb2NhdGlvbnMtY29uZmlndXJhdGlvbi9ab25lVGFibGUuc2Nzcyc7CnZhciBJTklUSUFMX1NUQVRFID0gewogIHpvbmVQYWdlczogLTEsCiAgem9uZUxvYWRpbmc6IHRydWUKfTsKdmFyIFpvbmVUYWJsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhab25lVGFibGUsIF9Db21wb25lbnQpOwogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoWm9uZVRhYmxlKTsKICBmdW5jdGlvbiBab25lVGFibGUocHJvcHMpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBab25lVGFibGUpOwogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7CiAgICBfdGhpcy5zdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIElOSVRJQUxfU1RBVEUpOwogICAgcmV0dXJuIF90aGlzOwogIH0KICBfY3JlYXRlQ2xhc3MoWm9uZVRhYmxlLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwogICAgICB2YXIgem9uZUNvbHVtbnMgPSBbewogICAgICAgIEhlYWRlcjogJ1N0YXR1cycsCiAgICAgICAgYWNjZXNzb3I6ICdhY3RpdmUnLAogICAgICAgIG1pbldpZHRoOiAzMCwKICAgICAgICBjbGFzc05hbWU6ICdhY3RpdmUtY2lyY2xlJywKICAgICAgICBoZWFkZXJDbGFzc05hbWU6ICdoZWFkZXInLAogICAgICAgIENlbGw6IGZ1bmN0aW9uIENlbGwocm93KSB7CiAgICAgICAgICBpZiAocm93Lm9yaWdpbmFsLmFjdGl2ZSkgewogICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAiZmEgZmEtY2hlY2stY2lyY2xlIGdyZWVuLWNpcmNsZSIsCiAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJpIiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJmYSBmYS10aW1lcy1jaXJjbGUgZ3JleS1jaXJjbGUiLAogICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIEhlYWRlcjogJ05hbWUnLAogICAgICAgIGFjY2Vzc29yOiAnbmFtZScsCiAgICAgICAgY2xhc3NOYW1lOiAnY2VsbCcsCiAgICAgICAgaGVhZGVyQ2xhc3NOYW1lOiAnaGVhZGVyIHRleHQtYWxpZ24tbGVmdCcKICAgICAgfSwgewogICAgICAgIEhlYWRlcjogJ0xvY2F0aW9uIFR5cGUnLAogICAgICAgIGFjY2Vzc29yOiAnbG9jYXRpb25UeXBlLmxvY2F0aW9uVHlwZUNvZGUnLAogICAgICAgIGNsYXNzTmFtZTogJ2NlbGwnLAogICAgICAgIGhlYWRlckNsYXNzTmFtZTogJ2hlYWRlciB0ZXh0LWFsaWduLWxlZnQnCiAgICAgIH0sIHsKICAgICAgICBIZWFkZXI6ICdBY3Rpb25zJywKICAgICAgICBtaW5XaWR0aDogMjAsCiAgICAgICAgYWNjZXNzb3I6ICdhY3Rpb25zJywKICAgICAgICBjbGFzc05hbWU6ICdhY3Rpb24tY2VsbCcsCiAgICAgICAgaGVhZGVyQ2xhc3NOYW1lOiAnaGVhZGVyICcsCiAgICAgICAgQ2VsbDogZnVuY3Rpb24gQ2VsbChyb3cpIHsKICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIiCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbFdyYXBwZXIsIHsKICAgICAgICAgICAgb25TYXZlOiBmdW5jdGlvbiBvblNhdmUodmFsdWVzKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5oYW5kbGVMb2NhdGlvbkVkaXQodmFsdWVzKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmllbGRzOiBfdGhpczIucHJvcHMuRklFTERTLAogICAgICAgICAgICB2YWxpZGF0ZTogX3RoaXMyLnByb3BzLnZhbGlkYXRlLAogICAgICAgICAgICBpbml0aWFsVmFsdWVzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJvdy5vcmlnaW5hbCksIHt9LCB7CiAgICAgICAgICAgICAgbG9jYXRpb25UeXBlOiByb3cub3JpZ2luYWwubG9jYXRpb25UeXBlCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBmb3JtUHJvcHM6IHsKICAgICAgICAgICAgICB6b25lVHlwZXM6IF90aGlzMi5wcm9wcy56b25lVHlwZXMKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGl0bGU6ICJyZWFjdC5sb2NhdGlvbnNDb25maWd1cmF0aW9uLmVkaXRab25lLmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdFRpdGxlTWVzc2FnZTogIkVkaXQgWm9uZSBMb2NhdGlvbiIsCiAgICAgICAgICAgIGJ0blNhdmVEZWZhdWx0VGV4dDogIlNhdmUiLAogICAgICAgICAgICBidG5PcGVuQXNJY29uOiB0cnVlLAogICAgICAgICAgICBidG5PcGVuSWNvbjogImZhLXBlbmNpbCIsCiAgICAgICAgICAgIGJ0bk9wZW5DbGFzc05hbWU6ICJhY3Rpb24taWNvbnMiLAogICAgICAgICAgICBidG5Db250YWluZXJDbGFzc05hbWU6ICJkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCIsCiAgICAgICAgICAgIGJ0bkNvbnRhaW5lclN0eWxlOiB7CiAgICAgICAgICAgICAgZ2FwOiAnM3B4JwogICAgICAgICAgICB9LAogICAgICAgICAgICBidG5TYXZlQ2xhc3NOYW1lOiAiYnRuIGJ0bi1wcmltYXJ5IiwKICAgICAgICAgICAgYnRuQ2FuY2VsQ2xhc3NOYW1lOiAiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkiCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJmb3JtLXN1YnRpdGxlIG1iLWxnLTQiCiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2xhdGUsIHsKICAgICAgICAgICAgaWQ6ICJyZWFjdC5sb2NhdGlvbnNDb25maWd1cmF0aW9uLmFkZFpvbmUuYWRkaXRpb25hbFRpdGxlLmxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJab25lcyBhcmUgbGFyZ2UgYXJlYXMgd2l0aGluIGEgZGVwb3QgZW5jb21wYXNzaW5nIG11bHRpcGxlIGJpbiBsb2NhdGlvbnMuIFRoZXkgbWF5IHJlcHJlc2VudCBkaWZmZXJlbnQgcm9vbXMgb3IgYnVpbGRpbmdzIHdpdGhpbiBhIGRlcG90IHNwYWNlLiBUbyByZW1vdmUgYSB6b25lIGZyb20geW91ciBkZXBvdCwgdW5jaGVjayB0aGUgYm94IHRvIG1hcmsgaXQgYXMgaW5hY3RpdmUuIgogICAgICAgICAgfSkpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgICAgIGNsYXNzTmFtZTogImZhIGZhLXRyYXNoLW8gYWN0aW9uLWljb25zIGljb24tcG9pbnRlciIsCiAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiwKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnByb3BzLmRlbGV0ZUxvY2F0aW9uKHJvdy5vcmlnaW5hbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgIH1dOwogICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RUYWJsZSwgewogICAgICAgIGRhdGE6IHRoaXMucHJvcHMuem9uZURhdGEsCiAgICAgICAgcmVmOiB0aGlzLnByb3BzLnJlZlpvbmVUYWJsZSwKICAgICAgICBjb2x1bW5zOiB6b25lQ29sdW1ucywKICAgICAgICBsb2FkaW5nOiB0aGlzLnN0YXRlLnpvbmVMb2FkaW5nLAogICAgICAgIHBhZ2VzOiB0aGlzLnN0YXRlLnpvbmVQYWdlcywKICAgICAgICBkZWZhdWx0UGFnZVNpemU6IDUsCiAgICAgICAgbWFudWFsOiB0cnVlLAogICAgICAgIGNsYXNzTmFtZTogIi1zdHJpcGVkIC1oaWdobGlnaHQgem9uZVRhYmxlIiwKICAgICAgICByZXNpemFibGU6IGZhbHNlLAogICAgICAgIHNvcnRhYmxlOiBmYWxzZSwKICAgICAgICBtdWx0aVNvcnQ6IGZhbHNlLAogICAgICAgIHByZXZpb3VzVGV4dDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJmYSBmYS1jaGV2cm9uLWxlZnQiLAogICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgfSksCiAgICAgICAgbmV4dFRleHQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJpIiwgewogICAgICAgICAgY2xhc3NOYW1lOiAiZmEgZmEtY2hldnJvbi1yaWdodCIsCiAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICB9KSwKICAgICAgICBwYWdlVGV4dDogIiIsCiAgICAgICAgb25GZXRjaERhdGE6IGZ1bmN0aW9uIG9uRmV0Y2hEYXRhKHN0YXRlKSB7CiAgICAgICAgICB2YXIgb2Zmc2V0ID0gc3RhdGUucGFnZSA+IDAgPyBzdGF0ZS5wYWdlICogc3RhdGUucGFnZVNpemUgOiAwOwogICAgICAgICAgYXBpQ2xpZW50LmdldCgnL29wZW5ib3hlcy9hcGkvaW50ZXJuYWxMb2NhdGlvbnMvc2VhcmNoJywgewogICAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgICBsb2NhdGlvblR5cGVDb2RlOiAnWk9ORScsCiAgICAgICAgICAgICAgb2Zmc2V0OiAiIi5jb25jYXQob2Zmc2V0KSwKICAgICAgICAgICAgICBtYXg6ICIiLmNvbmNhdChzdGF0ZS5wYWdlU2l6ZSksCiAgICAgICAgICAgICAgJ3BhcmVudExvY2F0aW9uLmlkJzogIiIuY29uY2F0KF90aGlzMi5wcm9wcy5jdXJyZW50TG9jYXRpb25JZCksCiAgICAgICAgICAgICAgaW5jbHVkZUluYWN0aXZlOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoewogICAgICAgICAgICAgIHpvbmVMb2FkaW5nOiBmYWxzZSwKICAgICAgICAgICAgICB6b25lUGFnZXM6IE1hdGguY2VpbChyZXMuZGF0YS50b3RhbENvdW50IC8gc3RhdGUucGFnZVNpemUpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfdGhpczIucHJvcHMudXBkYXRlWm9uZURhdGEocmVzLmRhdGEuZGF0YSk7CiAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoX3RoaXMyLnByb3BzLnRyYW5zbGF0ZSgncmVhY3QubG9jYXRpb25zQ29uZmlndXJhdGlvbi5lcnJvci56b25lTGlzdC5sYWJlbCcsICdDb3VsZCBub3QgZ2V0IGxpc3Qgb2Ygem9uZXMnKSkpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFpvbmVUYWJsZTsKfShDb21wb25lbnQpOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7CiAgcmV0dXJuIHsKICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlV2l0aERlZmF1bHRNZXNzYWdlKGdldFRyYW5zbGF0ZShzdGF0ZS5sb2NhbGl6ZSkpCiAgfTsKfTsKWm9uZVRhYmxlLnByb3BUeXBlcyA9IHsKICBjdXJyZW50TG9jYXRpb25JZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLAogIHRyYW5zbGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICB6b25lRGF0YTogUHJvcFR5cGVzLnNoYXBlKFtdKS5pc1JlcXVpcmVkLAogIHVwZGF0ZVpvbmVEYXRhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLAogIGhhbmRsZUxvY2F0aW9uRWRpdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICBkZWxldGVMb2NhdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICBGSUVMRFM6IFByb3BUeXBlcy5zaGFwZSh7fSkuaXNSZXF1aXJlZCwKICB2YWxpZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKICB6b25lVHlwZXM6IFByb3BUeXBlcy5zaGFwZShbXSkuaXNSZXF1aXJlZCwKICByZWZab25lVGFibGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoewogICAgY3VycmVudDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRWxlbWVudCkKICB9KV0pLmlzUmVxdWlyZWQKfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFpvbmVUYWJsZSk7"},null]}