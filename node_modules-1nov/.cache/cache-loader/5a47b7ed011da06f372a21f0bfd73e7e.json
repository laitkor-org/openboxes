{"remainingRequest":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js?presets[]=@babel/react&presets[]=@babel/env!/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js!/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/outbound/AddItemsPage.jsx","dependencies":[{"path":"/opt/MTOBS-BIKASH/src/js/components/stock-movement-wizard/outbound/AddItemsPage.jsx","mtime":1698037750000},{"path":"/opt/MTOBS-BIKASH/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/MTOBS-BIKASH/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/MTOBS-BIKASH/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { Component } from 'react';
import arrayMutators from 'final-form-arrays';
import update from 'immutability-helper';
import fileDownload from 'js-file-download';
import _ from 'lodash';
import moment from 'moment';
import PropTypes from 'prop-types';
import { confirmAlert } from 'react-confirm-alert';
import { Form } from 'react-final-form';
import { getTranslate } from 'react-localize-redux';
import { connect } from 'react-redux';
import Alert from 'react-s-alert';
import { addStockMovementDraft, closeInfoBar, createInfoBar, fetchUsers, hideInfoBar, hideSpinner, removeStockMovementDraft, showInfoBar, showSpinner } from 'actions';
import ArrayField from 'components/form-elements/ArrayField';
import ButtonField from 'components/form-elements/ButtonField';
import LabelField from 'components/form-elements/LabelField';
import ProductSelectField from 'components/form-elements/ProductSelectField';
import SelectField from 'components/form-elements/SelectField';
import TextField from 'components/form-elements/TextField';
import AutosaveFeatureModal from 'components/infoBar/modals/autosave/AutosaveFeatureModal';
import notification from 'components/Layout/notifications/notification';
import Spinner from 'components/spinner/Spinner';
import { InfoBar, InfoBarConfigs } from 'consts/infoBar';
import NotificationType from 'consts/notificationTypes';
import RowSaveStatus from 'consts/rowSaveStatus';
import apiClient from 'utils/apiClient';
import { renderFormField } from 'utils/form-utils';
import RowSaveIconIndicator from 'utils/RowSaveIconIndicator';
import Translate, { translateWithDefaultMessage } from 'utils/Translate';
import 'react-confirm-alert/src/react-confirm-alert.css';
var DELETE_BUTTON_FIELD = {
  type: ButtonField,
  defaultMessage: 'Delete',
  flexWidth: '1',
  fieldKey: '',
  buttonLabel: 'react.default.button.delete.label',
  buttonDefaultMessage: 'Delete',
  getDynamicAttr: function getDynamicAttr(_ref) {
    var fieldValue = _ref.fieldValue,
      removeItem = _ref.removeItem,
      removeRow = _ref.removeRow,
      showOnly = _ref.showOnly,
      updateTotalCount = _ref.updateTotalCount;
    return {
      // onClick -> onMouseDown, because we can't cancel
      // function triggered in onBlur (request with items to save).
      // onClick doesn't work in this case, because element on
      // which we want to trigger this function has to have focus
      // but if onBlur takes a little more time, onClick will not be executed
      onMouseDown: fieldValue && fieldValue.id ? function () {
        removeItem(fieldValue.id).then(function () {
          updateTotalCount(-1);
          removeRow();
        });
      } : function () {
        updateTotalCount(-1);
        removeRow();
      },
      disabled: fieldValue && fieldValue.statusCode === 'SUBSTITUTED' || showOnly
    };
  },
  attributes: {
    className: 'btn btn-outline-danger'
  }
};
var ROW_SAVE_ICON_FIELD = {
  type: function type(params) {
    return /*#__PURE__*/React.createElement(RowSaveIconIndicator, {
      lineItemSaveStatus: params.fieldValue
    });
  },
  flexWidth: '0.2'
};
var NO_STOCKLIST_FIELDS = {
  lineItems: {
    type: ArrayField,
    arrowsNavigation: true,
    virtualized: true,
    totalCount: function totalCount(_ref2) {
      var _totalCount = _ref2.totalCount;
      return _totalCount;
    },
    isRowLoaded: function isRowLoaded(_ref3) {
      var _isRowLoaded = _ref3.isRowLoaded;
      return _isRowLoaded;
    },
    loadMoreRows: function loadMoreRows(_ref4) {
      var _loadMoreRows = _ref4.loadMoreRows;
      return _loadMoreRows();
    },
    isFirstPageLoaded: function isFirstPageLoaded(_ref5) {
      var _isFirstPageLoaded = _ref5.isFirstPageLoaded;
      return _isFirstPageLoaded;
    },
    addButton: function addButton(_ref6) {
      var addRow = _ref6.addRow,
        getSortOrder = _ref6.getSortOrder,
        showOnly = _ref6.showOnly,
        updateTotalCount = _ref6.updateTotalCount,
        getStockMovementDraft = _ref6.getStockMovementDraft,
        isDraftAvailable = _ref6.isDraftAvailable;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
        type: "button",
        id: "addButton",
        className: "btn btn-outline-success btn-xs",
        disabled: showOnly
        // onClick -> onMouseDown (see comment for DELETE_BUTTON_FIELD)
        ,
        onMouseDown: function onMouseDown() {
          updateTotalCount(1);
          addRow({
            sortOrder: getSortOrder(),
            rowSaveStatus: RowSaveStatus.PENDING
          });
        }
      }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
        className: "fa fa-plus pr-2"
      }), /*#__PURE__*/React.createElement(Translate, {
        id: "react.default.button.addLine.label",
        defaultMessage: "Add line"
      }))), isDraftAvailable && /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: "btn btn-outline-primary btn-xs draft-button ml-1",
        onMouseDown: function onMouseDown() {
          return getStockMovementDraft();
        }
      }, /*#__PURE__*/React.createElement(Translate, {
        id: "react.default.button.availableDraft.label",
        defaultMessage: "Available draft"
      })));
    },
    fields: {
      product: {
        type: ProductSelectField,
        fieldKey: 'disabled',
        label: 'react.stockMovement.requestedProduct.label',
        defaultMessage: 'Requested product',
        headerAlign: 'left',
        flexWidth: '9.5',
        attributes: {
          showSelectedOptionColor: true
        },
        getDynamicAttr: function getDynamicAttr(_ref7) {
          var fieldValue = _ref7.fieldValue,
            rowIndex = _ref7.rowIndex,
            rowCount = _ref7.rowCount,
            originId = _ref7.originId,
            focusField = _ref7.focusField;
          return {
            disabled: !!fieldValue,
            autoFocus: rowIndex === rowCount - 1,
            locationId: originId,
            onExactProductSelected: function onExactProductSelected(_ref8) {
              var product = _ref8.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityRequested');
              }
            }
          };
        }
      },
      quantityRequested: {
        type: TextField,
        label: 'react.stockMovement.quantity.label',
        defaultMessage: 'Quantity',
        flexWidth: '2.5',
        attributes: {
          type: 'number'
        },
        fieldKey: '',
        getDynamicAttr: function getDynamicAttr(_ref9) {
          var fieldValue = _ref9.fieldValue,
            updateRow = _ref9.updateRow,
            values = _ref9.values,
            rowIndex = _ref9.rowIndex,
            saveProgress = _ref9.saveProgress;
          return {
            disabled: (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.rowSaveStatus) === RowSaveStatus.SAVING || fieldValue && fieldValue.statusCode === 'SUBSTITUTED' || _.isNil(fieldValue && fieldValue.product),
            onBlur: function onBlur() {
              updateRow(values, rowIndex);
              saveProgress({
                values: values
              });
            },
            onChange: function onChange(value) {
              saveProgress({
                values: values,
                rowIndex: rowIndex,
                fieldValue: _objectSpread(_objectSpread({}, fieldValue), {}, {
                  quantityRequested: value
                })
              });
            }
          };
        }
      },
      recipient: {
        type: SelectField,
        label: 'react.stockMovement.recipient.label',
        defaultMessage: 'Recipient',
        flexWidth: '2.5',
        fieldKey: '',
        getDynamicAttr: function getDynamicAttr(_ref10) {
          var fieldValue = _ref10.fieldValue,
            recipients = _ref10.recipients,
            addRow = _ref10.addRow,
            rowCount = _ref10.rowCount,
            rowIndex = _ref10.rowIndex,
            getSortOrder = _ref10.getSortOrder,
            updateTotalCount = _ref10.updateTotalCount,
            updateRow = _ref10.updateRow,
            values = _ref10.values,
            saveProgress = _ref10.saveProgress;
          return {
            options: recipients,
            disabled: (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.rowSaveStatus) === RowSaveStatus.SAVING || fieldValue && fieldValue.statusCode === 'SUBSTITUTED' || _.isNil(fieldValue && fieldValue.product),
            onTabPress: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder(),
                rowSaveStatus: RowSaveStatus.PENDING
              });
            } : null,
            arrowRight: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder(),
                rowSaveStatus: RowSaveStatus.PENDING
              });
            } : null,
            arrowDown: rowCount === rowIndex + 1 ? function () {
              return function () {
                updateTotalCount(1);
                addRow({
                  sortOrder: getSortOrder(),
                  rowSaveStatus: RowSaveStatus.PENDING
                });
              };
            } : null,
            onBlur: function onBlur() {
              updateRow(values, rowIndex);
              saveProgress({
                values: values
              });
            },
            onChange: function onChange(event) {
              saveProgress({
                values: values,
                rowIndex: rowIndex,
                fieldValue: _objectSpread(_objectSpread({}, fieldValue), {}, {
                  recipient: event
                })
              });
            }
          };
        },
        attributes: {
          labelKey: 'name',
          openOnClick: false
        }
      },
      deleteButton: DELETE_BUTTON_FIELD
    }
  }
};
var STOCKLIST_FIELDS = {
  lineItems: {
    type: ArrayField,
    arrowsNavigation: true,
    virtualized: true,
    showRowSaveIndicator: true,
    totalCount: function totalCount(_ref11) {
      var _totalCount2 = _ref11.totalCount;
      return _totalCount2;
    },
    isRowLoaded: function isRowLoaded(_ref12) {
      var _isRowLoaded2 = _ref12.isRowLoaded;
      return _isRowLoaded2;
    },
    loadMoreRows: function loadMoreRows(_ref13) {
      var _loadMoreRows2 = _ref13.loadMoreRows;
      return _loadMoreRows2();
    },
    isFirstPageLoaded: function isFirstPageLoaded(_ref14) {
      var _isFirstPageLoaded2 = _ref14.isFirstPageLoaded;
      return _isFirstPageLoaded2;
    },
    addButton: function addButton(_ref15) {
      var addRow = _ref15.addRow,
        getSortOrder = _ref15.getSortOrder,
        newItemAdded = _ref15.newItemAdded,
        updateTotalCount = _ref15.updateTotalCount,
        isDraftAvailable = _ref15.isDraftAvailable,
        getStockMovementDraft = _ref15.getStockMovementDraft;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
        type: "button",
        id: "addButton",
        className: "btn btn-outline-success btn-xs"
        // onClick -> onMouseDown (see comment for DELETE_BUTTON_FIELD)
        ,
        onMouseDown: function onMouseDown() {
          updateTotalCount(1);
          addRow({
            sortOrder: getSortOrder(),
            rowSaveStatus: RowSaveStatus.PENDING
          });
          newItemAdded();
        }
      }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
        className: "fa fa-plus pr-2"
      }), /*#__PURE__*/React.createElement(Translate, {
        id: "react.default.button.addLine.label",
        defaultMessage: "Add line"
      }))), isDraftAvailable && /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: "btn btn-outline-primary btn-xs draft-button ml-1",
        onMouseDown: function onMouseDown() {
          return getStockMovementDraft();
        }
      }, /*#__PURE__*/React.createElement(Translate, {
        id: "react.default.button.availableDraft.label",
        defaultMessage: "Available draft"
      })));
    },
    fields: {
      product: {
        fieldKey: 'disabled',
        type: ProductSelectField,
        label: 'react.stockMovement.requestedProduct.label',
        defaultMessage: 'Requested product',
        headerAlign: 'left',
        flexWidth: '9',
        attributes: {
          showSelectedOptionColor: true
        },
        getDynamicAttr: function getDynamicAttr(_ref16) {
          var fieldValue = _ref16.fieldValue,
            rowIndex = _ref16.rowIndex,
            rowCount = _ref16.rowCount,
            newItem = _ref16.newItem,
            originId = _ref16.originId,
            focusField = _ref16.focusField;
          return {
            disabled: !!fieldValue,
            autoFocus: newItem && rowIndex === rowCount - 1,
            locationId: originId,
            onExactProductSelected: function onExactProductSelected(_ref17) {
              var product = _ref17.product;
              if (focusField && product) {
                focusField(rowIndex, 'quantityRequested');
              }
            }
          };
        }
      },
      quantityAllowed: {
        type: LabelField,
        label: 'react.stockMovement.maxQuantity.label',
        defaultMessage: 'Max Qty',
        flexWidth: '1.7',
        attributes: {
          type: 'number'
        }
      },
      quantityRequested: {
        type: TextField,
        label: 'react.stockMovement.neededQuantity.label',
        defaultMessage: 'Needed Qty',
        flexWidth: '1.7',
        attributes: {
          type: 'number'
        },
        getDynamicAttr: function getDynamicAttr(_ref18) {
          var _values$lineItems$row;
          var addRow = _ref18.addRow,
            rowCount = _ref18.rowCount,
            rowIndex = _ref18.rowIndex,
            getSortOrder = _ref18.getSortOrder,
            updateTotalCount = _ref18.updateTotalCount,
            updateRow = _ref18.updateRow,
            values = _ref18.values,
            saveProgress = _ref18.saveProgress;
          return {
            disabled: ((_values$lineItems$row = values.lineItems[rowIndex]) === null || _values$lineItems$row === void 0 ? void 0 : _values$lineItems$row.rowSaveStatus) === RowSaveStatus.SAVING,
            onTabPress: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder(),
                rowSaveStatus: RowSaveStatus.PENDING
              });
            } : null,
            arrowRight: rowCount === rowIndex + 1 ? function () {
              updateTotalCount(1);
              addRow({
                sortOrder: getSortOrder(),
                rowSaveStatus: RowSaveStatus.PENDING
              });
            } : null,
            arrowDown: rowCount === rowIndex + 1 ? function () {
              return function () {
                updateTotalCount(1);
                addRow({
                  sortOrder: getSortOrder(),
                  rowSaveStatus: RowSaveStatus.PENDING
                });
              };
            } : null,
            onBlur: function onBlur() {
              updateRow(values, rowIndex);
              saveProgress({
                values: values
              });
            },
            onChange: function onChange(event) {
              saveProgress({
                values: values,
                rowIndex: rowIndex,
                fieldValue: _objectSpread(_objectSpread({}, values.lineItems[rowIndex]), {}, {
                  quantityRequested: event
                })
              });
            }
          };
        }
      },
      deleteButton: DELETE_BUTTON_FIELD
    }
  }
};

// This variable is an indicator
// if action is in progress to avoid
// triggering the same transaction twice
// for example triggering save button during the autosave
var actionInProgress = false;

/**
 * The second step of stock movement where user can add items to stock list.
 * This component supports three different cases: with or without stocklist
 * when movement is from a depot and when movement is from a vendor.
 */
var AddItemsPage = /*#__PURE__*/function (_Component) {
  _inherits(AddItemsPage, _Component);
  var _super = _createSuper(AddItemsPage);
  function AddItemsPage(props) {
    var _this;
    _classCallCheck(this, AddItemsPage);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "dataFetched", false);
    _defineProperty(_assertThisInitialized(_this), "saveProgress", function (_ref19) {
      var values = _ref19.values,
        rowIndex = _ref19.rowIndex,
        fieldValue = _ref19.fieldValue;
      if (!_this.props.isAutosaveEnabled) {
        return;
      }
      if (actionInProgress) {
        return;
      }
      // I can't check !!rowIndex, because it can be 0,
      // so there is possibility to return false when the
      // rowIndex is present
      var isEdited = rowIndex !== undefined;
      var itemsWithStatuses = values.lineItems.map(function (item) {
        if (isEdited && rowIndex === values.lineItems.indexOf(item)) {
          return _objectSpread(_objectSpread({}, fieldValue), {}, {
            rowSaveStatus: RowSaveStatus.PENDING
          });
        }
        if (item.product && (!item.quantityRequested || parseInt(item.quantityRequested, 10) <= 0)) {
          return _objectSpread(_objectSpread({}, item), {}, {
            rowSaveStatus: RowSaveStatus.ERROR
          });
        }
        return item;
      });
      _this.setState({
        values: _objectSpread(_objectSpread({}, values), {}, {
          lineItems: itemsWithStatuses
        })
      });

      // We don't want to save the item during editing or
      // when there is an error in line
      if (isEdited) {
        _this.debouncedSave();
        return;
      }
      _this.debouncedSave.cancel();
      _this.saveRequisitionItemsInCurrentStep(itemsWithStatuses, false);
    });
    _this.state = {
      currentLineItems: [],
      sortOrder: 0,
      values: _objectSpread(_objectSpread({}, _this.props.initialValues), {}, {
        lineItems: []
      }),
      newItem: false,
      totalCount: 0,
      isFirstPageLoaded: false,
      isDraftAvailable: false
    };
    _this.props.showSpinner();
    _this.removeItem = _this.removeItem.bind(_assertThisInitialized(_this));
    _this.importTemplate = _this.importTemplate.bind(_assertThisInitialized(_this));
    _this.getSortOrder = _this.getSortOrder.bind(_assertThisInitialized(_this));
    _this.confirmSave = _this.confirmSave.bind(_assertThisInitialized(_this));
    _this.confirmTransition = _this.confirmTransition.bind(_assertThisInitialized(_this));
    _this.newItemAdded = _this.newItemAdded.bind(_assertThisInitialized(_this));
    _this.validate = _this.validate.bind(_assertThisInitialized(_this));
    _this.isRowLoaded = _this.isRowLoaded.bind(_assertThisInitialized(_this));
    _this.loadMoreRows = _this.loadMoreRows.bind(_assertThisInitialized(_this));
    _this.updateTotalCount = _this.updateTotalCount.bind(_assertThisInitialized(_this));
    _this.updateRow = _this.updateRow.bind(_assertThisInitialized(_this));
    _this.getStockMovementDraft = _this.getStockMovementDraft.bind(_assertThisInitialized(_this));
    _this.transitionToNextStep = _this.transitionToNextStep.bind(_assertThisInitialized(_this));
    _this.saveAndTransitionToNextStep = _this.saveAndTransitionToNextStep.bind(_assertThisInitialized(_this));
    _this.shouldShowAutosaveFeatureBar = _this.shouldShowAutosaveFeatureBar.bind(_assertThisInitialized(_this));
    _this.shouldCreateAutosaveFeatureBar = _this.shouldCreateAutosaveFeatureBar.bind(_assertThisInitialized(_this));
    _this.debouncedSave = _.debounce(function () {
      _this.saveRequisitionItemsInCurrentStep(_this.state.values.lineItems, false);
    }, 1000);
    return _this;
  }
  _createClass(AddItemsPage, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.stockMovementTranslationsFetched) {
        this.dataFetched = true;
        this.fetchAllData();
      }
      // If the feature bar has not yet been triggered, try to add it to the redux store
      if (this.shouldCreateAutosaveFeatureBar()) {
        this.props.createInfoBar(InfoBarConfigs[InfoBar.AUTOSAVE]);
      }
      // If the feature bar has not yet been closed by the user, show it
      if (this.shouldShowAutosaveFeatureBar()) {
        this.props.showInfoBar(InfoBar.AUTOSAVE);
      }
      // If the autosave is disabled, hide the bar
      if (!this.props.isAutosaveEnabled) {
        this.props.hideInfoBar(InfoBar.AUTOSAVE);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.stockMovementTranslationsFetched && !this.dataFetched) {
        this.dataFetched = true;
        this.fetchAllData();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // We want to hide the feature bar when unmounting the component
      // not to show it on any other page
      this.props.hideInfoBar(InfoBar.AUTOSAVE);
    }

    /**
     * Returns proper fields depending on origin type or if stock list is chosen.
     * @public
     */
  }, {
    key: "getFields",
    value: function getFields() {
      var fields = _.get(this.state.values.stocklist, 'id') ? STOCKLIST_FIELDS : NO_STOCKLIST_FIELDS;
      var fieldsWithRowSaveIcon = {
        lineItems: _objectSpread(_objectSpread({}, fields.lineItems), {}, {
          fields: _objectSpread(_objectSpread({}, fields.lineItems.fields), {}, {
            rowSaveStatus: ROW_SAVE_ICON_FIELD
          })
        })
      };
      return this.props.isAutosaveEnabled ? fieldsWithRowSaveIcon : fields;
    }

    /**
     * Returns an array of new stock movement's items and items to be
     * updated (comparing to previous state of line items).
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "getLineItemsToBeSaved",
    value: function getLineItemsToBeSaved(lineItems) {
      var _this2 = this;
      var lineItemsToBeAdded = _.filter(lineItems, function (item) {
        return !item.statusCode && parseInt(item.quantityRequested, 10) > 0 && item.product;
      });
      var lineItemsWithStatus = _.filter(lineItems, function (item) {
        return item.statusCode;
      });
      var lineItemsToBeUpdated = [];
      _.forEach(lineItemsWithStatus, function (item) {
        // We wouldn't update items with quantity requested <= 0
        if (!item.quantityRequested || parseInt(item.quantityRequested, 10) <= 0) {
          return; // lodash continue
        }

        var oldItem = _.find(_this2.state.currentLineItems, function (old) {
          return old.id === item.id;
        });
        var oldQty = parseInt(oldItem === null || oldItem === void 0 ? void 0 : oldItem.quantityRequested, 10);
        var newQty = parseInt(item === null || item === void 0 ? void 0 : item.quantityRequested, 10);
        var oldRecipient = oldItem !== null && oldItem !== void 0 && oldItem.recipient && _.isObject(oldItem === null || oldItem === void 0 ? void 0 : oldItem.recipient) ? oldItem === null || oldItem === void 0 ? void 0 : oldItem.recipient.id : oldItem === null || oldItem === void 0 ? void 0 : oldItem.recipient;
        var newRecipient = item !== null && item !== void 0 && item.recipient && _.isObject(item === null || item === void 0 ? void 0 : item.recipient) ? item === null || item === void 0 ? void 0 : item.recipient.id : item === null || item === void 0 ? void 0 : item.recipient;

        // Intersection of keys common to both objects (excluding product key)
        var keyIntersection = _.remove(_.intersection(_.keys(oldItem), _.keys(item)), function (key) {
          return key !== 'product';
        });
        if (newQty === oldQty && newRecipient === oldRecipient && _this2.props.isAutosaveEnabled) {
          _this2.setState(function (prev) {
            return {
              values: _objectSpread(_objectSpread({}, prev.values), {}, {
                lineItems: prev.values.lineItems.map(function (lineItem) {
                  if (lineItem.id === item.id) {
                    return _objectSpread(_objectSpread({}, lineItem), {}, {
                      rowSaveStatus: RowSaveStatus.SAVED
                    });
                  }
                  return lineItem;
                })
              })
            };
          });
        }
        if ((_this2.state.values.origin.type === 'SUPPLIER' || !_this2.state.values.hasManageInventory) && (!_.isEqual(_.pick(item, keyIntersection), _.pick(oldItem, keyIntersection)) || item.product.id !== oldItem.product.id)) {
          lineItemsToBeUpdated.push(item);
        } else if (newQty !== oldQty || newRecipient !== oldRecipient) {
          lineItemsToBeUpdated.push(item);
        }
      });
      var lineItemsToSave = [].concat(_.map(lineItemsToBeAdded, function (item) {
        return {
          'product.id': item.product.id,
          quantityRequested: item.quantityRequested,
          'recipient.id': _.isObject(item.recipient) ? item.recipient.id || '' : item.recipient || '',
          sortOrder: item.sortOrder
        };
      }), _.map(lineItemsToBeUpdated, function (item) {
        return {
          id: item.id,
          'product.id': item.product.id,
          quantityRequested: item.quantityRequested,
          'recipient.id': _.isObject(item.recipient) ? item.recipient.id || '' : item.recipient || '',
          sortOrder: item.sortOrder
        };
      }));
      if (this.props.isAutosaveEnabled && lineItemsToSave.length) {
        // Here I am changing rowSaveStatus from PENDING to SAVING
        // because all of these lines were sent to save
        this.setState(function (previousState) {
          return {
            values: _objectSpread(_objectSpread({}, previousState.values), {}, {
              lineItems: previousState.values.lineItems.map(function (item) {
                if (item.rowSaveStatus === RowSaveStatus.PENDING && item.product && item.quantityRequested) {
                  return _objectSpread(_objectSpread({}, item), {}, {
                    rowSaveStatus: RowSaveStatus.SAVING
                  });
                }
                return item;
              })
            })
          };
        });
      }
      return lineItemsToSave;
    }
  }, {
    key: "getSortOrder",
    value: function getSortOrder() {
      this.setState({
        sortOrder: this.state.sortOrder + 100
      });
      return this.state.sortOrder;
    }
  }, {
    key: "setLineItems",
    value: function setLineItems(response, startIndex) {
      var _this3 = this;
      var data = response.data.data;
      var lineItemsData;
      if (this.state.values.lineItems.length === 0 && !data.length) {
        lineItemsData = new Array(1).fill({
          sortOrder: 100,
          rowSaveStatus: RowSaveStatus.PENDING
        });
      } else {
        lineItemsData = _.map(data, function (val) {
          return _objectSpread(_objectSpread({}, val), {}, {
            disabled: true
          });
        });
      }
      var sortOrder = _.toInteger(_.last(lineItemsData).sortOrder) + 100;
      this.setState({
        currentLineItems: this.props.isPaginated ? _.uniqBy(_.concat(this.state.currentLineItems, data), 'id') : data,
        values: _objectSpread(_objectSpread({}, this.state.values), {}, {
          lineItems: this.props.isPaginated ? _.uniqBy(_.concat(this.state.values.lineItems, lineItemsData), 'id') : lineItemsData
        }),
        sortOrder: sortOrder
      }, function () {
        if (!_.isNull(startIndex) && _this3.state.values.lineItems.length !== _this3.state.totalCount) {
          _this3.loadMoreRows({
            startIndex: startIndex + _this3.props.pageSize
          });
        }
        _this3.props.hideSpinner();
      });
    }
  }, {
    key: "getStockMovementDraft",
    value: function getStockMovementDraft() {
      this.setState({
        values: _objectSpread(_objectSpread({}, this.state.values), {}, {
          lineItems: this.props.savedStockMovement.lineItems.map(function (item) {
            return _objectSpread(_objectSpread({}, item), {}, {
              rowSaveStatus: RowSaveStatus.PENDING
            });
          })
        }),
        totalCount: this.props.savedStockMovement.lineItems.length,
        isDraftAvailable: false
      });
      this.saveRequisitionItemsInCurrentStep(this.props.savedStockMovement.lineItems, true);
      this.props.hideSpinner();
    }
  }, {
    key: "shouldCreateAutosaveFeatureBar",
    value: function shouldCreateAutosaveFeatureBar() {
      var _this$props = this.props,
        bars = _this$props.bars,
        isAutosaveEnabled = _this$props.isAutosaveEnabled;
      // Create the feature bar if it has not been yet created and the autosave is enabled
      return isAutosaveEnabled && !(bars !== null && bars !== void 0 && bars[InfoBar.AUTOSAVE]);
    }
  }, {
    key: "shouldShowAutosaveFeatureBar",
    value: function shouldShowAutosaveFeatureBar() {
      var bars = this.props.bars;
      // Show the autosave feature bar if it has been created (added to store)
      // and has not yet been closed by a user
      return (bars === null || bars === void 0 ? void 0 : bars[InfoBar.AUTOSAVE]) && !bars[InfoBar.AUTOSAVE].closed;
    }
  }, {
    key: "updateTotalCount",
    value: function updateTotalCount(value) {
      this.setState({
        totalCount: this.state.totalCount + value === 0 ? 1 : this.state.totalCount + value
      });
    }
  }, {
    key: "validate",
    value: function validate(values) {
      var errors = {};
      errors.lineItems = [];
      var date = moment(this.props.minimumExpirationDate, 'MM/DD/YYYY');
      _.forEach(values.lineItems, function (item, key) {
        if (!_.isNil(item.product) && (!item.quantityRequested || item.quantityRequested <= 0)) {
          errors.lineItems[key] = {
            quantityRequested: 'react.stockMovement.error.enterQuantity.label'
          };
        }
        if (!_.isEmpty(item.boxName) && _.isEmpty(item.palletName)) {
          errors.lineItems[key] = {
            boxName: 'react.stockMovement.error.boxWithoutPallet.label'
          };
        }
        var dateRequested = moment(item.expirationDate, 'MM/DD/YYYY');
        if (date.diff(dateRequested) > 0) {
          errors.lineItems[key] = {
            expirationDate: 'react.stockMovement.error.invalidDate.label'
          };
        }
      });
      return errors;
    }
  }, {
    key: "updateRow",
    value: function updateRow(values, index) {
      var item = values.lineItems[index];
      this.setState({
        values: update(values, {
          lineItems: _defineProperty({}, index, {
            $set: item
          })
        })
      });
    }
  }, {
    key: "newItemAdded",
    value: function newItemAdded() {
      this.setState({
        newItem: true
      });
    }

    /**
     * Shows save confirmation dialog.
     * @param {function} onConfirm
     * @public
     */
  }, {
    key: "confirmSave",
    value: function confirmSave(onConfirm) {
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmSave.label', 'Confirm save'),
        message: this.props.translate('react.stockMovement.confirmSave.message', 'Are you sure you want to save? There are some lines with empty or zero quantity, those lines will be deleted.'),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: onConfirm
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }

    /**
     * Shows transition confirmation dialog if there are items with the same code.
     * @param {function} onConfirm
     * @param {object} items
     * @public
     */
  }, {
    key: "confirmTransition",
    value: function confirmTransition(onConfirm, items) {
      confirmAlert({
        title: this.props.translate('react.stockMovement.confirmTransition.label', 'You have entered the same code twice. Do you want to continue?'),
        message: _.map(items, function (item) {
          var _item$product$display;
          return /*#__PURE__*/React.createElement("p", {
            key: item.sortOrder
          }, "".concat(item.product.productCode, " ").concat(((_item$product$display = item.product.displayNames) === null || _item$product$display === void 0 ? void 0 : _item$product$display["default"]) || item.product.name, " ").concat(item.quantityRequested));
        }),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: onConfirm
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }
  }, {
    key: "confirmSubmit",
    value: function confirmSubmit(onConfirm) {
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmSubmit.label', 'Confirm submit'),
        message: this.props.translate('react.stockMovement.confirmSubmit.message', 'Please confirm you are ready to submit your request. Once submitted, you cannot edit the request.'),
        buttons: [{
          label: this.props.translate('react.default.goBack.label', 'Go back')
        }, {
          label: this.props.translate('react.default.submit.label', 'Submit'),
          onClick: onConfirm
        }]
      });
    }

    /**
     * Fetches all required data.
     * @public
     */
  }, {
    key: "fetchAllData",
    value: function fetchAllData() {
      this.props.fetchUsers();
      this.fetchAddItemsPageData();
      if (!this.props.isPaginated) {
        this.fetchLineItems();
      }
    }

    /**
     * Fetches 2nd step data from current stock movement.
     * @public
     */
  }, {
    key: "fetchLineItems",
    value: function fetchLineItems() {
      var _this4 = this;
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?stepNumber=2");
      return apiClient.get(url).then(function (response) {
        _this4.setState({
          totalCount: response.data.data.length
        }, function () {
          return _this4.setLineItems(response, null);
        });
      })["catch"](function (err) {
        return err;
      });
    }

    /**
     * Fetches stock movement's line items and sets them in redux form and in
     * state as current line items.
     * @public
     */
  }, {
    key: "fetchAddItemsPageData",
    value: function fetchAddItemsPageData() {
      var _this5 = this;
      this.props.showSpinner();
      var _this$props$savedStoc = this.props.savedStockMovement,
        lastSaved = _this$props$savedStoc.lastUpdated,
        savedStatusCode = _this$props$savedStoc.statusCode,
        id = _this$props$savedStoc.id;
      var stockMovementId = this.state.values.stockMovementId;
      var url = "/openboxes/api/stockMovements/".concat(stockMovementId);
      apiClient.get(url).then(function (resp) {
        var _resp$data$data = resp.data.data,
          hasManageInventory = _resp$data$data.hasManageInventory,
          statusCode = _resp$data$data.statusCode,
          lastUpdated = _resp$data$data.lastUpdated;
        var totalCount = resp.data.totalCount;
        // if data from backend is older than the version from local storage
        // we want to allow users use their version
        var isDraftAvailable = _this5.props.isAutosaveEnabled && stockMovementId === id && lastUpdated < lastSaved && savedStatusCode === statusCode;
        _this5.setState({
          values: _objectSpread(_objectSpread({}, _this5.state.values), {}, {
            hasManageInventory: hasManageInventory,
            statusCode: statusCode
          }),
          totalCount: totalCount === 0 ? 1 : totalCount,
          isDraftAvailable: isDraftAvailable
        }, function () {
          return _this5.props.hideSpinner();
        });
      });
    }
  }, {
    key: "loadMoreRows",
    value: function loadMoreRows(_ref20) {
      var _this6 = this;
      var startIndex = _ref20.startIndex;
      this.setState({
        isFirstPageLoaded: true
      });
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/stockMovementItems?offset=").concat(startIndex, "&max=").concat(this.props.pageSize, "&stepNumber=2");
      apiClient.get(url).then(function (response) {
        _this6.setLineItems(response, startIndex);
      });
    }

    /**
     * Saves current stock movement progress (line items) and goes to the next stock movement step.
     * @param {object} formValues
     * @public
     */
  }, {
    key: "nextPage",
    value: function nextPage(formValues) {
      var _this7 = this;
      var lineItems = _.filter(formValues.lineItems, function (val) {
        return !_.isEmpty(val) && val.product;
      });
      if (_.some(lineItems, function (item) {
        return !item.quantityRequested || item.quantityRequested === '0';
      })) {
        this.confirmSave(function () {
          return _this7.checkDuplicatesAndTransitionToNextStep(lineItems, formValues);
        });
      } else {
        this.checkDuplicatesAndTransitionToNextStep(lineItems, formValues);
      }
    }
  }, {
    key: "checkDuplicatesAndTransitionToNextStep",
    value: function checkDuplicatesAndTransitionToNextStep(lineItems, formValues) {
      var transitionFunction = this.props.isAutosaveEnabled ? this.transitionToNextStep : this.saveAndTransitionToNextStep;
      var itemsMap = {};
      _.forEach(lineItems, function (item) {
        if (itemsMap[item.product.productCode]) {
          itemsMap[item.product.productCode].push(item);
        } else {
          itemsMap[item.product.productCode] = [item];
        }
      });
      var itemsWithSameCode = _.filter(itemsMap, function (item) {
        return item.length > 1;
      });
      if (_.some(itemsMap, function (item) {
        return item.length > 1;
      }) && !(this.state.values.origin.type === 'SUPPLIER' || !this.state.values.hasManageInventory)) {
        this.confirmTransition(function () {
          return transitionFunction(formValues, lineItems);
        }, _.reduce(itemsWithSameCode, function (a, b) {
          return a.concat(b);
        }, []));
      } else {
        transitionFunction(formValues, lineItems);
      }
    }
  }, {
    key: "saveAndTransitionToNextStep",
    value: function saveAndTransitionToNextStep(formValues, lineItems) {
      var _this8 = this;
      this.props.showSpinner();
      this.saveRequisitionItems(lineItems).then(function (resp) {
        if (resp) {
          _this8.transitionToNextStep({
            values: _objectSpread(_objectSpread({}, formValues), {}, {
              lineItems: resp.data.data.lineItems
            })
          });
          return;
        }
        _this8.transitionToNextStep({
          values: formValues
        });
      })["catch"](function () {
        return _this8.props.hideSpinner();
      });
    }

    /**
     * Saves list of stock movement items with post method.
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveRequisitionItems",
    value: function saveRequisitionItems(lineItems) {
      var itemsToSave = this.getLineItemsToBeSaved(lineItems);
      var updateItemsUrl = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/updateItems");
      var payload = {
        id: this.state.values.stockMovementId,
        lineItems: itemsToSave
      };
      if (payload.lineItems.length) {
        return apiClient.post(updateItemsUrl, payload)["catch"](function () {
          return Promise.reject(new Error('react.stockMovement.error.saveRequisitionItems.label'));
        });
      }
      return Promise.resolve();
    }

    /**
     * Saves list of requisition items in current step (without step change). Used to export template.
     * @param {object} itemCandidatesToSave
     * @param {boolean} withStateChange
     * @public
     */
  }, {
    key: "saveRequisitionItemsInCurrentStep",
    value: function saveRequisitionItemsInCurrentStep(itemCandidatesToSave) {
      var _this9 = this;
      var withStateChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      // We filter out items which were already sent to save
      var filteredCandidates = itemCandidatesToSave.filter(function (item) {
        return item.rowSaveStatus !== RowSaveStatus.SAVING;
      });
      var itemsToSave = this.getLineItemsToBeSaved(filteredCandidates);
      var updateItemsUrl = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/updateItems");
      var payload = {
        id: this.state.values.stockMovementId,
        lineItems: itemsToSave
      };
      if (payload.lineItems.length) {
        if (!this.props.isOnline && this.props.isAutosaveEnabled) {
          this.props.addStockMovementDraft({
            lineItems: itemCandidatesToSave,
            id: this.state.values.stockMovementId,
            statusCode: this.state.values.statusCode
          });
        }
        return apiClient.post(updateItemsUrl, payload).then(function (resp) {
          var lineItems = resp.data.data.lineItems;
          var lineItemsBackendData = _.map(lineItems, function (val) {
            return _objectSpread(_objectSpread({}, val), {}, {
              disabled: true
            });
          });
          // In autosave, we don't modify the state, because
          // lines which have not passed the validation will be
          // deleted during users work
          if (!withStateChange) {
            // We want to disable saved line, so I am looking for product with the same
            // code and quantity higher than 0 in response
            // (to avoid disabling new line with the same productCode)

            // TODO: Add new api endpoints in StockMovementItemApiController
            // for POST and PUT (create and update) that returns only updated items data
            // and separate autosave logic from save button logic
            var savedItemsProductCodes = lineItemsBackendData.map(function (item) {
              return item.productCode;
            });
            var savedItemsIds = lineItemsBackendData.map(function (item) {
              return item.id;
            });
            // We are sending item by item to API. Here we have to find
            // newly saved item to replace its equivalent in state
            var itemToChange = _.last(_.differenceBy(lineItemsBackendData, itemCandidatesToSave, 'id'));
            var lineItemsAfterSave = _this9.state.values.lineItems.map(function (item) {
              var _item$product;
              // In this case we check if we're editing item
              // We don't have to disable edited item, because this
              // line is disabled by default
              if (_.includes(savedItemsIds, item.id) && item.rowSaveStatus !== RowSaveStatus.ERROR) {
                return _objectSpread(_objectSpread({}, item), {}, {
                  rowSaveStatus: RowSaveStatus.SAVED
                });
              }
              if (_.includes(savedItemsProductCodes, (_item$product = item.product) === null || _item$product === void 0 ? void 0 : _item$product.productCode) && parseInt(item.quantityRequested, 10) > 0 && item.rowSaveStatus === RowSaveStatus.SAVING) {
                return _objectSpread(_objectSpread({}, itemToChange), {}, {
                  disabled: true,
                  rowSaveStatus: RowSaveStatus.SAVED
                });
              }
              return item;
            });
            _this9.setState({
              values: _objectSpread(_objectSpread({}, _this9.state.values), {}, {
                lineItems: lineItemsAfterSave
              }),
              currentLineItems: lineItemsAfterSave
            });
            return;
          }
          _this9.setState({
            values: _objectSpread(_objectSpread({}, _this9.state.values), {}, {
              lineItems: lineItemsBackendData
            }),
            currentLineItems: lineItemsBackendData
          });
        }).then(function () {
          if (_this9.props.isAutosaveEnabled) {
            // There is no need for creating draft
            // if all of my items are saved correctly
            // (it means that we have internet connection)
            _this9.props.removeStockMovementDraft(_this9.state.values.stockMovementId);
          }
        })["catch"](function () {
          if (_this9.props.isAutosaveEnabled) {
            // When there is an error during saving we have to find products which
            // caused the error. These items are not saved, so we don't have line ID,
            // and we have to find these items by product ID and SaveStatus
            var notSavedItemsIds = payload.lineItems.map(function (item) {
              return item['product.id'];
            });
            var lineItemsWithErrors = _this9.state.values.lineItems.map(function (item) {
              if (item.product && item.rowSaveStatus === RowSaveStatus.SAVING && _.includes(notSavedItemsIds, item.product.id)) {
                return _objectSpread(_objectSpread({}, item), {}, {
                  rowSaveStatus: RowSaveStatus.ERROR
                });
              }
              return item;
            });
            _this9.setState({
              values: _objectSpread(_objectSpread({}, _this9.state.values), {}, {
                lineItems: lineItemsWithErrors
              })
            });
            if (!_this9.props.isOnline) {
              // When there is an error, we are adding items to
              // state for draft
              _this9.props.addStockMovementDraft({
                lineItems: _this9.state.values.lineItems,
                id: _this9.state.values.stockMovementId,
                statusCode: _this9.state.values.statusCode
              });
            }
          }
          return Promise.reject(new Error(_this9.props.translate('react.stockMovement.error.saveRequisitionItems.label', 'Could not save requisition items')));
        });
      }
      return Promise.resolve();
    }

    // if rowIndex is passed, it means that we are editing row
    // not adding new one
  }, {
    key: "save",
    value:
    /**
     * Saves list of requisition items in current step (without step change).
     * @param {object} formValues
     * @public
     */
    function save(formValues) {
      var _this10 = this;
      actionInProgress = true;
      var lineItems = _.filter(formValues.lineItems, function (item) {
        return !_.isEmpty(item);
      });
      if (_.some(lineItems, function (item) {
        return !item.quantityRequested || item.quantityRequested === '0';
      })) {
        this.confirmSave(function () {
          _this10.saveItems(lineItems);
        });
      } else {
        this.saveItems(lineItems);
      }
    }

    /**
     * Saves changes made by user in this step and redirects to the shipment view page
     * @param {object} formValues
     * @public
     */
  }, {
    key: "saveAndExit",
    value: function saveAndExit(formValues) {
      actionInProgress = true;
      var errors = this.validate(formValues).lineItems;
      if (!errors.length) {
        this.saveRequisitionItemsInCurrentStep(formValues.lineItems).then(function () {
          window.location = "/openboxes/stockMovement/show/".concat(formValues.stockMovementId);
        });
      } else {
        confirmAlert({
          title: this.props.translate('react.stockMovement.confirmExit.label', 'Confirm save'),
          message: this.props.translate('react.stockMovement.confirmExit.message', 'Validation errors occurred. Are you sure you want to exit and lose unsaved data?'),
          buttons: [{
            label: this.props.translate('react.default.yes.label', 'Yes'),
            onClick: function onClick() {
              window.location = "/openboxes/stockMovement/show/".concat(formValues.stockMovementId);
            }
          }, {
            label: this.props.translate('react.default.no.label', 'No')
          }]
        });
      }
    }

    /**
     * Saves list of requisition items in current step (without step change).
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveItems",
    value: function saveItems(lineItems) {
      var _this11 = this;
      this.props.showSpinner();
      this.saveRequisitionItemsInCurrentStep(lineItems).then(function () {
        _this11.fetchLineItems();
        _this11.props.removeStockMovementDraft(_this11.state.values.stockMovementId);
        _this11.props.hideSpinner();
        Alert.success(_this11.props.translate('react.stockMovement.alert.saveSuccess.label', 'Changes saved successfully'), {
          timeout: 3000
        });
      })["catch"](function () {
        return _this11.props.hideSpinner();
      })["finally"](function () {
        actionInProgress = false;
      });
    }

    /**
     * Refetch the data, all not saved changes will be lost.
     * @public
     */
  }, {
    key: "refresh",
    value: function refresh() {
      var _this12 = this;
      confirmAlert({
        title: this.props.translate('react.stockMovement.message.confirmRefresh.label', 'Confirm refresh'),
        message: this.props.translate('react.stockMovement.confirmRefresh.message', 'Are you sure you want to refresh? Your progress since last save will be lost.'),
        buttons: [{
          label: this.props.translate('react.default.yes.label', 'Yes'),
          onClick: function onClick() {
            return _this12.fetchAllData();
          }
        }, {
          label: this.props.translate('react.default.no.label', 'No')
        }]
      });
    }

    /**
     * Removes chosen item from requisition's items list.
     * @param {string} itemId
     * @public
     */
  }, {
    key: "removeItem",
    value: function removeItem(itemId) {
      var _this13 = this;
      var removeItemsUrl = "/openboxes/api/stockMovementItems/".concat(itemId, "/removeItem");
      var payload = {
        stockMovementId: this.state.values.stockMovementId
      };
      return apiClient["delete"](removeItemsUrl, {
        data: payload
      }).then(function () {
        if (!_this13.props.isOnline) {
          _this13.props.addStockMovementDraft({
            lineItems: _this13.state.values.lineItems,
            id: _this13.state.values.stockMovementId,
            statusCode: _this13.state.values.statusCode
          });
        }
      })["catch"](function () {
        _this13.props.hideSpinner();
        return Promise.reject(new Error('react.stockMovement.error.deleteRequisitionItem.label'));
      });
    }

    /**
     * Removes all items from requisition's items list.
     * @public
     */
  }, {
    key: "removeAll",
    value: function removeAll() {
      var _this14 = this;
      actionInProgress = true;
      var removeItemsUrl = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/removeAllItems");
      return apiClient["delete"](removeItemsUrl).then(function () {
        _this14.props.removeStockMovementDraft(_this14.state.values.stockMovementId);
        _this14.setState({
          totalCount: 1,
          currentLineItems: [],
          values: _objectSpread(_objectSpread({}, _this14.state.values), {}, {
            lineItems: new Array(1).fill({
              sortOrder: 100,
              rowSaveStatus: RowSaveStatus.PENDING
            })
          })
        });
      })["catch"](function () {
        _this14.fetchLineItems();
        return Promise.reject(new Error('react.stockMovement.error.deleteRequisitionItem.label'));
      })["finally"](function () {
        actionInProgress = false;
      });
    }

    /**
     * Transition to next stock movement status:
     * - 'CHECKING' if origin type is supplier.
     * - 'VERIFYING' if origin type is other than supplier.
     * @public
     */
  }, {
    key: "transitionToNextStep",
    value: function transitionToNextStep(_ref21) {
      var _this15 = this;
      var values = _ref21.values;
      var url = "/openboxes/api/stockMovements/".concat(this.state.values.stockMovementId, "/status");
      var payload = {
        status: 'REQUESTED'
      };
      this.props.showSpinner();
      new Promise(function (resolve) {
        if (_this15.state.values.statusCode === 'CREATED') {
          resolve(apiClient.post(url, payload));
        }
        return resolve();
      }).then(this.props.nextPage(values || this.state.values))["finally"](this.props.hideSpinner());
    }

    /**
     * Exports current state of stock movement's to csv file.
     * @param {object} formValues
     * @public
     */
  }, {
    key: "exportTemplate",
    value: function exportTemplate(formValues) {
      var lineItems = _.filter(formValues.lineItems, function (item) {
        return !_.isEmpty(item);
      });
      this.saveItemsAndExportTemplate(formValues, lineItems);
    }
  }, {
    key: "isRowLoaded",
    value: function isRowLoaded(_ref22) {
      var index = _ref22.index;
      return !!this.state.values.lineItems[index];
    }

    /**
     * Exports current state of stock movement's to csv file.
     * @param {object} formValues
     * @param {object} lineItems
     * @public
     */
  }, {
    key: "saveItemsAndExportTemplate",
    value: function saveItemsAndExportTemplate(formValues, lineItems) {
      var _this16 = this;
      this.props.showSpinner();
      var movementNumber = formValues.movementNumber,
        stockMovementId = formValues.stockMovementId;
      var url = "/openboxes/stockMovement/exportCsv/".concat(stockMovementId);
      this.saveRequisitionItemsInCurrentStep(lineItems).then(function () {
        apiClient.get(url, {
          responseType: 'blob'
        }).then(function (response) {
          fileDownload(response.data, "ItemList".concat(movementNumber ? "-".concat(movementNumber) : '', ".csv"), 'text/csv');
          _this16.props.hideSpinner();
        })["catch"](function () {
          return _this16.props.hideSpinner();
        });
      });
    }
  }, {
    key: "showPendingSaveNotification",
    value: function showPendingSaveNotification() {
      notification(NotificationType.INFO)({
        message: this.props.translate('react.notification.autosave.pending.label', 'Please wait while your line items are being saved.')
      });
    }

    /**
     * Imports chosen file to backend and then fetches line items.
     * @param {object} event
     * @public
     */
  }, {
    key: "importTemplate",
    value: function importTemplate(event) {
      var _this17 = this;
      this.props.showSpinner();
      var formData = new FormData();
      var file = event.target.files[0];
      var stockMovementId = this.state.values.stockMovementId;
      formData.append('importFile', file.slice(0, file.size, 'text/csv'));
      var config = {
        headers: {
          'content-type': 'multipart/form-data'
        }
      };
      var url = "/openboxes/stockMovement/importCsv/".concat(stockMovementId);
      return apiClient.post(url, formData, config).then(function () {
        _this17.fetchLineItems();
        if (_.isNil(_.last(_this17.state.values.lineItems).product)) {
          _this17.setState({
            values: _objectSpread(_objectSpread({}, _this17.state.values), {}, {
              lineItems: []
            })
          });
        }
      })["catch"](function () {
        _this17.props.hideSpinner();
      });
    }

    /**
     * Saves changes made by user in this step and go back to previous page
     * @param {object} values
     * @param {boolean} invalid
     * @public
     */
  }, {
    key: "previousPage",
    value: function previousPage(values, invalid) {
      var _this18 = this;
      if (!invalid) {
        this.saveRequisitionItemsInCurrentStep(values.lineItems).then(function () {
          return _this18.props.previousPage(values);
        });
      } else {
        confirmAlert({
          title: this.props.translate('react.stockMovement.confirmPreviousPage.label', 'Validation error'),
          message: this.props.translate('react.stockMovement.confirmPreviousPage.message.label', 'Cannot save due to validation error on page'),
          buttons: [{
            label: this.props.translate('react.stockMovement.confirmPreviousPage.correctError.label', 'Correct error')
          }, {
            label: this.props.translate('react.stockMovement.confirmPreviousPage.continue.label', 'Continue (lose unsaved work)'),
            onClick: function onClick() {
              return _this18.props.previousPage(values);
            }
          }]
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this19 = this;
      var showOnly = this.props.showOnly;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {
        onSubmit: function onSubmit() {},
        validate: this.validate,
        mutators: _objectSpread({}, arrayMutators),
        initialValues: this.state.values,
        render: function render(_ref23) {
          var handleSubmit = _ref23.handleSubmit,
            values = _ref23.values,
            invalid = _ref23.invalid;
          return /*#__PURE__*/React.createElement("div", {
            className: "d-flex flex-column"
          }, !showOnly ? /*#__PURE__*/React.createElement("span", {
            className: "buttons-container"
          }, /*#__PURE__*/React.createElement("label", {
            htmlFor: "csvInput",
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-download pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.importTemplate.label",
            defaultMessage: "Import template"
          })), /*#__PURE__*/React.createElement("input", {
            id: "csvInput",
            type: "file",
            style: {
              display: 'none'
            },
            onChange: _this19.importTemplate,
            onClick: function onClick(event) {
              // eslint-disable-next-line no-param-reassign
              event.target.value = null;
            },
            accept: ".csv"
          })), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this19.exportTemplate(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-upload pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.exportTemplate.label",
            defaultMessage: "Export template"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            onClick: function onClick() {
              return _this19.refresh();
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-refresh pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.refresh.label",
            defaultMessage: "Reload"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid,
            onClick: function onClick() {
              return _this19.removeAll();
            },
            className: "float-right mb-1 btn btn-outline-danger align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-remove pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.deleteAll.label",
            defaultMessage: "Delete all"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid
            // onClick -> onMouseDown (see comment for DELETE_BUTTON_FIELD)
            ,
            onMouseDown: function onMouseDown() {
              return _this19.save(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", {
            className: "saving-button"
          }, _.some(values.lineItems, function (item) {
            return item.rowSaveStatus === RowSaveStatus.SAVING;
          }) ? /*#__PURE__*/React.createElement(Spinner, null) : /*#__PURE__*/React.createElement("i", {
            className: "fa fa-save pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.save.label",
            defaultMessage: "Save"
          }))), /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid
            // onClick -> onMouseDown (see comment for DELETE_BUTTON_FIELD)
            ,
            onMouseDown: function onMouseDown() {
              return _this19.saveAndExit(values);
            },
            className: "float-right mb-1 btn btn-outline-secondary align-self-end ml-1 btn-xs"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-sign-out pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.saveAndExit.label",
            defaultMessage: "Save and exit"
          })))) : /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid,
            onClick: function onClick() {
              window.location = '/openboxes/stockMovement/list?direction=OUTBOUND';
            },
            className: "float-right mb-1 btn btn-outline-danger align-self-end btn-xs mr-2"
          }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
            className: "fa fa-sign-out pr-2"
          }), /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.exit.label",
            defaultMessage: "Exit"
          }))), /*#__PURE__*/React.createElement("form", {
            onSubmit: handleSubmit
          }, /*#__PURE__*/React.createElement("div", {
            className: "table-form"
          }, _.map(_this19.getFields(), function (fieldConfig, fieldName) {
            return renderFormField(fieldConfig, fieldName, {
              stocklist: values.stocklist,
              recipients: _this19.props.recipients,
              removeItem: _this19.removeItem,
              originId: _this19.props.initialValues.origin.id,
              getSortOrder: _this19.getSortOrder,
              newItemAdded: _this19.newItemAdded,
              newItem: _this19.state.newItem,
              totalCount: _this19.state.totalCount,
              loadMoreRows: _this19.loadMoreRows,
              isRowLoaded: _this19.isRowLoaded,
              updateTotalCount: _this19.updateTotalCount,
              isPaginated: _this19.props.isPaginated,
              isFromOrder: _this19.state.values.isFromOrder,
              showOnly: showOnly,
              updateRow: _this19.updateRow,
              values: values,
              isFirstPageLoaded: _this19.state.isFirstPageLoaded,
              saveProgress: _this19.saveProgress,
              getStockMovementDraft: _this19.getStockMovementDraft,
              isDraftAvailable: _this19.state.isDraftAvailable,
              isAutosaveEnabled: _this19.props.isAutosaveEnabled
            });
          })), /*#__PURE__*/React.createElement("div", {
            className: "submit-buttons"
          }, /*#__PURE__*/React.createElement("button", {
            type: "button",
            disabled: invalid || showOnly || _.some(values.lineItems, function (item) {
              return item.quantityRequested <= 0;
            })
            // onClick -> onMouseDown (see comment for DELETE_BUTTON_FIELD)
            ,
            onMouseDown: function onMouseDown() {
              if (_this19.props.isAutosaveEnabled && _.some(values.lineItems, function (lineItem) {
                return (lineItem.rowSaveStatus === RowSaveStatus.PENDING || lineItem.rowSaveStatus === RowSaveStatus.SAVING) && lineItem.product;
              })) {
                _this19.showPendingSaveNotification();
                return;
              }
              _this19.previousPage(values, invalid);
            },
            className: "btn btn-outline-primary btn-form btn-xs"
          }, /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.previous.label",
            defaultMessage: "Previous"
          })), /*#__PURE__*/React.createElement("button", {
            type: "submit"
            // onClick -> onMouseDown (see comment for DELETE_BUTTON_FIELD)
            ,
            onMouseDown: function onMouseDown() {
              if (_this19.props.isAutosaveEnabled && _.some(values.lineItems, function (lineItem) {
                return lineItem.rowSaveStatus === RowSaveStatus.PENDING || lineItem.rowSaveStatus === RowSaveStatus.SAVING;
              })) {
                _this19.showPendingSaveNotification();
                return;
              }
              if (!invalid) {
                _this19.nextPage(values);
              }
            },
            className: "btn btn-outline-primary btn-form float-right btn-xs",
            disabled: values.lineItems.length === 0 || values.lineItems.length === 1 && !('product' in values.lineItems[0]) || invalid || showOnly || _.some(values.lineItems, function (item) {
              return item.quantityRequested <= 0;
            })
          }, /*#__PURE__*/React.createElement(Translate, {
            id: "react.default.button.next.label",
            defaultMessage: "Next"
          })))));
        }
      }), this.props.autoSaveInfoBarVisibility && /*#__PURE__*/React.createElement(AutosaveFeatureModal, null));
    }
  }]);
  return AddItemsPage;
}(Component);
var mapStateToProps = function mapStateToProps(state, ownProps) {
  return {
    recipients: state.users.data,
    translate: translateWithDefaultMessage(getTranslate(state.localize)),
    stockMovementTranslationsFetched: state.session.fetchedTranslations.stockMovement,
    minimumExpirationDate: state.session.minimumExpirationDate,
    hasPackingSupport: state.session.currentLocation.hasPackingSupport,
    isPaginated: state.session.isPaginated,
    pageSize: state.session.pageSize,
    savedStockMovement: state.stockMovementDraft[ownProps.initialValues.id],
    isOnline: state.connection.online,
    isAutosaveEnabled: state.session.isAutosaveEnabled,
    bars: state.infoBar.bars,
    autoSaveInfoBarVisibility: state.infoBarVisibility[InfoBar.AUTOSAVE],
    supportedActivities: state.session.supportedActivities
  };
};
var mapDispatchToProps = {
  showSpinner: showSpinner,
  hideSpinner: hideSpinner,
  fetchUsers: fetchUsers,
  addStockMovementDraft: addStockMovementDraft,
  removeStockMovementDraft: removeStockMovementDraft,
  createInfoBar: createInfoBar,
  hideInfoBar: hideInfoBar,
  closeInfoBar: closeInfoBar,
  showInfoBar: showInfoBar
};
export default connect(mapStateToProps, mapDispatchToProps)(AddItemsPage);
AddItemsPage.propTypes = {
  /** Initial component's data */
  initialValues: PropTypes.shape({
    origin: PropTypes.shape({
      id: PropTypes.string
    }),
    hasManageInventory: PropTypes.bool
  }).isRequired,
  /** Function returning user to the previous page */
  previousPage: PropTypes.func.isRequired,
  /**
   * Function called with the form data when the handleSubmit()
   * is fired from within the form component.
   */
  nextPage: PropTypes.func.isRequired,
  /** Function called when data is loading */
  showSpinner: PropTypes.func.isRequired,
  /** Function called when data has loaded */
  hideSpinner: PropTypes.func.isRequired,
  /** Function fetching users */
  fetchUsers: PropTypes.func.isRequired,
  /** Array of available recipients  */
  recipients: PropTypes.arrayOf(PropTypes.shape({})).isRequired,
  translate: PropTypes.func.isRequired,
  stockMovementTranslationsFetched: PropTypes.bool.isRequired,
  minimumExpirationDate: PropTypes.string.isRequired,
  /** Return true if pagination is enabled */
  isPaginated: PropTypes.bool.isRequired,
  /** Return true if show only */
  showOnly: PropTypes.bool,
  pageSize: PropTypes.number.isRequired,
  addStockMovementDraft: PropTypes.func.isRequired,
  removeStockMovementDraft: PropTypes.func.isRequired,
  savedStockMovement: PropTypes.shape({
    id: PropTypes.string,
    lineItems: PropTypes.arrayOf(PropTypes.shape({})),
    lastUpdated: PropTypes.string,
    statusCode: null
  }),
  isOnline: PropTypes.bool,
  isAutosaveEnabled: PropTypes.bool,
  createInfoBar: PropTypes.func.isRequired,
  bars: PropTypes.arrayOf(PropTypes.shape({
    name: PropTypes.string.isRequired,
    show: PropTypes.bool.isRequired,
    closed: PropTypes.bool,
    title: PropTypes.shape({
      label: PropTypes.string.isRequired,
      defaultLabel: PropTypes.string.isRequired
    }),
    versionLabel: PropTypes.shape({
      label: PropTypes.string.isRequired,
      defaultLabel: PropTypes.string.isRequired
    })
  })).isRequired,
  autoSaveInfoBarVisibility: PropTypes.bool.isRequired,
  showInfoBar: PropTypes.func.isRequired,
  hideInfoBar: PropTypes.func.isRequired
};
AddItemsPage.defaultProps = {
  showOnly: false,
  savedStockMovement: {
    id: null,
    lineItems: [],
    lastUpdated: null,
    statusCode: null
  },
  isOnline: true,
  isAutosaveEnabled: false
};"},null]}